import { inject, Injectable, InjectionToken, Injector } from '@angular/core';
import { getValue, isDefined, isObject, isString, setValue } from './helpers';
import { defaultConfig, TRANSLOCO_CONFIG, } from './transloco.config';
import * as i0 from "@angular/core";
export const TRANSLOCO_TRANSPILER = new InjectionToken('TRANSLOCO_TRANSPILER');
export class DefaultTranspiler {
    config = inject(TRANSLOCO_CONFIG, { optional: true }) ?? defaultConfig;
    get interpolationMatcher() {
        return resolveMatcher(this.config);
    }
    transpile({ value, params = {}, translation, key }) {
        if (isString(value)) {
            let paramMatch;
            let parsedValue = value;
            while ((paramMatch = this.interpolationMatcher.exec(parsedValue)) !== null) {
                const [match, paramValue] = paramMatch;
                parsedValue = parsedValue.replace(match, () => {
                    const match = paramValue.trim();
                    const param = getValue(params, match);
                    if (isDefined(param)) {
                        return param;
                    }
                    return isDefined(translation[match])
                        ? this.transpile({
                            params,
                            translation,
                            key,
                            value: translation[match],
                        })
                        : '';
                });
            }
            return parsedValue;
        }
        else if (params) {
            if (isObject(value)) {
                value = this.handleObject({
                    value,
                    params,
                    translation,
                    key,
                });
            }
            else if (Array.isArray(value)) {
                value = this.handleArray({ value, params, translation, key });
            }
        }
        return value;
    }
    /**
     *
     * @example
     *
     * const en = {
     *  a: {
     *    b: {
     *      c: "Hello {{ value }}"
     *    }
     *  }
     * }
     *
     * const params =  {
     *  "b.c": { value: "Transloco "}
     * }
     *
     * service.selectTranslate('a', params);
     *
     * // the first param will be the result of `en.a`.
     * // the second param will be `params`.
     * parser.transpile(value, params, {});
     *
     *
     */
    handleObject({ value, params = {}, translation, key, }) {
        let result = value;
        Object.keys(params).forEach((p) => {
            // transpile the value => "Hello Transloco"
            const transpiled = this.transpile({
                // get the value of "b.c" inside "a" => "Hello {{ value }}"
                value: getValue(result, p),
                // get the params of "b.c" => { value: "Transloco" }
                params: getValue(params, p),
                translation,
                key,
            });
            // set "b.c" to `transpiled`
            result = setValue(result, p, transpiled);
        });
        return result;
    }
    handleArray({ value, ...rest }) {
        return value.map((v) => this.transpile({
            value: v,
            ...rest,
        }));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: DefaultTranspiler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: DefaultTranspiler });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: DefaultTranspiler, decorators: [{
            type: Injectable
        }] });
function resolveMatcher(config) {
    const [start, end] = config.interpolation;
    return new RegExp(`${start}([^${start}${end}]*?)${end}`, 'g');
}
export function getFunctionArgs(argsString) {
    const splitted = argsString ? argsString.split(',') : [];
    const args = [];
    for (let i = 0; i < splitted.length; i++) {
        let value = splitted[i].trim();
        while (value[value.length - 1] === '\\') {
            i++;
            value = value.replace('\\', ',') + splitted[i];
        }
        args.push(value);
    }
    return args;
}
export class FunctionalTranspiler extends DefaultTranspiler {
    injector = inject(Injector);
    transpile({ value, ...rest }) {
        let transpiled = value;
        if (isString(value)) {
            transpiled = value.replace(/\[\[\s*(\w+)\((.*?)\)\s*]]/g, (match, functionName, args) => {
                try {
                    const func = this.injector.get(functionName);
                    return func.transpile(...getFunctionArgs(args));
                }
                catch (e) {
                    let message = `There is an error in: '${value}'. 
                          Check that the you used the right syntax in your translation and that the implementation of ${functionName} is correct.`;
                    if (e.message.includes('NullInjectorError')) {
                        message = `You are using the '${functionName}' function in your translation but no provider was found!`;
                    }
                    throw new Error(message);
                }
            });
        }
        return super.transpile({ value: transpiled, ...rest });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: FunctionalTranspiler, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: FunctionalTranspiler });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: FunctionalTranspiler, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,