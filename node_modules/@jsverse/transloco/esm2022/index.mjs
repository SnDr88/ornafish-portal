export { translate, translateObject, TranslocoService, } from './lib/transloco.service';
export { TranslocoDirective } from './lib/transloco.directive';
export { TranslocoPipe } from './lib/transloco.pipe';
export { TranslocoModule } from './lib/transloco.module';
export { TRANSLOCO_LOADER } from './lib/transloco.loader';
export { TRANSLOCO_CONFIG, defaultConfig, translocoConfig, } from './lib/transloco.config';
export { TRANSLOCO_TRANSPILER, DefaultTranspiler, FunctionalTranspiler, getFunctionArgs, } from './lib/transloco.transpiler';
export { TRANSLOCO_SCOPE } from './lib/transloco-scope';
export { TRANSLOCO_LOADING_TEMPLATE } from './lib/transloco-loading-template';
export { TRANSLOCO_LANG } from './lib/transloco-lang';
export { TestingLoader, TranslocoTestingModule, } from './lib/transloco-testing.module';
export { TRANSLOCO_INTERCEPTOR, DefaultInterceptor, } from './lib/transloco.interceptor';
export { TRANSLOCO_FALLBACK_STRATEGY, DefaultFallbackStrategy, } from './lib/transloco-fallback-strategy';
export { TRANSLOCO_MISSING_HANDLER, DefaultMissingHandler, } from './lib/transloco-missing-handler';
export { getBrowserCultureLang, getBrowserLang } from './lib/browser-lang';
export { getPipeValue, getLangFromScope, getScopeFromLang } from './lib/shared';
export * from './lib/types';
export * from './lib/helpers';
export { provideTranslocoFallbackStrategy, provideTranslocoInterceptor, provideTranslocoTranspiler, provideTranslocoMissingHandler, provideTranslocoLoadingTpl, provideTransloco, provideTranslocoConfig, provideTranslocoLoader, provideTranslocoScope, provideTranslocoLang, } from './lib/transloco.providers';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWJzL3RyYW5zbG9jby9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxlQUFlLEVBQ2YsZ0JBQWdCLEdBQ2pCLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQW1CLE1BQU0sd0JBQXdCLENBQUM7QUFDM0UsT0FBTyxFQUVMLGdCQUFnQixFQUNoQixhQUFhLEVBQ2IsZUFBZSxHQUNoQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFFTCxvQkFBb0IsRUFDcEIsaUJBQWlCLEVBRWpCLG9CQUFvQixFQUNwQixlQUFlLEdBRWhCLE1BQU0sNEJBQTRCLENBQUM7QUFDcEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsYUFBYSxFQUNiLHNCQUFzQixHQUV2QixNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFDTCxxQkFBcUIsRUFFckIsa0JBQWtCLEdBQ25CLE1BQU0sNkJBQTZCLENBQUM7QUFDckMsT0FBTyxFQUNMLDJCQUEyQixFQUUzQix1QkFBdUIsR0FDeEIsTUFBTSxtQ0FBbUMsQ0FBQztBQUMzQyxPQUFPLEVBQ0wseUJBQXlCLEVBR3pCLHFCQUFxQixHQUN0QixNQUFNLGlDQUFpQyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hGLGNBQWMsYUFBYSxDQUFDO0FBQzVCLGNBQWMsZUFBZSxDQUFDO0FBQzlCLE9BQU8sRUFDTCxnQ0FBZ0MsRUFDaEMsMkJBQTJCLEVBQzNCLDBCQUEwQixFQUMxQiw4QkFBOEIsRUFDOUIsMEJBQTBCLEVBQzFCLGdCQUFnQixFQUNoQixzQkFBc0IsRUFDdEIsc0JBQXNCLEVBQ3RCLHFCQUFxQixFQUNyQixvQkFBb0IsR0FFckIsTUFBTSwyQkFBMkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7XG4gIHRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlT2JqZWN0LFxuICBUcmFuc2xvY29TZXJ2aWNlLFxufSBmcm9tICcuL2xpYi90cmFuc2xvY28uc2VydmljZSc7XG5leHBvcnQgeyBUcmFuc2xvY29EaXJlY3RpdmUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28uZGlyZWN0aXZlJztcbmV4cG9ydCB7IFRyYW5zbG9jb1BpcGUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28ucGlwZSc7XG5leHBvcnQgeyBUcmFuc2xvY29Nb2R1bGUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28ubW9kdWxlJztcbmV4cG9ydCB7IFRSQU5TTE9DT19MT0FERVIsIFRyYW5zbG9jb0xvYWRlciB9IGZyb20gJy4vbGliL3RyYW5zbG9jby5sb2FkZXInO1xuZXhwb3J0IHtcbiAgVHJhbnNsb2NvQ29uZmlnLFxuICBUUkFOU0xPQ09fQ09ORklHLFxuICBkZWZhdWx0Q29uZmlnLFxuICB0cmFuc2xvY29Db25maWcsXG59IGZyb20gJy4vbGliL3RyYW5zbG9jby5jb25maWcnO1xuZXhwb3J0IHtcbiAgVHJhbnNwaWxlUGFyYW1zLFxuICBUUkFOU0xPQ09fVFJBTlNQSUxFUixcbiAgRGVmYXVsdFRyYW5zcGlsZXIsXG4gIFRyYW5zbG9jb1RyYW5zcGlsZXIsXG4gIEZ1bmN0aW9uYWxUcmFuc3BpbGVyLFxuICBnZXRGdW5jdGlvbkFyZ3MsXG4gIFRyYW5zbG9jb1RyYW5zcGlsZXJGdW5jdGlvbixcbn0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLnRyYW5zcGlsZXInO1xuZXhwb3J0IHsgVFJBTlNMT0NPX1NDT1BFIH0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLXNjb3BlJztcbmV4cG9ydCB7IFRSQU5TTE9DT19MT0FESU5HX1RFTVBMQVRFIH0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLWxvYWRpbmctdGVtcGxhdGUnO1xuZXhwb3J0IHsgVFJBTlNMT0NPX0xBTkcgfSBmcm9tICcuL2xpYi90cmFuc2xvY28tbGFuZyc7XG5leHBvcnQge1xuICBUZXN0aW5nTG9hZGVyLFxuICBUcmFuc2xvY29UZXN0aW5nTW9kdWxlLFxuICBUcmFuc2xvY29UZXN0aW5nT3B0aW9ucyxcbn0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLXRlc3RpbmcubW9kdWxlJztcbmV4cG9ydCB7XG4gIFRSQU5TTE9DT19JTlRFUkNFUFRPUixcbiAgVHJhbnNsb2NvSW50ZXJjZXB0b3IsXG4gIERlZmF1bHRJbnRlcmNlcHRvcixcbn0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLmludGVyY2VwdG9yJztcbmV4cG9ydCB7XG4gIFRSQU5TTE9DT19GQUxMQkFDS19TVFJBVEVHWSxcbiAgVHJhbnNsb2NvRmFsbGJhY2tTdHJhdGVneSxcbiAgRGVmYXVsdEZhbGxiYWNrU3RyYXRlZ3ksXG59IGZyb20gJy4vbGliL3RyYW5zbG9jby1mYWxsYmFjay1zdHJhdGVneSc7XG5leHBvcnQge1xuICBUUkFOU0xPQ09fTUlTU0lOR19IQU5ETEVSLFxuICBUcmFuc2xvY29NaXNzaW5nSGFuZGxlcixcbiAgVHJhbnNsb2NvTWlzc2luZ0hhbmRsZXJEYXRhLFxuICBEZWZhdWx0TWlzc2luZ0hhbmRsZXIsXG59IGZyb20gJy4vbGliL3RyYW5zbG9jby1taXNzaW5nLWhhbmRsZXInO1xuZXhwb3J0IHsgZ2V0QnJvd3NlckN1bHR1cmVMYW5nLCBnZXRCcm93c2VyTGFuZyB9IGZyb20gJy4vbGliL2Jyb3dzZXItbGFuZyc7XG5leHBvcnQgeyBnZXRQaXBlVmFsdWUsIGdldExhbmdGcm9tU2NvcGUsIGdldFNjb3BlRnJvbUxhbmcgfSBmcm9tICcuL2xpYi9zaGFyZWQnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvdHlwZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvaGVscGVycyc7XG5leHBvcnQge1xuICBwcm92aWRlVHJhbnNsb2NvRmFsbGJhY2tTdHJhdGVneSxcbiAgcHJvdmlkZVRyYW5zbG9jb0ludGVyY2VwdG9yLFxuICBwcm92aWRlVHJhbnNsb2NvVHJhbnNwaWxlcixcbiAgcHJvdmlkZVRyYW5zbG9jb01pc3NpbmdIYW5kbGVyLFxuICBwcm92aWRlVHJhbnNsb2NvTG9hZGluZ1RwbCxcbiAgcHJvdmlkZVRyYW5zbG9jbyxcbiAgcHJvdmlkZVRyYW5zbG9jb0NvbmZpZyxcbiAgcHJvdmlkZVRyYW5zbG9jb0xvYWRlcixcbiAgcHJvdmlkZVRyYW5zbG9jb1Njb3BlLFxuICBwcm92aWRlVHJhbnNsb2NvTGFuZyxcbiAgVHJhbnNsb2NvT3B0aW9ucyxcbn0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLnByb3ZpZGVycyc7XG4iXX0=