{
  "version": 3,
  "sources": ["../../../../../../node_modules/crypto-js/sha256.js", "../../../../../../node_modules/crypto-js/hmac.js", "../../../../../../node_modules/crypto-js/hmac-sha256.js"],
  "sourcesContent": [";\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Initialization and round constants tables\n    var H = [];\n    var K = [];\n\n    // Compute constants\n    (function () {\n      function isPrime(n) {\n        var sqrtN = Math.sqrt(n);\n        for (var factor = 2; factor <= sqrtN; factor++) {\n          if (!(n % factor)) {\n            return false;\n          }\n        }\n        return true;\n      }\n      function getFractionalBits(n) {\n        return (n - (n | 0)) * 0x100000000 | 0;\n      }\n      var n = 2;\n      var nPrime = 0;\n      while (nPrime < 64) {\n        if (isPrime(n)) {\n          if (nPrime < 8) {\n            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n          }\n          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n          nPrime++;\n        }\n        n++;\n      }\n    })();\n\n    // Reusable object\n    var W = [];\n\n    /**\n     * SHA-256 hash algorithm.\n     */\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\n      _doReset: function () {\n        this._hash = new WordArray.init(H.slice(0));\n      },\n      _doProcessBlock: function (M, offset) {\n        // Shortcut\n        var H = this._hash.words;\n\n        // Working variables\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n        var f = H[5];\n        var g = H[6];\n        var h = H[7];\n\n        // Computation\n        for (var i = 0; i < 64; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var gamma0x = W[i - 15];\n            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n            var gamma1x = W[i - 2];\n            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n          }\n          var ch = e & f ^ ~e & g;\n          var maj = a & b ^ a & c ^ b & c;\n          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n          var t1 = h + sigma1 + ch + K[i] + W[i];\n          var t2 = sigma0 + maj;\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 | 0;\n        }\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n        H[5] = H[5] + f | 0;\n        H[6] = H[6] + g | 0;\n        H[7] = H[7] + h | 0;\n      },\n      _doFinalize: function () {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Return final computed hash\n        return this._hash;\n      },\n      clone: function () {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n        return clone;\n      }\n    });\n\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA256('message');\n     *     var hash = CryptoJS.SHA256(wordArray);\n     */\n    C.SHA256 = Hasher._createHelper(SHA256);\n\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\n     */\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n  })(Math);\n  return CryptoJS.SHA256;\n});", ";\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n     * HMAC algorithm.\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n      /**\n       * Initializes a newly created HMAC.\n       *\n       * @param {Hasher} hasher The hash algorithm to use.\n       * @param {WordArray|string} key The secret key.\n       *\n       * @example\n       *\n       *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n       */\n      init: function (hasher, key) {\n        // Init hasher\n        hasher = this._hasher = new hasher.init();\n\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof key == 'string') {\n          key = Utf8.parse(key);\n        }\n\n        // Shortcuts\n        var hasherBlockSize = hasher.blockSize;\n        var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n        // Allow arbitrary length keys\n        if (key.sigBytes > hasherBlockSizeBytes) {\n          key = hasher.finalize(key);\n        }\n\n        // Clamp excess bits\n        key.clamp();\n\n        // Clone key for inner and outer pads\n        var oKey = this._oKey = key.clone();\n        var iKey = this._iKey = key.clone();\n\n        // Shortcuts\n        var oKeyWords = oKey.words;\n        var iKeyWords = iKey.words;\n\n        // XOR keys with pad constants\n        for (var i = 0; i < hasherBlockSize; i++) {\n          oKeyWords[i] ^= 0x5c5c5c5c;\n          iKeyWords[i] ^= 0x36363636;\n        }\n        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n        // Set initial values\n        this.reset();\n      },\n      /**\n       * Resets this HMAC to its initial state.\n       *\n       * @example\n       *\n       *     hmacHasher.reset();\n       */\n      reset: function () {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Reset\n        hasher.reset();\n        hasher.update(this._iKey);\n      },\n      /**\n       * Updates this HMAC with a message.\n       *\n       * @param {WordArray|string} messageUpdate The message to append.\n       *\n       * @return {HMAC} This HMAC instance.\n       *\n       * @example\n       *\n       *     hmacHasher.update('message');\n       *     hmacHasher.update(wordArray);\n       */\n      update: function (messageUpdate) {\n        this._hasher.update(messageUpdate);\n\n        // Chainable\n        return this;\n      },\n      /**\n       * Finalizes the HMAC computation.\n       * Note that the finalize operation is effectively a destructive, read-once operation.\n       *\n       * @param {WordArray|string} messageUpdate (Optional) A final message update.\n       *\n       * @return {WordArray} The HMAC.\n       *\n       * @example\n       *\n       *     var hmac = hmacHasher.finalize();\n       *     var hmac = hmacHasher.finalize('message');\n       *     var hmac = hmacHasher.finalize(wordArray);\n       */\n      finalize: function (messageUpdate) {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Compute HMAC\n        var innerHash = hasher.finalize(messageUpdate);\n        hasher.reset();\n        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n        return hmac;\n      }\n    });\n  })();\n});", ";\n(function (root, factory, undef) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"), require(\"./sha256\"), require(\"./hmac\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\", \"./sha256\", \"./hmac\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  return CryptoJS.HmacSHA256;\n});"],
  "mappings": "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",
  "names": ["Math", "n", "H"]
}
