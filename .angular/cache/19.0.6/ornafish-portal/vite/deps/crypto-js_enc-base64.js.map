{
  "version": 3,
  "sources": ["../../../../../../node_modules/crypto-js/enc-base64.js"],
  "sourcesContent": [";\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n      /**\n       * Converts a word array to a Base64 string.\n       *\n       * @param {WordArray} wordArray The word array.\n       *\n       * @return {string} The Base64 string.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n       */\n      stringify: function (wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n        var map = this._map;\n\n        // Clamp excess bits\n        wordArray.clamp();\n\n        // Convert\n        var base64Chars = [];\n        for (var i = 0; i < sigBytes; i += 3) {\n          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n          var triplet = byte1 << 16 | byte2 << 8 | byte3;\n          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n          }\n        }\n\n        // Add padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          while (base64Chars.length % 4) {\n            base64Chars.push(paddingChar);\n          }\n        }\n        return base64Chars.join('');\n      },\n      /**\n       * Converts a Base64 string to a word array.\n       *\n       * @param {string} base64Str The Base64 string.\n       *\n       * @return {WordArray} The word array.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n       */\n      parse: function (base64Str) {\n        // Shortcuts\n        var base64StrLength = base64Str.length;\n        var map = this._map;\n        var reverseMap = this._reverseMap;\n        if (!reverseMap) {\n          reverseMap = this._reverseMap = [];\n          for (var j = 0; j < map.length; j++) {\n            reverseMap[map.charCodeAt(j)] = j;\n          }\n        }\n\n        // Ignore padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          var paddingIndex = base64Str.indexOf(paddingChar);\n          if (paddingIndex !== -1) {\n            base64StrLength = paddingIndex;\n          }\n        }\n\n        // Convert\n        return parseLoop(base64Str, base64StrLength, reverseMap);\n      },\n      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n    function parseLoop(base64Str, base64StrLength, reverseMap) {\n      var words = [];\n      var nBytes = 0;\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n          var bitsCombined = bits1 | bits2;\n          words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n      return WordArray.create(words, nBytes);\n    }\n  })();\n  return CryptoJS.enc.Base64;\n});"],
  "mappings": "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",
  "names": []
}
