{
  "version": 3,
  "sources": ["src/app/core/user/user.service.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { User } from 'app/core/user/user.types';\nimport { map, Observable, ReplaySubject, tap } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    private _httpClient = inject(HttpClient);\n    private _user: ReplaySubject<User> = new ReplaySubject<User>(1);\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Setter & getter for user\n     *\n     * @param value\n     */\n    set user(value: User) {\n        // Store the value\n        this._user.next(value);\n    }\n\n    get user$(): Observable<User> {\n        return this._user.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get the current signed-in user data\n     */\n    get(): Observable<User> {\n        return this._httpClient.get<User>('api/common/user').pipe(\n            tap((user) => {\n                this._user.next(user);\n            })\n        );\n    }\n\n    /**\n     * Update the user\n     *\n     * @param user\n     */\n    update(user: User): Observable<any> {\n        return this._httpClient\n            .patch<{ message: string; user: User }>('/api/common/user', { user })\n            .pipe(\n                map((response) => {\n                    this._user.next(response.user); // âœ… hier extract je de juiste user\n                    return response.user;\n                })\n            );\n    }\n\n    changePassword(currentPassword: string, newPassword: string): Observable<any> {\n        return this._httpClient.patch('/api/common/password', {\n            currentPassword,\n            newPassword,\n        });\n    }\n}\n"],
  "mappings": "+GAMA,IAAaA,GAAW,IAAA,CAAlB,MAAOA,CAAW,CADxBC,aAAA,CAEY,KAAAC,YAAcC,EAAOC,CAAU,EAC/B,KAAAC,MAA6B,IAAIC,EAAoB,CAAC,EAW9D,IAAIC,KAAKC,EAAW,CAEhB,KAAKH,MAAMI,KAAKD,CAAK,CACzB,CAEA,IAAIE,OAAK,CACL,OAAO,KAAKL,MAAMM,aAAY,CAClC,CASAC,KAAG,CACC,OAAO,KAAKV,YAAYU,IAAU,iBAAiB,EAAEC,KACjDC,EAAKP,GAAQ,CACT,KAAKF,MAAMI,KAAKF,CAAI,CACxB,CAAC,CAAC,CAEV,CAOAQ,OAAOR,EAAU,CACb,OAAO,KAAKL,YACPc,MAAuC,mBAAoB,CAAET,KAAAA,CAAI,CAAE,EACnEM,KACGI,EAAKC,IACD,KAAKb,MAAMI,KAAKS,EAASX,IAAI,EACtBW,EAASX,KACnB,CAAC,CAEd,CAEAY,eAAeC,EAAyBC,EAAmB,CACvD,OAAO,KAAKnB,YAAYc,MAAM,uBAAwB,CAClDI,gBAAAA,EACAC,YAAAA,EACH,CACL,iDA1DSrB,EAAW,CAAA,iCAAXA,EAAWsB,QAAXtB,EAAWuB,UAAAC,WADE,MAAM,CAAA,CAAA,SACnBxB,CAAW,GAAA",
  "names": ["UserService", "constructor", "_httpClient", "inject", "HttpClient", "_user", "ReplaySubject", "user", "value", "next", "user$", "asObservable", "get", "pipe", "tap", "update", "patch", "map", "response", "changePassword", "currentPassword", "newPassword", "factory", "\u0275fac", "providedIn"]
}
