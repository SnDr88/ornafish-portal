{
  "version": 3,
  "sources": ["src/@fuse/services/config/config.constants.ts", "src/@fuse/services/config/config.service.ts", "src/@fuse/services/media-watcher/media-watcher.service.ts"],
  "sourcesContent": ["import { InjectionToken } from '@angular/core';\n\nexport const FUSE_CONFIG = new InjectionToken<any>('FUSE_APP_CONFIG');\n", "import { inject, Injectable } from '@angular/core';\nimport { FUSE_CONFIG } from '@fuse/services/config/config.constants';\nimport { merge } from 'lodash-es';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class FuseConfigService {\n    private _config = new BehaviorSubject(inject(FUSE_CONFIG));\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Setter & getter for config\n     */\n    set config(value: any) {\n        // Merge the new config over to the current config\n        const config = merge({}, this._config.getValue(), value);\n\n        // Execute the observable\n        this._config.next(config);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    get config$(): Observable<any> {\n        return this._config.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Resets the config to the default\n     */\n    reset(): void {\n        // Set the config\n        this._config.next(this.config);\n    }\n}\n", "import { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { Injectable, inject } from '@angular/core';\nimport { FuseConfigService } from '@fuse/services/config';\nimport { fromPairs } from 'lodash-es';\nimport { Observable, ReplaySubject, map, switchMap } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class FuseMediaWatcherService {\n    private _breakpointObserver = inject(BreakpointObserver);\n    private _fuseConfigService = inject(FuseConfigService);\n\n    private _onMediaChange: ReplaySubject<{\n        matchingAliases: string[];\n        matchingQueries: any;\n    }> = new ReplaySubject<{ matchingAliases: string[]; matchingQueries: any }>(\n        1\n    );\n\n    /**\n     * Constructor\n     */\n    constructor() {\n        this._fuseConfigService.config$\n            .pipe(\n                map((config) =>\n                    fromPairs(\n                        Object.entries(config.screens).map(\n                            ([alias, screen]) => [\n                                alias,\n                                `(min-width: ${screen})`,\n                            ]\n                        )\n                    )\n                ),\n                switchMap((screens) =>\n                    this._breakpointObserver\n                        .observe(Object.values(screens))\n                        .pipe(\n                            map((state) => {\n                                // Prepare the observable values and set their defaults\n                                const matchingAliases: string[] = [];\n                                const matchingQueries: any = {};\n\n                                // Get the matching breakpoints and use them to fill the subject\n                                const matchingBreakpoints =\n                                    Object.entries(state.breakpoints).filter(\n                                        ([query, matches]) => matches\n                                    ) ?? [];\n                                for (const [query] of matchingBreakpoints) {\n                                    // Find the alias of the matching query\n                                    const matchingAlias = Object.entries(\n                                        screens\n                                    ).find(([alias, q]) => q === query)[0];\n\n                                    // Add the matching query to the observable values\n                                    if (matchingAlias) {\n                                        matchingAliases.push(matchingAlias);\n                                        matchingQueries[matchingAlias] = query;\n                                    }\n                                }\n\n                                // Execute the observable\n                                this._onMediaChange.next({\n                                    matchingAliases,\n                                    matchingQueries,\n                                });\n                            })\n                        )\n                )\n            )\n            .subscribe();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for _onMediaChange\n     */\n    get onMediaChange$(): Observable<{\n        matchingAliases: string[];\n        matchingQueries: any;\n    }> {\n        return this._onMediaChange.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On media query change\n     *\n     * @param query\n     */\n    onMediaQueryChange$(query: string | string[]): Observable<BreakpointState> {\n        return this._breakpointObserver.observe(query);\n    }\n}\n"],
  "mappings": "4KAEO,IAAMA,EAAc,IAAIC,EAAoB,iBAAiB,ECIpE,IAAaC,GAAiB,IAAA,CAAxB,MAAOA,CAAiB,CAD9BC,aAAA,CAEY,KAAAC,QAAU,IAAIC,EAAgBC,EAAOC,CAAW,CAAC,EASzD,IAAIC,OAAOC,EAAU,CAEjB,IAAMD,EAASE,EAAM,CAAA,EAAI,KAAKN,QAAQO,SAAQ,EAAIF,CAAK,EAGvD,KAAKL,QAAQQ,KAAKJ,CAAM,CAC5B,CAGA,IAAIK,SAAO,CACP,OAAO,KAAKT,QAAQU,aAAY,CACpC,CASAC,OAAK,CAED,KAAKX,QAAQQ,KAAK,KAAKJ,MAAM,CACjC,iDAjCSN,EAAiB,CAAA,iCAAjBA,EAAiBc,QAAjBd,EAAiBe,UAAAC,WADJ,MAAM,CAAA,CAAA,SACnBhB,CAAiB,GAAA,ECC9B,IAAaiB,GAAuB,IAAA,CAA9B,MAAOA,CAAuB,CAchCC,aAAA,CAbQ,KAAAC,oBAAsBC,EAAOC,CAAkB,EAC/C,KAAAC,mBAAqBF,EAAOG,CAAiB,EAE7C,KAAAC,eAGH,IAAIC,EACL,CAAC,EAOD,KAAKH,mBAAmBI,QACnBC,KACGC,EAAKC,GACDC,EACIC,OAAOC,QAAQH,EAAOI,OAAO,EAAEL,IAC3B,CAAC,CAACM,EAAOC,CAAM,IAAM,CACjBD,EACA,eAAeC,CAAM,GAAG,CAC3B,CACJ,CACJ,EAELC,EAAWH,GACP,KAAKd,oBACAkB,QAAQN,OAAOO,OAAOL,CAAO,CAAC,EAC9BN,KACGC,EAAKW,GAAS,CAEV,IAAMC,EAA4B,CAAA,EAC5BC,EAAuB,CAAA,EAGvBC,EACFX,OAAOC,QAAQO,EAAMI,WAAW,EAAEC,OAC9B,CAAC,CAACC,EAAOC,CAAO,IAAMA,CAAO,GAC5B,CAAA,EACT,OAAW,CAACD,CAAK,IAAKH,EAAqB,CAEvC,IAAMK,EAAgBhB,OAAOC,QACzBC,CAAO,EACTe,KAAK,CAAC,CAACd,EAAOe,CAAC,IAAMA,IAAMJ,CAAK,EAAE,CAAC,EAGjCE,IACAP,EAAgBU,KAAKH,CAAa,EAClCN,EAAgBM,CAAa,EAAIF,EAEzC,CAGA,KAAKrB,eAAe2B,KAAK,CACrBX,gBAAAA,EACAC,gBAAAA,EACH,CACL,CAAC,CAAC,CACL,CACR,EAEJW,UAAS,CAClB,CASA,IAAIC,gBAAc,CAId,OAAO,KAAK7B,eAAe8B,aAAY,CAC3C,CAWAC,oBAAoBV,EAAwB,CACxC,OAAO,KAAK1B,oBAAoBkB,QAAQQ,CAAK,CACjD,iDA3FS5B,EAAuB,CAAA,iCAAvBA,EAAuBuC,QAAvBvC,EAAuBwC,UAAAC,WADV,MAAM,CAAA,CAAA,SACnBzC,CAAuB,GAAA",
  "names": ["FUSE_CONFIG", "InjectionToken", "FuseConfigService", "constructor", "_config", "BehaviorSubject", "inject", "FUSE_CONFIG", "config", "value", "merge", "getValue", "next", "config$", "asObservable", "reset", "factory", "\u0275fac", "providedIn", "FuseMediaWatcherService", "constructor", "_breakpointObserver", "inject", "BreakpointObserver", "_fuseConfigService", "FuseConfigService", "_onMediaChange", "ReplaySubject", "config$", "pipe", "map", "config", "fromPairs", "Object", "entries", "screens", "alias", "screen", "switchMap", "observe", "values", "state", "matchingAliases", "matchingQueries", "matchingBreakpoints", "breakpoints", "filter", "query", "matches", "matchingAlias", "find", "q", "push", "next", "subscribe", "onMediaChange$", "asObservable", "onMediaQueryChange$", "factory", "\u0275fac", "providedIn"]
}
