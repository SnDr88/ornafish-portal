{
  "version": 3,
  "sources": ["src/@fuse/validators/validators.ts", "src/app/modules/auth/reset-password/reset-password.component.ts", "src/app/modules/auth/reset-password/reset-password.component.html", "src/app/modules/auth/reset-password/reset-password.routes.ts"],
  "sourcesContent": ["import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport class FuseValidators {\n    /**\n     * Check for empty (optional fields) values\n     *\n     * @param value\n     */\n    static isEmptyInputValue(value: any): boolean {\n        return value == null || value.length === 0;\n    }\n\n    /**\n     * Must match validator\n     *\n     * @param controlPath A dot-delimited string values that define the path to the control.\n     * @param matchingControlPath A dot-delimited string values that define the path to the matching control.\n     */\n    static mustMatch(\n        controlPath: string,\n        matchingControlPath: string\n    ): ValidatorFn {\n        return (formGroup: AbstractControl): ValidationErrors | null => {\n            // Get the control and matching control\n            const control = formGroup.get(controlPath);\n            const matchingControl = formGroup.get(matchingControlPath);\n\n            // Return if control or matching control doesn't exist\n            if (!control || !matchingControl) {\n                return null;\n            }\n\n            // Delete the mustMatch error to reset the error on the matching control\n            if (matchingControl.hasError('mustMatch')) {\n                delete matchingControl.errors.mustMatch;\n                matchingControl.updateValueAndValidity();\n            }\n\n            // Don't validate empty values on the matching control\n            // Don't validate if values are matching\n            if (\n                this.isEmptyInputValue(matchingControl.value) ||\n                control.value === matchingControl.value\n            ) {\n                return null;\n            }\n\n            // Prepare the validation errors\n            const errors = { mustMatch: true };\n\n            // Set the validation error on the matching control\n            matchingControl.setErrors(errors);\n\n            // Return the errors\n            return errors;\n        };\n    }\n}\n", "import { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport {\n    FormsModule,\n    NgForm,\n    ReactiveFormsModule,\n    UntypedFormBuilder,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { RouterLink } from '@angular/router';\nimport { fuseAnimations } from '@fuse/animations';\nimport { FuseAlertComponent, FuseAlertType } from '@fuse/components/alert';\nimport { FuseValidators } from '@fuse/validators';\nimport { AuthService } from 'app/core/auth/auth.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n    selector: 'auth-reset-password',\n    templateUrl: './reset-password.component.html',\n    encapsulation: ViewEncapsulation.None,\n    animations: fuseAnimations,\n    imports: [\n        FuseAlertComponent,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatButtonModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        RouterLink,\n    ],\n})\nexport class AuthResetPasswordComponent implements OnInit {\n    @ViewChild('resetPasswordNgForm') resetPasswordNgForm: NgForm;\n\n    alert: { type: FuseAlertType; message: string } = {\n        type: 'success',\n        message: '',\n    };\n    resetPasswordForm: UntypedFormGroup;\n    showAlert: boolean = false;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _authService: AuthService,\n        private _formBuilder: UntypedFormBuilder\n    ) {}\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void {\n        // Create the form\n        this.resetPasswordForm = this._formBuilder.group(\n            {\n                password: ['', Validators.required],\n                passwordConfirm: ['', Validators.required],\n            },\n            {\n                validators: FuseValidators.mustMatch(\n                    'password',\n                    'passwordConfirm'\n                ),\n            }\n        );\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Reset password\n     */\n    resetPassword(): void {\n        // Return if the form is invalid\n        if (this.resetPasswordForm.invalid) {\n            return;\n        }\n\n        // Disable the form\n        this.resetPasswordForm.disable();\n\n        // Hide the alert\n        this.showAlert = false;\n\n        // Send the request to the server\n        this._authService\n            .resetPassword(this.resetPasswordForm.get('password').value)\n            .pipe(\n                finalize(() => {\n                    // Re-enable the form\n                    this.resetPasswordForm.enable();\n\n                    // Reset the form\n                    this.resetPasswordNgForm.resetForm();\n\n                    // Show the alert\n                    this.showAlert = true;\n                })\n            )\n            .subscribe(\n                (response) => {\n                    // Set the alert\n                    this.alert = {\n                        type: 'success',\n                        message: 'Your password has been reset.',\n                    };\n                },\n                (response) => {\n                    // Set the alert\n                    this.alert = {\n                        type: 'error',\n                        message: 'Something went wrong, please try again.',\n                    };\n                }\n            );\n    }\n}\n", "<div\n    class=\"flex min-w-0 flex-auto flex-col items-center sm:flex-row sm:justify-center md:items-start md:justify-start\"\n>\n    <div\n        class=\"w-full px-4 py-8 sm:bg-card sm:w-auto sm:rounded-2xl sm:p-12 sm:shadow md:flex md:h-full md:w-1/2 md:items-center md:justify-end md:rounded-none md:p-16 md:shadow-none\"\n    >\n        <div class=\"mx-auto w-full max-w-80 sm:mx-0 sm:w-80\">\n            <!-- Logo -->\n            <div class=\"w-12\">\n                <img src=\"images/logo/logo.svg\" />\n            </div>\n\n            <!-- Title -->\n            <div\n                class=\"mt-8 text-4xl font-extrabold leading-tight tracking-tight\"\n            >\n                Reset your password\n            </div>\n            <div class=\"mt-0.5 font-medium\">\n                Create a new password for your account\n            </div>\n\n            <!-- Alert -->\n            @if (showAlert) {\n                <fuse-alert\n                    class=\"mt-8\"\n                    [appearance]=\"'outline'\"\n                    [showIcon]=\"false\"\n                    [type]=\"alert.type\"\n                    [@shake]=\"alert.type === 'error'\"\n                >\n                    {{ alert.message }}\n                </fuse-alert>\n            }\n\n            <!-- Reset password form -->\n            <form\n                class=\"mt-8\"\n                [formGroup]=\"resetPasswordForm\"\n                #resetPasswordNgForm=\"ngForm\"\n            >\n                <!-- Password field -->\n                <mat-form-field class=\"w-full\">\n                    <mat-label>Password</mat-label>\n                    <input\n                        id=\"password\"\n                        matInput\n                        type=\"password\"\n                        [formControlName]=\"'password'\"\n                        #passwordField\n                    />\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"\n                            passwordField.type === 'password'\n                                ? (passwordField.type = 'text')\n                                : (passwordField.type = 'password')\n                        \"\n                        matSuffix\n                    >\n                        @if (passwordField.type === 'password') {\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:eye'\"\n                            ></mat-icon>\n                        }\n                        @if (passwordField.type === 'text') {\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:eye-slash'\"\n                            ></mat-icon>\n                        }\n                    </button>\n                    <mat-error> Password is required </mat-error>\n                </mat-form-field>\n\n                <!-- Password confirm field -->\n                <mat-form-field class=\"w-full\">\n                    <mat-label>Password (Confirm)</mat-label>\n                    <input\n                        id=\"password-confirm\"\n                        matInput\n                        type=\"password\"\n                        [formControlName]=\"'passwordConfirm'\"\n                        #passwordConfirmField\n                    />\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"\n                            passwordConfirmField.type === 'password'\n                                ? (passwordConfirmField.type = 'text')\n                                : (passwordConfirmField.type = 'password')\n                        \"\n                        matSuffix\n                    >\n                        @if (passwordConfirmField.type === 'password') {\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:eye'\"\n                            ></mat-icon>\n                        }\n                        @if (passwordConfirmField.type === 'text') {\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:eye-slash'\"\n                            ></mat-icon>\n                        }\n                    </button>\n                    @if (\n                        resetPasswordForm\n                            .get('passwordConfirm')\n                            .hasError('required')\n                    ) {\n                        <mat-error>\n                            Password confirmation is required\n                        </mat-error>\n                    }\n                    @if (\n                        resetPasswordForm\n                            .get('passwordConfirm')\n                            .hasError('mustMatch')\n                    ) {\n                        <mat-error> Passwords must match </mat-error>\n                    }\n                </mat-form-field>\n\n                <!-- Submit button -->\n                <button\n                    class=\"fuse-mat-button-large mt-3 w-full\"\n                    mat-flat-button\n                    [color]=\"'primary'\"\n                    [disabled]=\"resetPasswordForm.disabled\"\n                    (click)=\"resetPassword()\"\n                >\n                    @if (!resetPasswordForm.disabled) {\n                        <span> Reset your password </span>\n                    }\n                    @if (resetPasswordForm.disabled) {\n                        <mat-progress-spinner\n                            [diameter]=\"24\"\n                            [mode]=\"'indeterminate'\"\n                        ></mat-progress-spinner>\n                    }\n                </button>\n\n                <!-- Form footer -->\n                <div class=\"text-secondary mt-8 text-md font-medium\">\n                    <span>Return to</span>\n                    <a\n                        class=\"ml-1 text-primary-500 hover:underline\"\n                        [routerLink]=\"['/sign-in']\"\n                        >sign in\n                    </a>\n                </div>\n            </form>\n        </div>\n    </div>\n    <div\n        class=\"relative hidden h-full w-1/2 flex-auto items-center justify-center overflow-hidden bg-gray-800 p-16 dark:border-l md:flex lg:px-28\"\n    >\n        <!-- Background -->\n        <!-- Rings -->\n        <!-- prettier-ignore -->\n        <svg class=\"absolute inset-0 pointer-events-none\"\n             viewBox=\"0 0 960 540\" width=\"100%\" height=\"100%\" preserveAspectRatio=\"xMidYMax slice\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g class=\"text-gray-700 opacity-25\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"100\">\n                <circle r=\"234\" cx=\"196\" cy=\"23\"></circle>\n                <circle r=\"234\" cx=\"790\" cy=\"491\"></circle>\n            </g>\n        </svg>\n        <!-- Dots -->\n        <!-- prettier-ignore -->\n        <svg class=\"absolute -top-16 -right-16 text-gray-700\"\n             viewBox=\"0 0 220 192\" width=\"220\" height=\"192\" fill=\"none\">\n            <defs>\n                <pattern id=\"837c3e70-6c3a-44e6-8854-cc48c737b659\" x=\"0\" y=\"0\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n                    <rect x=\"0\" y=\"0\" width=\"4\" height=\"4\" fill=\"currentColor\"></rect>\n                </pattern>\n            </defs>\n            <rect width=\"220\" height=\"192\" fill=\"url(#837c3e70-6c3a-44e6-8854-cc48c737b659)\"></rect>\n        </svg>\n        <!-- Content -->\n        <div class=\"relative z-10 w-full max-w-2xl\">\n            <div class=\"text-7xl font-bold leading-none text-gray-100\">\n                <div>Welcome to</div>\n                <div>our community</div>\n            </div>\n            <div class=\"mt-6 text-lg leading-6 tracking-tight text-gray-400\">\n                Fuse helps developers to build organized and well coded\n                dashboards full of beautiful and rich modules. Join us and start\n                building your application today.\n            </div>\n            <div class=\"mt-8 flex items-center\">\n                <div class=\"flex flex-0 items-center -space-x-1.5\">\n                    <img\n                        class=\"h-10 w-10 flex-0 rounded-full object-cover ring-4 ring-gray-800 ring-offset-1 ring-offset-gray-800\"\n                        src=\"images/avatars/female-18.jpg\"\n                    />\n                    <img\n                        class=\"h-10 w-10 flex-0 rounded-full object-cover ring-4 ring-gray-800 ring-offset-1 ring-offset-gray-800\"\n                        src=\"images/avatars/female-11.jpg\"\n                    />\n                    <img\n                        class=\"h-10 w-10 flex-0 rounded-full object-cover ring-4 ring-gray-800 ring-offset-1 ring-offset-gray-800\"\n                        src=\"images/avatars/male-09.jpg\"\n                    />\n                    <img\n                        class=\"h-10 w-10 flex-0 rounded-full object-cover ring-4 ring-gray-800 ring-offset-1 ring-offset-gray-800\"\n                        src=\"images/avatars/male-16.jpg\"\n                    />\n                </div>\n                <div class=\"ml-4 font-medium tracking-tight text-gray-400\">\n                    More than 17k people joined us, it's your turn\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n", "import { Routes } from '@angular/router';\nimport { AuthResetPasswordComponent } from 'app/modules/auth/reset-password/reset-password.component';\n\nexport default [\n    {\n        path: '',\n        component: AuthResetPasswordComponent,\n    },\n] as Routes;\n"],
  "mappings": "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",
  "names": ["FuseValidators", "isEmptyInputValue", "value", "length", "mustMatch", "controlPath", "matchingControlPath", "formGroup", "control", "get", "matchingControl", "hasError", "errors", "updateValueAndValidity", "setErrors", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "ctx_r1", "alert", "type", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "message", "\u0275\u0275element", "AuthResetPasswordComponent", "constructor", "_authService", "_formBuilder", "showAlert", "ngOnInit", "resetPasswordForm", "group", "password", "Validators", "required", "passwordConfirm", "validators", "FuseValidators", "mustMatch", "resetPassword", "invalid", "disable", "get", "value", "pipe", "finalize", "enable", "resetPasswordNgForm", "resetForm", "subscribe", "response", "\u0275\u0275directiveInject", "AuthService", "UntypedFormBuilder", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275template", "AuthResetPasswordComponent_Conditional_9_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "passwordField_r3", "\u0275\u0275reference", "\u0275\u0275resetView", "AuthResetPasswordComponent_Conditional_18_Template", "AuthResetPasswordComponent_Conditional_19_Template", "passwordConfirmField_r4", "AuthResetPasswordComponent_Conditional_28_Template", "AuthResetPasswordComponent_Conditional_29_Template", "AuthResetPasswordComponent_Conditional_30_Template", "AuthResetPasswordComponent_Conditional_31_Template", "i0", "AuthResetPasswordComponent_Conditional_33_Template", "AuthResetPasswordComponent_Conditional_34_Template", "\u0275\u0275conditional", "hasError", "disabled", "\u0275\u0275pureFunction0", "_c1", "FuseAlertComponent", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "MatFormFieldModule", "MatFormField", "MatLabel", "MatError", "MatSuffix", "MatInputModule", "MatInput", "MatButtonModule", "MatButton", "MatIconButton", "MatIconModule", "MatIcon", "MatProgressSpinnerModule", "MatProgressSpinner", "RouterLink", "encapsulation", "data", "animation", "fuseAnimations", "reset_password_routes_default", "path", "component", "AuthResetPasswordComponent"]
}
