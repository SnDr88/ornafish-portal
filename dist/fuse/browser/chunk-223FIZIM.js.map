{
  "version": 3,
  "sources": ["src/app/pages/crm/customers/contacts.component.ts", "src/app/pages/crm/customers/contacts.component.html", "src/app/pages/crm/customers/contacts.service.ts", "src/app/pages/crm/customers/list/list.component.ts", "src/app/pages/crm/customers/list/list.component.html", "src/app/pages/crm/customers/users.service.ts", "src/app/pages/crm/customers/details/details.component.ts", "src/app/pages/crm/customers/details/details.component.html", "src/app/pages/crm/customers/contacts.routes.ts"],
  "sourcesContent": ["import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n} from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n    selector: 'contacts',\n    templateUrl: './contacts.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports: [RouterOutlet],\n})\nexport class ContactsComponent {\n    /**\n     * Constructor\n     */\n    constructor() {}\n}\n", "<router-outlet></router-outlet>\n", "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n    Contact,\n    Country,\n    Tag,\n} from 'app/pages/crm/customers/contacts.types';\nimport {\n    BehaviorSubject,\n    Observable,\n    filter,\n    map,\n    of,\n    switchMap,\n    take,\n    tap,\n    throwError,\n} from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class ContactsService {\n    // Private\n    private _contact: BehaviorSubject<Contact | null> = new BehaviorSubject(\n        null\n    );\n\n    private _agents: BehaviorSubject<Contact[] | null> = new BehaviorSubject(null);\n\n    private _contacts: BehaviorSubject<Contact[] | null> = new BehaviorSubject(\n        null\n    );\n    private _countries: BehaviorSubject<Country[] | null> = new BehaviorSubject(\n        null\n    );\n    private _tags: BehaviorSubject<Tag[] | null> = new BehaviorSubject(null);\n\n    /**\n     * Constructor\n     */\n    constructor(private _httpClient: HttpClient) {}\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for contact\n     */\n    get contact$(): Observable<Contact> {\n        return this._contact.asObservable();\n    }\n\n    /**\n     * Getter for contacts\n     */\n    get contacts$(): Observable<Contact[]> {\n        return this._contacts.asObservable();\n    }\n\n    /**\n     * Getter for countries\n     */\n    get countries$(): Observable<Country[]> {\n        return this._countries.asObservable();\n    }\n\n    /**\n     * Getter for tags\n     */\n    get tags$(): Observable<Tag[]> {\n        return this._tags.asObservable();\n    }\n\n    // Getter for agents\n    get agents$(): Observable<Contact[]> {\n        return this._agents.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get contacts\n     */\n    getContacts(): Observable<Contact[]> {\n        return this._httpClient.get<Contact[]>('/api/contacts').pipe(\n            tap((contacts) => {\n                this._contacts.next(contacts);\n            })\n        );\n    }\n\n    /**\n     * Search contacts with given query\n     *\n     * @param query\n     */\n    searchContacts(query: string): Observable<Contact[]> {\n        return this._httpClient\n            .get<Contact[]>('/api/contacts/search', {\n                params: { query },\n            })\n            .pipe(\n                tap((contacts) => {\n                    this._contacts.next(contacts);\n                })\n            );\n    }\n\n    setContact(contact: Contact): void {\n        this._contact.next(contact);\n    }\n\n    updateContactActive(id: string, active: boolean) {\n        return this._httpClient.put(`/api/contacts/${id}/active`, { active });\n      }\n\n\n    /**\n     * Get contact by id\n     */\n    getContactById(id: string): Observable<Contact> {\n        const isValidUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id);\n    \n        if (!isValidUUID) {\n            return throwError(() => new Error('Invalid contact ID format'));\n        }\n    \n        return this._httpClient.get<any>(`/api/contacts/${id}`).pipe(\n            map((apiResponse) => {\n                const mapped: Contact = {\n                    id: apiResponse.id,\n                    avatar: apiResponse.avatar || null,\n                    type: apiResponse.type || 'Dealer',\n                    emails: apiResponse.emails || [],\n                    phoneNumbers: apiResponse.phoneNumbers?.map((p) => ({\n                        country: p.country,\n                        phoneNumber: p.phone_number,\n                        label: p.label,\n                    })) || [],\n                    company: apiResponse.company || '',\n                    legal_representative: apiResponse.legal_representative || '',\n                    agentName: apiResponse.agentName || '',\n                    addresses: apiResponse.addresses || [],\n                    billingCountry: apiResponse.billingCountry || null,\n                    notes: apiResponse.notes || '',\n                    tags: apiResponse.tags || [],\n                    // Eventuele extra mapping (indien je interface uitbreidt):\n                    agentId: apiResponse.agent_id,\n                    businessRegNr: apiResponse.business_reg_nr,\n                    active: apiResponse.active,\n                    customerNr: apiResponse.customer_nr,\n                    website: apiResponse.website,\n                    currency: apiResponse.currency,\n                    defaultAirport: apiResponse.default_airport || null,\n                    discount: apiResponse.discount,\n                    commission: apiResponse.commission,\n                    defaultCommission: apiResponse.default_commission,\n                };\n    \n                this._contact.next(mapped);\n                return mapped;\n            })\n        );\n    }\n    \n\n    /**\n     * Create contact\n     */\n    createContact(): Observable<Contact> {\n        return this.contacts$.pipe(\n            take(1),\n            switchMap((contacts) =>\n                this._httpClient\n                    .post<Contact>('api/apps/contacts/contact', {})\n                    .pipe(\n                        map((newContact) => {\n                            // Update the contacts with the new contact\n                            this._contacts.next([newContact, ...contacts]);\n\n                            // Return the new contact\n                            return newContact;\n                        })\n                    )\n            )\n        );\n    }\n\n    setEmptyContactWithId(id: string): void {\n        const emptyContact: Contact = {\n            id,\n            company: '',\n            type: 'Dealer',\n            tags: [],\n            emails: [],\n            phoneNumbers: [],\n            addresses: [],\n        };\n    \n        this._contact.next(emptyContact);\n    }\n\n    /**\n     * Update contact\n     *\n     * @param id\n     * @param contact\n     */\n    updateContact(id: string, payload: Contact | FormData): Observable<Contact> {\n        return this.contacts$.pipe(\n            take(1),\n            switchMap((contacts) =>\n                this._httpClient\n                    .patch<Contact>(`/api/contacts/${id}`, payload, {\n                        headers:\n                            payload instanceof FormData\n                                ? undefined // <-- laat browser automatisch multipart-header kiezen\n                                : { 'Content-Type': 'application/json' },\n                    })\n                    .pipe(\n                        map((updatedContact) => {\n                            const index = contacts.findIndex((item) => item.id === id);\n                            if (index > -1) {\n                                contacts[index] = updatedContact;\n                            }\n                            this._contacts.next(contacts);\n                            return updatedContact;\n                        }),\n                        tap((updatedContact) => {\n                            this._contact.next(updatedContact);\n                        })\n                    )\n            )\n        );\n    }\n\n    /**\n     * Delete the contact\n     *\n     * @param id\n     */\n    deleteContact(id: string): Observable<boolean> {\n        return this._httpClient.delete<boolean>(`/api/contacts/${id}`).pipe(\n            tap(() => {\n                // Update de lokale BehaviorSubject na delete\n                const current = this._contacts.getValue();\n                const updated = current.filter(contact => contact.id !== id);\n                this._contacts.next(updated);\n            })\n        );\n    }\n\n    /**\n     * Get Agents\n     */\n    getAgents(): Observable<Contact[]> {\n        return this._httpClient.get<Contact[]>('/api/contacts/agents').pipe(\n            map((agents: any[]) =>\n                agents.map((agent) => ({\n                    ...agent,\n                    defaultCommission: agent.default_commission,\n                }))\n            ),\n            tap((agents) => {\n                this._agents.next(agents); // als je BehaviorSubject hebt\n            })\n        );\n    }\n\n    /**\n     * Get countries\n     */\n    getCountries(): Observable<Country[]> {\n        return this._httpClient\n            .get<Country[]>('api/apps/contacts/countries')\n            .pipe(\n                tap((countries) => {\n                    this._countries.next(countries);\n                })\n            );\n    }\n\n    /**\n     * Get tags\n     */\n    getTags(): Observable<Tag[]> {\n        return this._httpClient.get<Tag[]>('api/apps/contacts/tags').pipe(\n            tap((tags) => {\n                this._tags.next(tags);\n            })\n        );\n    }\n\n    /**\n     * Create tag\n     *\n     * @param tag\n     */\n    createTag(tag: Tag): Observable<Tag> {\n        return this.tags$.pipe(\n            take(1),\n            switchMap((tags) =>\n                this._httpClient\n                    .post<Tag>('api/apps/contacts/tag', { tag })\n                    .pipe(\n                        map((newTag) => {\n                            // Update the tags with the new tag\n                            this._tags.next([...tags, newTag]);\n\n                            // Return new tag from observable\n                            return newTag;\n                        })\n                    )\n            )\n        );\n    }\n\n    /**\n     * Update the tag\n     *\n     * @param id\n     * @param tag\n     */\n    updateTag(id: string, tag: Tag): Observable<Tag> {\n        return this.tags$.pipe(\n            take(1),\n            switchMap((tags) =>\n                this._httpClient\n                    .patch<Tag>('api/apps/contacts/tag', {\n                        id,\n                        tag,\n                    })\n                    .pipe(\n                        map((updatedTag) => {\n                            // Find the index of the updated tag\n                            const index = tags.findIndex(\n                                (item) => item.id === id\n                            );\n\n                            // Update the tag\n                            tags[index] = updatedTag;\n\n                            // Update the tags\n                            this._tags.next(tags);\n\n                            // Return the updated tag\n                            return updatedTag;\n                        })\n                    )\n            )\n        );\n    }\n\n    /**\n     * Delete the tag\n     *\n     * @param id\n     */\n    deleteTag(id: string): Observable<boolean> {\n        return this.tags$.pipe(\n            take(1),\n            switchMap((tags) =>\n                this._httpClient\n                    .delete('api/apps/contacts/tag', { params: { id } })\n                    .pipe(\n                        map((isDeleted: boolean) => {\n                            // Find the index of the deleted tag\n                            const index = tags.findIndex(\n                                (item) => item.id === id\n                            );\n\n                            // Delete the tag\n                            tags.splice(index, 1);\n\n                            // Update the tags\n                            this._tags.next(tags);\n\n                            // Return the deleted status\n                            return isDeleted;\n                        }),\n                        filter((isDeleted) => isDeleted),\n                        switchMap((isDeleted) =>\n                            this.contacts$.pipe(\n                                take(1),\n                                map((contacts) => {\n                                    // Iterate through the contacts\n                                    contacts.forEach((contact) => {\n                                        const tagIndex = contact.tags.findIndex(\n                                            (tag) => tag === id\n                                        );\n\n                                        // If the contact has the tag, remove it\n                                        if (tagIndex > -1) {\n                                            contact.tags.splice(tagIndex, 1);\n                                        }\n                                    });\n\n                                    // Return the deleted status\n                                    return isDeleted;\n                                })\n                            )\n                        )\n                    )\n            )\n        );\n    }\n\n    /**\n     * Update the avatar of the given contact\n     *\n     * @param id\n     * @param avatar\n     */\n    uploadAvatar(id: string, avatar: File): Observable<Contact> {\n        return this.contacts$.pipe(\n            take(1),\n            switchMap((contacts) =>\n                this._httpClient\n                    .post<Contact>(\n                        'api/apps/contacts/avatar',\n                        {\n                            id,\n                            avatar,\n                        },\n                        {\n                            headers: {\n                                // eslint-disable-next-line @typescript-eslint/naming-convention\n                                'Content-Type': avatar.type,\n                            },\n                        }\n                    )\n                    .pipe(\n                        map((updatedContact) => {\n                            // Find the index of the updated contact\n                            const index = contacts.findIndex(\n                                (item) => item.id === id\n                            );\n\n                            // Update the contact\n                            contacts[index] = updatedContact;\n\n                            // Update the contacts\n                            this._contacts.next(contacts);\n\n                            // Return the updated contact\n                            return updatedContact;\n                        }),\n                        switchMap((updatedContact) =>\n                            this.contact$.pipe(\n                                take(1),\n                                filter((item) => item && item.id === id),\n                                tap(() => {\n                                    // Update the contact if it's selected\n                                    this._contact.next(updatedContact);\n\n                                    // Return the updated contact\n                                    return updatedContact;\n                                })\n                            )\n                        )\n                    )\n            )\n        );\n    }\n}\n", "import { AsyncPipe, DOCUMENT, I18nPluralPipe, NgClass } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n    ViewEncapsulation,\n} from '@angular/core';\nimport {\n    FormsModule,\n    ReactiveFormsModule,\n    UntypedFormControl,\n} from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatDrawer, MatSidenavModule } from '@angular/material/sidenav';\nimport {\n    ActivatedRoute,\n    Router,\n    RouterLink,\n    RouterOutlet,\n} from '@angular/router';\nimport { FuseMediaWatcherService } from '@fuse/services/media-watcher';\nimport { ContactsService } from 'app/pages/crm/customers/contacts.service';\nimport {\n    Contact,\n    Country,\n} from 'app/pages/crm/customers/contacts.types';\nimport {\n    Observable,\n    Subject,\n    filter,\n    fromEvent,\n    switchMap,\n    takeUntil,\n    BehaviorSubject, \n    combineLatest,\n    map, \n    startWith\n} from 'rxjs';\n\n@Component({\n    selector: 'contacts-list',\n    templateUrl: './list.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports: [\n        MatSidenavModule,\n        RouterOutlet,\n        MatFormFieldModule,\n        MatIconModule,\n        MatInputModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        NgClass,\n        RouterLink,\n        AsyncPipe,\n        I18nPluralPipe,\n    ],\n})\nexport class ContactsListComponent implements OnInit, OnDestroy {\n    @ViewChild('matDrawer', { static: true }) matDrawer: MatDrawer;\n\n    get filter(): 'all' | 'Agent' | 'Dealer' {\n        return this._filter$.value;\n    }\n    \n    setFilter(type: 'all' | 'Agent' | 'Dealer'): void {\n        this._filter$.next(type);\n        this._changeDetectorRef.markForCheck();\n    }\n\n    \n\n    contacts$: Observable<Contact[]>;\n    \n    filteredContacts$: Observable<Contact[]>;\n    private _filter$: BehaviorSubject<'all' | 'Agent' | 'Dealer'> = new BehaviorSubject<'all' | 'Agent' | 'Dealer'>('all');\n    \n    contactsCount: number = 0;\n    contactsTableColumns: string[] = ['name', 'email', 'phoneNumber', 'job'];\n    countries: Country[];\n    drawerMode: 'side' | 'over';\n    searchInputControl: UntypedFormControl = new UntypedFormControl();\n    selectedContact: Contact;\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _contactsService: ContactsService,\n        @Inject(DOCUMENT) private _document: any,\n        private _router: Router,\n        private _fuseMediaWatcherService: FuseMediaWatcherService\n    ) {}\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    contact: any; // Zorg ervoor dat dit het juiste type is voor je contact object\n\n  \n    getUserNames(contact: Contact): string {\n        if (contact && contact.users && contact.users.length > 0) {\n            return contact.users.map(user => `${user.first_name} ${user.last_name}`).join(', ');\n        }\n        return ''; // Lege string als er geen gebruikers zijn\n    }\n    normalize(value: string = ''): string {\n        return value\n            .trim()\n            .toUpperCase()\n            .normalize('NFD')\n            .replace(/[\\u0300-\\u036f]/g, ''); // haalt accenten weg\n    }\n    \n    \n    /**\n     * On init\n     */\n    ngOnInit(): void {\n        \n        // Get the contacts\n        this.contacts$ = this._contactsService.contacts$;\n        this._contactsService.contacts$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((contacts: Contact[]) => {\n                // Update the counts\n                this.contactsCount = contacts.length;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Get the contact\n        this._contactsService.contact$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((contact: Contact) => {\n                // Update the selected contact\n                this.selectedContact = contact;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Get the countries\n        this._contactsService.countries$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((countries: Country[]) => {\n                // Update the countries\n                this.countries = countries;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Subscribe to search input field value changes\n        this.searchInputControl.valueChanges\n            .pipe(\n                takeUntil(this._unsubscribeAll),\n                switchMap((query) =>\n                    // Search\n                    this._contactsService.searchContacts(query)\n                )\n            )\n            .subscribe();\n\n        // Subscribe to MatDrawer opened change\n        this.matDrawer.openedChange.subscribe((opened) => {\n            if (!opened) {\n                // Remove the selected contact when drawer closed\n                this.selectedContact = null;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n\n        // Subscribe to media changes\n        this._fuseMediaWatcherService.onMediaChange$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(({ matchingAliases }) => {\n                // Set the drawerMode if the given breakpoint is active\n                if (matchingAliases.includes('lg')) {\n                    this.drawerMode = 'side';\n                } else {\n                    this.drawerMode = 'over';\n                }\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Listen for shortcuts\n        fromEvent(this._document, 'keydown')\n            .pipe(\n                takeUntil(this._unsubscribeAll),\n                filter<KeyboardEvent>(\n                    (event) =>\n                        (event.ctrlKey === true || event.metaKey) && // Ctrl or Cmd\n                        event.key === '/' // '/'\n                )\n            )\n            .subscribe(() => {\n                this.createContact();\n            });\n\n            this.filteredContacts$ = combineLatest([\n                this._contactsService.contacts$,\n                this.searchInputControl.valueChanges.pipe(startWith('')),\n                this._filter$\n            ]).pipe(\n                map(([contacts, search, filter]) => {\n                    return contacts\n                        .filter((contact) =>\n                            filter === 'all' ? true : contact.type === filter\n                        )\n                        .filter((contact) =>\n                            contact.company?.toLowerCase().includes(search.toLowerCase())\n                        )\n                        .sort((a, b) =>\n                            this.normalize(a.company).localeCompare(this.normalize(b.company))\n                        );\n                })\n            );\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next(null);\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On backdrop clicked\n     */\n    onBackdropClicked(): void {\n        // Go back to the list\n        this._router.navigate(['./'], { relativeTo: this._activatedRoute });\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Create contact\n     */\n    createContact(): void {\n        const newContact: Contact = {\n            company: 'New Company',\n            type: 'Dealer',\n            addresses: [{ label: 'Billing', address: '', zip: '', city: '', country: '', longitude: '', latitude: '' }],\n            phoneNumbers: [],\n            emails: [],\n            tags: []\n        };\n        // Create the contact\n        this._contactsService.createContact().subscribe((newContact) => {\n            // Go to the new contact\n            this._router.navigate(['./', newContact.id], {\n                relativeTo: this._activatedRoute,\n            });\n\n            // Mark for check\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    /**\n     * Track by function for ngFor loops\n     *\n     * @param index\n     * @param item\n     */\n    trackByFn(index: number, item: any): any {\n        return item.id || index;\n    }\n\n\n\n    getCountryByName(name: string): Country | undefined {\n        return this.countries.find(\n            (country) => country.name.toLowerCase() === name.toLowerCase()\n        );\n    }\n}\n", "<div class=\"absolute inset-0 flex min-w-0 flex-col overflow-hidden\">\n    <mat-drawer-container\n        class=\"bg-card h-full flex-auto dark:bg-transparent\"\n        (backdropClick)=\"onBackdropClicked()\"\n    >\n        <!-- Drawer -->\n        <mat-drawer\n            class=\"w-full dark:bg-gray-900 md:w-160\"\n            [mode]=\"drawerMode\"\n            [opened]=\"false\"\n            [position]=\"'end'\"\n            [disableClose]=\"true\"\n            #matDrawer\n        >\n            <router-outlet></router-outlet>\n        </mat-drawer>\n\n        <mat-drawer-content class=\"flex flex-col\">\n            <!-- Main -->\n            <div class=\"flex-auto\">\n                <!-- Header -->\n                <div\n                    class=\"flex flex-auto flex-col justify-between border-b px-6 py-8 sm:flex-row md:flex-col md:px-8\"\n                >\n                    <!-- Title -->\n                    <div>\n                        <div\n                            class=\"text-4xl font-extrabold leading-none tracking-tight\"\n                        >\n                            Customers\n                        </div>\n                        <div class=\"text-secondary ml-0.5 font-medium\">\n                            @if (contactsCount > 0) {\n                                {{ contactsCount }}\n                            }\n                            {{\n                                contactsCount\n                                    | i18nPlural\n                                        : {\n                                              '=0': 'No customers',\n                                              '=1': 'customer',\n                                              other: 'customers',\n                                          }\n                            }}\n                        </div>\n                    </div>\n                    \n                      <!-- Filter buttons -->\n                    <div class=\"mt-4 flex gap-2 md:mt-4 mb-2\">\n                        <button mat-button [color]=\"filter === 'all' ? 'primary bg-primary-50' : ''\" (click)=\"setFilter('all')\">\n                            All\n                        </button>\n                        <button mat-button [color]=\"filter === 'Agent' ? 'primary bg-primary-50' : ''\" (click)=\"setFilter('Agent')\">\n                            Agents\n                        </button>\n                        <button mat-button [color]=\"filter === 'Dealer' ? 'primary bg-primary-50' : ''\" (click)=\"setFilter('Dealer')\">\n                            Dealers\n                        </button>\n                    </div>\n                    <!-- Main actions -->\n                    <div class=\"flex items-center sm:mt-0\">\n                        <!-- Search -->\n                        <div class=\"flex-auto\">\n                            <mat-form-field\n                                class=\"fuse-mat-dense fuse-mat-rounded w-full min-w-50\"\n                                subscriptSizing=\"dynamic\"\n                            >\n                                <mat-icon\n                                    class=\"icon-size-5\"\n                                    matPrefix\n                                    [svgIcon]=\"\n                                        'heroicons_solid:magnifying-glass'\n                                    \"\n                                ></mat-icon>\n                                <input\n                                    matInput\n                                    [formControl]=\"searchInputControl\"\n                                    [autocomplete]=\"'off'\"\n                                    [placeholder]=\"'Search customers'\"\n                                />\n                            </mat-form-field>\n                        </div>\n                        <!-- Add contact button -->\n                        <button\n                            class=\"ml-4\"\n                            mat-flat-button\n                            [color]=\"'primary'\"\n                            (click)=\"createContact()\"\n                        >\n                            <mat-icon\n                                [svgIcon]=\"'heroicons_outline:plus'\"\n                            ></mat-icon>\n                            <span class=\"ml-2 mr-1\">Add</span>\n                        </button>\n                    </div>\n                </div>\n\n                <!-- Contacts list -->\n                <div class=\"relative\">\n                    @if (filteredContacts$ | async; as contacts) {\n                        @if (contacts.length) {\n                            @for (\n                                contact of contacts;\n                                track trackByFn(i, contact);\n                                let i = $index\n                            ) {\n                                <!-- Group -->\n                                @if (\n                                    i === 0 ||\n                                    normalize(contact.company).charAt(0) !== normalize(contacts[i - 1].company.charAt(0))\n                                ) {\n                                    <div\n                                        class=\"text-secondary sticky top-0 z-10 -mt-px border-b border-t bg-gray-50 px-6 py-1 font-medium uppercase dark:bg-gray-900 md:px-8\"\n                                    >\n                                    {{ normalize(contact.company).charAt(0) }}\n                                    </div>\n                                }\n                                <!-- Contact -->\n                                <a\n                                    class=\"z-20 flex cursor-pointer items-center border-b px-6 py-4 md:px-8\"\n                                    [ngClass]=\"{\n                                        'dark:hover:bg-hover hover:bg-gray-100':\n                                            !selectedContact ||\n                                            selectedContact.id !== contact.id,\n                                        'bg-primary-50 dark:bg-hover':\n                                            selectedContact &&\n                                            selectedContact.id === contact.id,\n                                    }\"\n                                    [routerLink]=\"['./', contact.id]\"\n                                >\n                                    <div\n                                        class=\"flex h-10 w-10 flex-0 items-center justify-center overflow-hidden rounded-full\"\n                                    >\n                                        @if (contact.avatar) {\n                                            <img\n                                                class=\"h-full w-full object-cover\"\n                                                [src]=\"contact.avatar\"\n                                                alt=\"Contact avatar\"\n                                            />\n                                        }\n                                        @if (!contact.avatar) {\n                                            <div\n                                                class=\"flex h-full w-full items-center justify-center rounded-full bg-gray-200 text-lg uppercase text-gray-600 dark:bg-gray-700 dark:text-gray-200\"\n                                            >\n                                             <!--   {{ contact.name.charAt(0) }} -->\n                                            </div>\n                                        }\n                                    </div>\n                                    <div class=\"ml-4 min-w-0\">\n                                        <div\n                                            class=\"truncate font-medium leading-5\"\n                                        >\n                                            {{ contact.company }}\n                                            \n                                           <!-- Toon de gebruikersnaam (voornaam + achternaam) -->\n                                            @if (contact.legal_representative) {\n                                                <span class=\"hidden sm:inline truncate leading-5 text-gray-400 font-normal text-sm italic\">\n                                                    - {{ contact.legal_representative }}\n                                                </span>\n                                            }\n                                        </div>\n                                        <div class=\"text-secondary flex items-center truncate leading-5 gap-2 mt-1\">\n                                            <span\n                                            class=\"inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-bold uppercase tracking-wide\"\n                                            [ngClass]=\"{\n                                                'bg-green-200 text-green-800 dark:bg-green-600 dark:text-green-50': contact.active === true,\n                                                'bg-red-200 text-red-800 dark:bg-red-600 dark:text-red-50': contact.active === false\n                                            }\"\n                                            >\n                                            <span class=\"whitespace-nowrap leading-relaxed\">\n                                                {{ contact.active ? 'Active' : 'Inactive' }}\n                                            </span>\n                                            </span>\n                                            <span\n                                              class=\"inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-bold uppercase tracking-wide\"\n                                              [ngClass]=\"{\n                                                'bg-yellow-200 text-yellow-800 dark:bg-red-600 dark:text-red-50': contact.type === 'Agent',\n                                                'bg-blue-200 text-blue-800 dark:bg-green-600 dark:text-green-50': contact.type === 'Dealer'\n                                              }\"\n                                            >\n                                              <span class=\"whitespace-nowrap leading-relaxed\">\n                                                {{ contact.type }}\n                                              </span>\n                                            </span>\n                                          \n                                            <!-- Vlaggetje -->\n                                            <span\n                                              class=\"inline-block h-4 w-6 overflow-hidden\"\n                                              [matTooltip]=\"getCountryByName(contact.billingCountry)?.name\"\n                                              [style.background]=\"'url(/images/apps/contacts/flags.png) no-repeat 0 0'\"\n                                              [style.backgroundSize]=\"'24px 3876px'\"\n                                              [style.backgroundPosition]=\"getCountryByName(contact.billingCountry)?.flagImagePos\"\n                                            ></span>\n                                          \n                                            <!-- Landnaam -->\n                                            <span class=\"text-xs font-medium\">\n                                              {{ contact.billingCountry }}\n                                            </span>\n\n\n                                            @if (contact.agentName) {\n                                                <span\n                                                class=\"hidden sm:inline truncate leading-5 text-gray-400 font-normal text-sm italic\"\n                                            >\n                                                 - <strong>Agent: </strong>{{ contact.agentName }}\n                                            </span>\n                                            }\n                                          </div>\n                                    </div>\n                                </a>\n                            }\n                        } @else {\n                            <div\n                                class=\"border-t p-8 text-center text-4xl font-semibold tracking-tight sm:p-16\"\n                            >\n                                There are no customers!\n                            </div>\n                        }\n                    }\n\n                    <!-- No contacts -->\n                </div>\n            </div>\n        </mat-drawer-content>\n    </mat-drawer-container>\n</div>\n", "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map } from 'rxjs';\nimport { User } from './users.types'; // jouw user interface\n\n@Injectable({ providedIn: 'root' })\nexport class UsersService {\n    constructor(private _httpClient: HttpClient) {}\n\n    getUsersByCompanyId(companyId: string): Observable<User[]> {\n        return this._httpClient.get<any[]>(`/api/users/company/${companyId}`).pipe(\n            map(users =>\n                users.map(user => ({\n                    id: user.id,\n                    email: user.email,\n                    phone: user.phone,\n                    roleId: user.role_id,\n                    companyId: user.company_id,\n                    firstName: user.first_name || '', // 👈 veilig mappen\n                    lastName: user.last_name || '',   // 👈 veilig mappen\n                }))\n            )\n        );\n    }\n\n    createUser(user: Partial<User>): Observable<any> {\n        return this._httpClient.post('/api/users', user);\n    }\n\n    updateUser(user: Partial<User>): Observable<any> {\n        return this._httpClient.put(`/api/users/${user.id}`, user); // PUT endpoint moet je nog maken\n    }\n\n    deleteUser(userId: string): Observable<any> {\n        return this._httpClient.delete(`/api/users/${userId}`);\n    }\n}", "import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport { DatePipe, NgClass, CommonModule } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    OnDestroy,\n    OnInit,\n    Renderer2,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation,\n} from '@angular/core';\nimport {\n    FormsModule,\n    ReactiveFormsModule,\n    UntypedFormArray,\n    UntypedFormBuilder,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatOptionModule, MatRippleModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDrawerToggleResult } from '@angular/material/sidenav';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { FuseFindByKeyPipe } from '@fuse/pipes/find-by-key/find-by-key.pipe';\nimport { FuseConfirmationService } from '@fuse/services/confirmation';\nimport { ContactsService } from 'app/pages/crm/customers/contacts.service';\nimport { UsersService } from 'app/pages/crm/customers/users.service';\nimport {\n    Contact,\n    Country,\n    Tag,\n} from 'app/pages/crm/customers/contacts.types';\nimport {\n    User\n} from 'app/pages/crm/customers/users.types';\nimport { ContactsListComponent } from 'app/pages/crm/customers/list/list.component';\nimport { Subject, debounceTime, takeUntil, forkJoin } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n    selector: 'contacts-details',\n    templateUrl: './details.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports: [\n        MatButtonModule,\n        MatTooltipModule,\n        MatIconModule,\n        FormsModule,\n        MatSlideToggleModule,\n        ReactiveFormsModule,\n        MatRippleModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatCheckboxModule,\n        NgClass,\n        MatSelectModule,\n        MatOptionModule,\n        MatDatepickerModule,\n        CommonModule,\n        TextFieldModule,\n        RouterLink,\n    ],\n})\nexport class ContactsDetailsComponent implements OnInit, OnDestroy {\n    @ViewChild('avatarFileInput') private _avatarFileInput: ElementRef;\n    @ViewChild('tagsPanel') private _tagsPanel: TemplateRef<any>;\n    @ViewChild('tagsPanelOrigin') private _tagsPanelOrigin: ElementRef;\n\n    editMode: boolean = false;\n    tags: Tag[];\n    tagsEditMode: boolean = false;\n    filteredTags: Tag[];\n    contact: Contact;\n    contactForm: UntypedFormGroup;\n    contacts: Contact[];\n    countries: Country[];\n    private _tagsPanelOverlayRef: OverlayRef;\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _contactsListComponent: ContactsListComponent,\n        private _contactsService: ContactsService,\n        private _usersService: UsersService,\n        private _formBuilder: UntypedFormBuilder,\n        private _fuseConfirmationService: FuseConfirmationService,\n        private _renderer2: Renderer2,\n        private _router: Router,\n        private _overlay: Overlay,\n        private _viewContainerRef: ViewContainerRef,\n        private _snackBar: MatSnackBar\n    ) {}\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n\n    generateRandomPassword(length: number = 10): string {\n        const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';\n        let password = '';\n        for (let i = 0; i < length; i++) {\n            password += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        return password;\n    }\n\n        users: User[] = [];\n        showUserForm: boolean = false;\n        selectedUser: User | null = null;\n        userForm: FormGroup;\n\n        /**\n         * Open het formulier om een nieuwe gebruiker toe te voegen\n         */\n        openAddUserPanel(): void {\n            this.showUserForm = true;\n            this.selectedUser = null;\n\n            this.userForm = this._formBuilder.group({\n                firstName: [''],\n                lastName: [''],\n                email: [''],\n                companyId: [this.contact.id],\n            });\n        }\n\n        /**\n         * Open het formulier om een bestaande gebruiker te bewerken\n         */\n        editUser(user: User): void {\n            this.showUserForm = true;\n            this.selectedUser = user;\n\n            this.userForm = this._formBuilder.group({\n                id: user.id,  // Zorg ervoor dat de id ook wordt gepatched\n                firstName: [user.firstName || ''],\n                lastName: [user.lastName || ''],\n                email: [user.email || ''],\n                companyId: [user.companyId],\n            });\n        }\n\n        /**\n         * Annuleer het toevoegen of bewerken van een gebruiker\n         */\n        cancelUser(): void {\n            this.showUserForm = false;\n            this.selectedUser = null;\n        }\n\n        /**\n         * Sla de gebruiker op (nieuw of update)\n         */\n        saveUser(): void {\n            let userData = this.userForm.getRawValue();\n\n            // Automatisch wachtwoord genereren als leeg\n            if (!userData.password || userData.password.trim() === '') {\n                userData.password = this.generateRandomPassword();\n            }\n\n            // 💥 Mapping voor Node.js backend: camelCase ➔ snake_case\n            const mappedUserData = {\n                id: userData.id,  // Voeg de id toe aan de data\n                email: userData.email,\n                password: userData.password,\n                first_name: userData.firstName,\n                last_name: userData.lastName,\n                phone: userData.phone,\n                role_id: userData.roleId,\n                company_id: userData.companyId,\n                breeder_id: null, // kun je optioneel meesturen als dat nodig is\n            };\n        \n            if (this.selectedUser) {\n                // Update bestaande user\n                this._usersService.updateUser(mappedUserData).subscribe({\n                    next: () => {\n                        this.showUserForm = false;\n                        this.loadUsersForCompany(); // Reload de users na update\n                    },\n                    error: (error) => {\n                        console.error('❌ Error updating user:', error);\n                    }\n                });\n            } else {\n                // Nieuwe user aanmaken\n                this._usersService.createUser(mappedUserData).subscribe({\n                    next: () => {\n                        this.showUserForm = false;\n                        this.loadUsersForCompany(); // Reload de users na create\n                    },\n                    error: (err) => {\n                        console.error('❌ Error creating user:', err);\n                        if (err.error.message === 'User already exists') {\n                            this._snackBar.open('This email is already in use', 'Close', {\n                                duration: 3000, // Snackbar blijft 3 seconden zichtbaar\n                                horizontalPosition: 'center',\n                                verticalPosition: 'top',\n                                panelClass: ['snackbar-error'] // Je kunt hier een CSS-class toevoegen voor stijl\n                            });\n                        } else {\n                            // Toon een andere foutmelding voor andere fouten\n                            this._snackBar.open('An error occurred. Please try again.', 'Close', {\n                                duration: 3000,\n                            });\n                        }\n                    }\n                });\n            }\n\n\n                // Herlaad de lijst\n                this._contactsService.getContacts().subscribe();\n        }\n\n        deleteUser(userId: string): void {\n            // Open de bevestigingsdialoog\n            const confirmation = this._fuseConfirmationService.open({\n                title: 'Delete user',\n                message: 'Are you sure you want to delete this user? This action cannot be undone!',\n                actions: {\n                    confirm: {\n                        label: 'Delete',\n                    },\n                    cancel: {\n                        label: 'Cancel',\n                    }\n                },\n            });\n        \n            // Nadat de gebruiker op bevestigen heeft geklikt, haal de userId op en voer de verwijdering uit\n            confirmation.afterClosed().subscribe((result) => {\n                if (result === 'confirmed') {\n                    // Voeg je logica toe om de gebruiker te verwijderen\n                    this._usersService.deleteUser(userId).subscribe({\n                        next: () => {\n                            console.log('User deleted successfully');\n                            // Eventueel de lijst van users opnieuw ophalen of bijwerken\n                            this.loadUsersForCompany(); // Verander naar je eigen methode\n                        },\n                        error: (err) => {\n                            console.error('❌ Error deleting user:', err);\n                        },\n                    });\n                } else {\n                    console.log('User deletion canceled');\n                }\n                \n                // Herlaad de lijst\n                this._contactsService.getContacts().subscribe();\n            });\n\n        }\n\n        loadUsersForCompany(): void {\n            if (!this.contact?.id) {\n                return;\n            }\n        \n            this._usersService.getUsersByCompanyId(this.contact.id).subscribe({\n                next: (users) => {\n                    this.users = users;\n                    this._changeDetectorRef.markForCheck(); // UI updaten\n                },\n                error: (error) => {\n                    console.error('❌ Error loading users for company:', error);\n                }\n            });\n        }\n\n        toggleContactActive(active: boolean): void {\n            if (!this.contact?.id) return;\n        \n            this._contactsService.updateContactActive(this.contact.id, active).subscribe({\n                next: () => {\n                    this.contact.active = active;\n                    this._snackBar.open(`Contact ${active ? 'activated' : 'deactivated'}`, 'Close', {\n                        duration: 3000,\n                    });\n                },\n                error: (err) => {\n                    console.error('Failed to update contact status', err);\n                    this._snackBar.open('Failed to update status', 'Close', {\n                        duration: 3000,\n                    });\n                },\n            });\n                // Herlaad de lijst\n                this._contactsService.getContacts().subscribe();\n        }\n\n        // overige code van de component\n    agents: Contact[] = [];\n    \n    airports = [\n        { code: 'NRT', name: 'Tokyo Narita' },\n        { code: 'KIX', name: 'Osaka Kansai' },\n        { code: 'AMS', name: 'Amsterdam Schiphol' },\n    ];\n    \n    currencies = ['EUR', 'USD', 'JPY', 'GBP'];\n\n    countrySearch: string = '';\n    filteredCountries: Country[] = [];\n\n    ngOnInit(): void {\n\n        \n       \n        // Zet de initiele landenlijst\n        this._contactsService.countries$\n        .pipe(takeUntil(this._unsubscribeAll))\n        .subscribe((codes: Country[]) => {\n            this.countries = codes;\n            this.filteredCountries = codes; // initieel gelijk\n            this._changeDetectorRef.markForCheck();\n        });\n\n        // Open the drawer\n        this._contactsListComponent.matDrawer.open();\n\n        // Create the contact form\n        this.contactForm = this._formBuilder.group({\n            id: [''],\n            avatar: [null],\n            company: [''],\n            legal_representative: [''],\n            type: ['Dealer'],\n            agentId: [null],\n            discount: [45],\n            commission: [null],\n            defaultCommission: [10],\n            businessRegNr: [''],\n            customerNr: [''],\n            website: [\n                '',\n                [\n                  Validators.pattern(\n                    /^www\\.[a-zA-Z0-9\\-]+\\.[a-z]{2,}(\\/[^\\s]*)?$/\n                  ),\n                ],\n              ],\n            defaultAirport: [''],\n            currency: [''],\n            emails: this._formBuilder.array([]),\n            phoneNumbers: this._formBuilder.array([]),\n            addresses: this._formBuilder.array([\n                this._formBuilder.group({\n                    label: [''],\n                    address: [''],\n                    zip: [''],\n                    city: [''],\n                    country: [''],\n                    longitude: [''],\n                    latitude: [''],\n                    show_on_locator_map: [false], \n                }),\n            ]),\n            notes: [null],\n        });\n\n        this.contactForm.get('agentId')?.valueChanges.subscribe((agentId) => {\n            const selectedAgent = this.agents.find(a => a.id === agentId);\n            if (selectedAgent) {\n                this.contactForm.get('commission')?.setValue(selectedAgent.defaultCommission);\n            }\n        });\n\n        this.contactForm.get('type')?.valueChanges.subscribe((typeValue) => {\n            const agentIdControl = this.contactForm.get('agentId');\n        \n            if (typeValue === 'Dealer') {\n                agentIdControl?.setValidators([Validators.required]);\n            } else {\n                agentIdControl?.clearValidators();\n                agentIdControl?.setValue(null); // eventueel resetten als niet Dealer\n            }\n        \n            agentIdControl?.updateValueAndValidity();\n        });\n        \n        this.contactForm.get('isAgent')?.valueChanges.subscribe((isAgent) => {\n            if (isAgent) {\n                this.contactForm.get('agentId')?.reset();\n            }\n        });\n\n        // Trigger ophalen agents uit DB\n        this._contactsService.getAgents().subscribe();\n\n        // Subscribe op agents$\n        this._contactsService.agents$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((agents) => {\n                this.agents = agents || [];\n                this._changeDetectorRef.markForCheck();\n            });\n\n\n        // Get the contacts\n        this._contactsService.contacts$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((contacts: Contact[]) => {\n                this.contacts = contacts;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Get the contact\n        this._contactsService.contact$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((contact: Contact) => {\n                if (!contact) {\n                    console.warn('❗ Geen contact ontvangen.');\n                    return;\n                }\n                // Open the drawer in case it is closed\n                this._contactsListComponent.matDrawer.open();\n\n                // Get the contact\n                this.contact = contact;\n\n                // ⬇️ Direct hierna users ophalen\n                this._usersService.getUsersByCompanyId(this.contact.id).subscribe((users) => {\n                    this.users = users;\n                    this._changeDetectorRef.markForCheck(); // even forceren als je OnPush gebruikt\n                });\n\n\n                // Clear the emails and phoneNumbers form arrays\n                (this.contactForm.get('emails') as UntypedFormArray).clear();\n                (\n                    this.contactForm.get('phoneNumbers') as UntypedFormArray\n                ).clear();\n\n                // Patch values to the form\n                this.contactForm.patchValue({\n                    ...contact,\n                    type: contact?.type || 'Dealer', // <-- fallback naar 'Dealer' als er geen type is\n                });\n\n                // Setup the emails form array\n                const emailFormGroups = [];\n\n                // Sorteer e-mails: 'Order' eerst\n                const sortedEmails = contact.emails?.sort((a, b) => {\n                    const order = ['Order', 'Invoicing'];\n                \n                    const aIndex = order.indexOf(a.label);\n                    const bIndex = order.indexOf(b.label);\n                \n                    if (aIndex === -1 && bIndex === -1) return 0;\n                    if (aIndex === -1) return 1;\n                    if (bIndex === -1) return -1;\n                    return aIndex - bIndex;\n                }) ?? [];\n\n                if (sortedEmails.length > 0) {\n                    sortedEmails.forEach((email, index) => {\n                        emailFormGroups.push(\n                            this._formBuilder.group({\n                                email: [email.email, [Validators.required, Validators.email]],\n                                label: [email.label ?? (index === 0 ? 'Order' : '')],\n                            })\n                        );\n                    });\n                } else {\n                    emailFormGroups.push(\n                        this._formBuilder.group({\n                            email: ['', [Validators.required, Validators.email]], // ✅ e-mailvalidatie\n                            label: ['Order'], // Eerste krijgt altijd 'Order'\n                        })\n                    );\n                }\n\n                // Add the email form groups to the emails form array\n                emailFormGroups.forEach((emailFormGroup) => {\n                    (this.contactForm.get('emails') as UntypedFormArray).push(\n                        emailFormGroup\n                    );\n                });\n\n                // Setup the phone numbers form array\n                const phoneNumbersFormGroups = [];\n\n                if (contact.phoneNumbers.length > 0) {\n                    // Iterate through them\n                    contact.phoneNumbers.forEach((phoneNumber) => {\n                        // Create an email form group\n                        phoneNumbersFormGroups.push(\n                            this._formBuilder.group({\n                                country: [phoneNumber.country],\n                                phoneNumber: [phoneNumber.phoneNumber],\n                                label: [phoneNumber.label],\n                            })\n                        );\n                    });\n                } else {\n                    // Create a phone number form group\n                    phoneNumbersFormGroups.push(\n                        this._formBuilder.group({\n                            country: ['us'],\n                            phoneNumber: [''],\n                            label: [''],\n                        })\n                    );\n                }\n\n                // Add the phone numbers form groups to the phone numbers form array\n                phoneNumbersFormGroups.forEach((phoneNumbersFormGroup) => {\n                    (\n                        this.contactForm.get('phoneNumbers') as UntypedFormArray\n                    ).push(phoneNumbersFormGroup);\n                });\n\n                // Clear existing addresses\n                (this.contactForm.get('addresses') as UntypedFormArray).clear();\n\n                // 1. Sorteer de adressen: Billing altijd eerst\n                const sortedAddresses = contact.addresses?.sort((a, b) => {\n                    if (a.label === 'Billing') return -1;\n                    if (b.label === 'Billing') return 1;\n                    return 0;\n                }) ?? [];\n\n                // Add address form groups\n                const addressFormGroups = sortedAddresses?.length\n                ? contact.addresses.map((addr, index) => {\n                    const group = this._formBuilder.group({\n                        label: [addr.label],\n                        address: [addr.address, addr.label === 'Billing' ? Validators.required : []],\n                        zip: [addr.zip],\n                        city: [addr.city],\n                        country: [addr.country],\n                        longitude: [addr.longitude],\n                        latitude: [addr.latitude],\n                        show_on_locator_map: [addr.show_on_locator_map ?? false],\n                    });\n\n                    console.log(`Adres ${index} - label:`, group.get('label')?.value);\n                    console.log(`Type:`, typeof group.get('label')?.value);\n\n                    return group;\n                })\n                : [\n                    this._formBuilder.group({\n                        label: ['Billing'],\n                        address: ['', Validators.required],\n                        zip: [''],\n                        city: [''],\n                        country: [''],\n                        longitude: [''],\n                        latitude: [''],\n                        show_on_locator_map: [false],\n                    }),\n                ];\n\n                    \n\n                addressFormGroups.forEach(addr =>\n                    (this.contactForm.get('addresses') as UntypedFormArray).push(addr)\n                );\n\n                // Toggle the edit mode off\n                this.toggleEditMode(false);\n\n                // 👇 Zet hier deze check na je formulier is opgebouwd\n                if (!contact.company) {\n                    this.toggleEditMode(true); // direct bewerkmodus aan\n                } else {\n                    this.toggleEditMode(false); // anders normale weergave\n                }\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Get the country telephone codes\n        this._contactsService.countries$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((codes: Country[]) => {\n                this.countries = codes;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n            \n\n        // Get the tags\n        this._contactsService.tags$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((tags: Tag[]) => {\n                this.tags = tags;\n                this.filteredTags = tags;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n    }\n\n    filterCountries(): void {\n        const query = this.countrySearch.toLowerCase();\n        this.filteredCountries = this.countries.filter((country) =>\n            country.name.toLowerCase().includes(query)\n        );\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next(null);\n        this._unsubscribeAll.complete();\n\n        // Dispose the overlays if they are still on the DOM\n        if (this._tagsPanelOverlayRef) {\n            this._tagsPanelOverlayRef.dispose();\n        }\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Close the drawer\n     */\n    async closeDrawer(): Promise<MatDrawerToggleResult> {\n        const result = await this._contactsListComponent.matDrawer.close();\n        await this._router.navigate(['../'], { relativeTo: this._activatedRoute });\n        return result;\n    }\n\n    /**\n     * Toggle edit mode\n     *\n     * @param editMode\n     */\n    toggleEditMode(editMode: boolean | null = null): void {\n        if (editMode === null) {\n            this.editMode = !this.editMode;\n        } else {\n            this.editMode = editMode;\n        }\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Update the contact\n     */\n\n    loadingContact = false;\n\n    updateContact(): void {\n        const contact = this.contactForm.getRawValue();\n    \n        // Filter lege velden\n        contact.emails = contact.emails.filter((email) => email.email);\n        contact.phoneNumbers = contact.phoneNumbers.filter((phone) => phone.phoneNumber);\n    \n        const formData = new FormData();\n    \n        // Voeg avatar toe als gekozen\n        if (this.selectedAvatarFile) {\n            formData.append('avatar', this.selectedAvatarFile);\n        }\n    \n        // Voeg de rest toe als JSON blob\n        formData.append('contact', JSON.stringify(contact)); // <-- geen Blob!\n    \n        this.loadingContact = true;\n    \n        this._contactsService.updateContact(contact.id, formData).subscribe({\n            next: () => {\n                this.toggleEditMode(false);\n                forkJoin({\n                    list: this._contactsService.getContacts(),\n                    detail: this._contactsService.getContactById(contact.id),\n                }).subscribe(({ detail }) => {\n                    this.contact = detail;\n                    this.loadingContact = false;\n                });\n            },\n            error: (err) => {\n                console.error('Update failed', err);\n                this.loadingContact = false;\n            },\n        });\n    }\n\n    /**\n     * Delete the contact\n     */\n    deleteContact(): void {\n        // Open the confirmation dialog\n        const confirmation = this._fuseConfirmationService.open({\n            title: 'Delete contact',\n            message:\n                'Are you sure you want to delete this customer? This action cannot be undone!',\n            actions: {\n                confirm: {\n                    label: 'Delete',\n                },\n            },\n        });\n\n        // Subscribe to the confirmation dialog closed action\n        confirmation.afterClosed().subscribe((result) => {\n            // If the confirm button pressed...\n            if (result === 'confirmed') {\n                // Get the current contact's id\n                const id = this.contact.id;\n\n                // Get the next/previous contact's id\n                const currentContactIndex = this.contacts.findIndex(\n                    (item) => item.id === id\n                );\n                const nextContactIndex =\n                    currentContactIndex +\n                    (currentContactIndex === this.contacts.length - 1 ? -1 : 1);\n                const nextContactId =\n                    this.contacts.length === 1 && this.contacts[0].id === id\n                        ? null\n                        : this.contacts[nextContactIndex].id;\n\n                // Delete the contact\n                this._contactsService\n                    .deleteContact(id)\n                    .subscribe((isDeleted) => {\n                        // Return if the contact wasn't deleted...\n                        if (!isDeleted) {\n                            return;\n                        }\n\n                        // Navigate to the next contact if available\n                        if (nextContactId) {\n                            this._router.navigate(['../', nextContactId], {\n                                relativeTo: this._activatedRoute,\n                            });\n                        }\n                        // Otherwise, navigate to the parent\n                        else {\n                            this._router.navigate(['../'], {\n                                relativeTo: this._activatedRoute,\n                            });\n                        }\n\n                        // Toggle the edit mode off\n                        this.toggleEditMode(false);\n                    });\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n\n    /**\n     * Upload avatar\n     *\n     * @param fileList\n     */\n    selectedAvatarFile: File | null = null;\n\nuploadAvatar(fileList: FileList): void {\n    if (!fileList.length) return;\n\n    const file = fileList[0];\n    const allowedTypes = ['image/jpeg', 'image/png'];\n    if (!allowedTypes.includes(file.type)) return;\n\n    this.selectedAvatarFile = file;\n\n    const reader = new FileReader();\n    reader.onload = () => {\n        this.contact.avatar = reader.result as string; // Preview in UI\n    };\n    reader.readAsDataURL(file);\n}\n\n    /**\n     * Remove the avatar\n     */\n    removeAvatar(): void {\n        // Get the form control for 'avatar'\n        const avatarFormControl = this.contactForm.get('avatar');\n\n        // Set the avatar as null\n        avatarFormControl.setValue(null);\n\n        // Set the file input value as null\n        this._avatarFileInput.nativeElement.value = null;\n\n        // Update the contact\n        this.contact.avatar = null;\n    }\n\n    /**\n     * Open tags panel\n     */\n    openTagsPanel(): void {\n        // Create the overlay\n        this._tagsPanelOverlayRef = this._overlay.create({\n            backdropClass: '',\n            hasBackdrop: true,\n            scrollStrategy: this._overlay.scrollStrategies.block(),\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._tagsPanelOrigin.nativeElement)\n                .withFlexibleDimensions(true)\n                .withViewportMargin(64)\n                .withLockedPosition(true)\n                .withPositions([\n                    {\n                        originX: 'start',\n                        originY: 'bottom',\n                        overlayX: 'start',\n                        overlayY: 'top',\n                    },\n                ]),\n        });\n\n        // Subscribe to the attachments observable\n        this._tagsPanelOverlayRef.attachments().subscribe(() => {\n            // Add a class to the origin\n            this._renderer2.addClass(\n                this._tagsPanelOrigin.nativeElement,\n                'panel-opened'\n            );\n\n            // Focus to the search input once the overlay has been attached\n            this._tagsPanelOverlayRef.overlayElement\n                .querySelector('input')\n                .focus();\n        });\n\n        // Create a portal from the template\n        const templatePortal = new TemplatePortal(\n            this._tagsPanel,\n            this._viewContainerRef\n        );\n\n        // Attach the portal to the overlay\n        this._tagsPanelOverlayRef.attach(templatePortal);\n\n        // Subscribe to the backdrop click\n        this._tagsPanelOverlayRef.backdropClick().subscribe(() => {\n            // Remove the class from the origin\n            this._renderer2.removeClass(\n                this._tagsPanelOrigin.nativeElement,\n                'panel-opened'\n            );\n\n            // If overlay exists and attached...\n            if (\n                this._tagsPanelOverlayRef &&\n                this._tagsPanelOverlayRef.hasAttached()\n            ) {\n                // Detach it\n                this._tagsPanelOverlayRef.detach();\n\n                // Reset the tag filter\n                this.filteredTags = this.tags;\n\n                // Toggle the edit mode off\n                this.tagsEditMode = false;\n            }\n\n            // If template portal exists and attached...\n            if (templatePortal && templatePortal.isAttached) {\n                // Detach it\n                templatePortal.detach();\n            }\n        });\n    }\n\n    /**\n     * Toggle the tags edit mode\n     */\n    toggleTagsEditMode(): void {\n        this.tagsEditMode = !this.tagsEditMode;\n    }\n\n    /**\n     * Filter tags\n     *\n     * @param event\n     */\n    filterTags(event): void {\n        // Get the value\n        const value = event.target.value.toLowerCase();\n\n        // Filter the tags\n        this.filteredTags = this.tags.filter((tag) =>\n            tag.title.toLowerCase().includes(value)\n        );\n    }\n\n    /**\n     * Filter tags input key down event\n     *\n     * @param event\n     */\n    filterTagsInputKeyDown(event): void {\n        // Return if the pressed key is not 'Enter'\n        if (event.key !== 'Enter') {\n            return;\n        }\n\n        // If there is no tag available...\n        if (this.filteredTags.length === 0) {\n            // Create the tag\n            this.createTag(event.target.value);\n\n            // Clear the input\n            event.target.value = '';\n\n            // Return\n            return;\n        }\n\n        // If there is a tag...\n        const tag = this.filteredTags[0];\n        const isTagApplied = this.contact.tags.find((id) => id === tag.id);\n\n        // If the found tag is already applied to the contact...\n        if (isTagApplied) {\n            // Remove the tag from the contact\n            this.removeTagFromContact(tag);\n        } else {\n            // Otherwise add the tag to the contact\n            this.addTagToContact(tag);\n        }\n    }\n\n    /**\n     * Create a new tag\n     *\n     * @param title\n     */\n    createTag(title: string): void {\n        const tag = {\n            title,\n        };\n\n        // Create tag on the server\n        this._contactsService.createTag(tag).subscribe((response) => {\n            // Add the tag to the contact\n            this.addTagToContact(response);\n        });\n    }\n\n    /**\n     * Update the tag title\n     *\n     * @param tag\n     * @param event\n     */\n    updateTagTitle(tag: Tag, event): void {\n        // Update the title on the tag\n        tag.title = event.target.value;\n\n        // Update the tag on the server\n        this._contactsService\n            .updateTag(tag.id, tag)\n            .pipe(debounceTime(300))\n            .subscribe();\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Delete the tag\n     *\n     * @param tag\n     */\n    deleteTag(tag: Tag): void {\n        // Delete the tag from the server\n        this._contactsService.deleteTag(tag.id).subscribe();\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Add tag to the contact\n     *\n     * @param tag\n     */\n    addTagToContact(tag: Tag): void {\n        // Add the tag\n        this.contact.tags.unshift(tag.id);\n\n        // Update the contact form\n        this.contactForm.get('tags').patchValue(this.contact.tags);\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Remove tag from the contact\n     *\n     * @param tag\n     */\n    removeTagFromContact(tag: Tag): void {\n        // Remove the tag\n        this.contact.tags.splice(\n            this.contact.tags.findIndex((item) => item === tag.id),\n            1\n        );\n\n        // Update the contact form\n        this.contactForm.get('tags').patchValue(this.contact.tags);\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Toggle contact tag\n     *\n     * @param tag\n     */\n    toggleContactTag(tag: Tag): void {\n        if (this.contact.tags.includes(tag.id)) {\n            this.removeTagFromContact(tag);\n        } else {\n            this.addTagToContact(tag);\n        }\n    }\n\n    /**\n     * Should the create tag button be visible\n     *\n     * @param inputValue\n     */\n    shouldShowCreateTagButton(inputValue: string): boolean {\n        return !!!(\n            inputValue === '' ||\n            this.tags.findIndex(\n                (tag) => tag.title.toLowerCase() === inputValue.toLowerCase()\n            ) > -1\n        );\n    }\n\n    /**\n     * Add the email field\n     */\n    addEmailField(): void {\n        // Create an empty email form group\n        const emailFormGroup = this._formBuilder.group({\n            email: ['', [Validators.required, Validators.email]], // ✅ correcte validatie\n            label: [''],\n        });\n\n        // Add the email form group to the emails form array\n        (this.contactForm.get('emails') as UntypedFormArray).push(\n            emailFormGroup\n        );\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Remove the email field\n     *\n     * @param index\n     */\n    removeEmailField(index: number): void {\n        // Get form array for emails\n        const emailsFormArray = this.contactForm.get(\n            'emails'\n        ) as UntypedFormArray;\n\n        // Remove the email field\n        emailsFormArray.removeAt(index);\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Add an empty phone number field\n     */\n    addPhoneNumberField(): void {\n        // Create an empty phone number form group\n        const phoneNumberFormGroup = this._formBuilder.group({\n            country: ['us'],\n            phoneNumber: [''],\n            label: [''],\n        });\n\n        // Add the phone number form group to the phoneNumbers form array\n        (this.contactForm.get('phoneNumbers') as UntypedFormArray).push(\n            phoneNumberFormGroup\n        );\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Remove the phone number field\n     *\n     * @param index\n     */\n    removePhoneNumberField(index: number): void {\n        // Get form array for phone numbers\n        const phoneNumbersFormArray = this.contactForm.get(\n            'phoneNumbers'\n        ) as UntypedFormArray;\n\n        // Remove the phone number field\n        phoneNumbersFormArray.removeAt(index);\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    addAddressField(): void {\n        const addressFormGroup = this._formBuilder.group({\n            label: ['Shop'],\n            address: [''],\n            zip: [''],\n            city: [''],\n            country: [''],\n            longitude: [''],\n            latitude: [''],\n        });\n    \n        (this.contactForm.get('addresses') as UntypedFormArray).push(addressFormGroup);\n        this._changeDetectorRef.markForCheck();\n    }\n\n    removeAddressField(index: number): void {\n        (this.contactForm.get('addresses') as UntypedFormArray).removeAt(index);\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Get country info by iso code\n     *\n     * @param iso\n     */\n    getCountryByIso(iso: string): Country {\n        return this.countries.find((country) => country.iso === iso);\n    }\n\n   \n\n    getCountryByName(name: string): Country | undefined {\n        return this.countries.find(\n            (country) => country.name.toLowerCase() === name.toLowerCase()\n        );\n    }\n\n    /**\n     * Track by function for ngFor loops\n     *\n     * @param index\n     * @param item\n     */\n    trackByFn(index: number, item: any): any {\n        return item.id || index;\n    }\n}\n", "<div class=\"flex w-full flex-col\">\n    <!-- View mode -->\n    @if (loadingContact) {\n        <div class=\"flex justify-center items-center p-12 text-gray-500 italic\">\n            Loading contact...\n        </div>\n    }\n    @if (!editMode && !loadingContact && contact) {\n        <!-- Header -->\n        <div\n            class=\"relative h-32 w-full bg-primary-800 px-8 sm:h-32 sm:px-12\"\n        >\n            <!-- Background -->\n            <!-- @if (contact.background) {\n                <img\n                    class=\"absolute inset-0 h-full w-full object-cover\"\n                    [src]=\"contact.background\"\n                />\n            } -->\n            <!-- Close button -->\n            <div\n                class=\"mx-auto flex w-full max-w-3xl items-center justify-end pt-6\"\n            >\n                <a\n                    mat-icon-button\n                    [matTooltip]=\"'Close'\"\n                    (click)=\"closeDrawer()\"\n                >\n                    <mat-icon\n                        class=\"text-white\"\n                        [svgIcon]=\"'heroicons_outline:x-mark'\"\n                    ></mat-icon>\n                </a>\n            </div>\n        </div>\n\n        <!-- Contact -->\n        <div\n            class=\"relative flex flex-auto flex-col items-center p-6 pt-0 sm:p-12 sm:pt-0\"\n        >\n            <div class=\"w-full max-w-3xl\">\n                <!-- Avatar and actions -->\n                <div class=\"-mt-16 flex flex-auto items-end\">\n                    <!-- Avatar -->\n                    <div\n                        class=\"ring-bg-card flex h-32 w-32 items-center justify-center overflow-hidden rounded-full ring-4\"\n                    >\n                        @if (contact.avatar) {\n                            <img\n                                class=\"h-full w-full object-cover\"\n                                [src]=\"contact.avatar\"\n                            />\n                        }\n                        @if (!contact.avatar) {\n                            <div\n                                class=\"flex h-full w-full items-center justify-center overflow-hidden rounded bg-gray-200 text-8xl font-bold uppercase leading-none text-gray-600 dark:bg-gray-700 dark:text-gray-200\"\n                            >\n                                {{ contact.company.charAt(0) }}\n                            </div>\n                        }\n                    </div>\n                    <!-- Actions -->\n                    <div class=\"mb-1 ml-auto flex items-center\">\n                        <button\n                            mat-stroked-button\n                            (click)=\"toggleEditMode(true)\"\n                        >\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:pencil-square'\"\n                            ></mat-icon>\n                            <span class=\"ml-2\">Edit</span>\n                        </button>\n                    </div>\n                </div>\n\n                <div class=\"mt-4 flex flex-row flex-wrap justify-center sm:justify-start space-x-4 border-t pt-6 items-center\">\n                    <button class=\"items-center rounded-none\" mat-button [color]=\"'primary bg-primary-50'\" (click)=\"createContact()\">\n                        <span class=\"ml-2 mr-1\">Sales</span>\n                    </button>\n                    <button class=\"items-center rounded-none\" mat-button [color]=\"'primary bg-primary-50'\" (click)=\"createContact()\">\n                        <span class=\"ml-2 mr-1\">History</span>\n                    </button>\n            </div>\n                <div class=\"mt-4 flex flex-col space-y-8 border-t pt-6\">\n                   <!-- Company -->\n                    @if (contact.company) {\n                        <div class=\"flex sm:items-center\">\n                            <mat-icon\n                                [svgIcon]=\"\n                                    'heroicons_outline:building-office-2'\n                                \"\n                            ></mat-icon>\n                            <div class=\"ml-6 leading-6\">\n                               <strong class=\"text-xl\"> {{ contact.company }} </strong>\n\n\n                    <div class=\"text-secondary flex items-center truncate leading-5 gap-2 mt-1\">\n                        <span\n                          class=\"inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-bold uppercase tracking-wide\"\n                          [ngClass]=\"{\n                            'bg-yellow-200 text-yellow-800 dark:bg-red-600 dark:text-red-50': contact.type === 'Agent',\n                            'bg-blue-200 text-blue-800 dark:bg-green-600 dark:text-green-50': contact.type === 'Dealer'\n                          }\"\n                        >\n                          <span class=\"whitespace-nowrap leading-relaxed\">\n                            {{ contact.type }}\n                          </span>\n                        </span>\n                        <!-- Vlaggetje -->\n                        <span\n                          class=\"inline-block h-4 w-6 overflow-hidden\"\n                          [matTooltip]=\"getCountryByName(contact.billingCountry)?.name\"\n                          [style.background]=\"'url(/images/apps/contacts/flags.png) no-repeat 0 0'\"\n                          [style.backgroundSize]=\"'24px 3876px'\"\n                          [style.backgroundPosition]=\"getCountryByName(contact.billingCountry)?.flagImagePos\"\n                        ></span>\n                      \n                        <!-- Landnaam -->\n                        <span class=\"text-xs font-medium\">\n                          {{ contact.billingCountry }}\n                        </span>\n                      </div>\n                            </div>\n                        </div>\n                    }\n\n\n                    @if (contact.legal_representative) {\n                        <div class=\"flex sm:items-center\">\n                            <mat-icon svgIcon=\"heroicons_outline:user-circle\"></mat-icon>\n                            <div class=\"ml-6 leading-6\">\n                                <strong>Legal Representative:</strong><br />{{ contact.legal_representative }}\n                            </div>\n                        </div>\n                      }\n\n\n                    <div class=\"flex items-center gap-2 mt-2\">\n                        <mat-slide-toggle\n                            [checked]=\"contact.active\"\n                            (change)=\"toggleContactActive($event.checked)\"\n                            color=\"success\"\n                        >\n                            <span class=\"ml-2\">Customer is active</span>\n                        </mat-slide-toggle>\n                    </div>\n\n                    <div class=\"flex sm:items-center\">\n                        <mat-icon svgIcon=\"heroicons_outline:globe-alt\"></mat-icon>\n                        <div class=\"ml-6 leading-6\">\n                            <a [href]=\"'https://' + contact.website\" target=\"_blank\" rel=\"noopener\">\n                                {{ contact.website }}  \n                            </a>\n                                            \n                        </div>\n                    </div>\n\n\n\n                    <!-- Emails -->\n                    @if (contact.emails.length) {\n                        <div class=\"flex\">\n                            <mat-icon\n                                [svgIcon]=\"'heroicons_outline:envelope'\"\n                            ></mat-icon>\n                            <div class=\"ml-6 min-w-0 space-y-1\">\n                                @for (\n                                    email of contact.emails;\n                                    track trackByFn($index, email)\n                                ) {\n                                    <div class=\"flex items-center leading-6\">\n                                        <a\n                                            class=\"text-primary-500 hover:underline\"\n                                            [href]=\"'mailto:' + email.email\"\n                                            target=\"_blank\"\n                                        >\n                                            {{ email.email }}\n                                        </a>\n                                        @if (email.label) {\n                                            <div\n                                                class=\"text-secondary truncate text-md\"\n                                            >\n                                                <span class=\"mx-2\">&bull;</span>\n                                                <span class=\"font-medium\">{{\n                                                    email.label\n                                                }}</span>\n                                            </div>\n                                        }\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                    }\n\n                    <!-- AGENT -->\n                    @if (contact.agentName) {\n                    <div class=\"flex sm:items-center\">\n                        <mat-icon\n                                    matPrefix\n                                    class=\"flex icon-size-5\"\n                                    [svgIcon]=\"'heroicons_solid:building-library'\"\n                                ></mat-icon>\n                        <div class=\"ml-6 leading-6\">\n                            <strong>Agent:</strong>\n                            <a [routerLink]=\"['/crm/customers/', contact.agentId]\" class=\"text-primary hover:underline\">\n                            {{ contact.agentName }}\n                            </a>                   \n                        </div>\n                    </div>\n                    <div class=\"flex sm:items-center\">\n                        <mat-icon svgIcon=\"heroicons_outline:receipt-percent\"></mat-icon>\n                        <div class=\"ml-5 leading-6\">\n                        <strong>Commission:</strong> {{ contact.commission }} %\n                        </div>\n                    </div>\n                    } @if (!contact.agentName) {\n                        <div class=\"flex sm:items-center\">\n                            <mat-icon svgIcon=\"heroicons_outline:receipt-percent\"></mat-icon>\n                            <div class=\"ml-6 leading-6\">\n                                <strong>Discount:</strong> {{ contact.discount }} % / <strong>Default commission:</strong> {{ contact.defaultCommission }} %\n                            </div>\n                        </div>\n                    }\n\n                    <div class=\"flex sm:items-center\">\n                        <i class=\"fa-thin fa-plane-arrival fa-lg\" aria-hidden=\"true\"></i>\n                        <div class=\"ml-6 leading-6\">\n                            @if (contact.defaultAirport) {\n                                <!-- Wat als er een airport is -->\n                                {{ contact.defaultAirport }}\n                            } @else {\n                                <!-- Wat als er GEEN airport is -->\n                                <em>No airport assigned</em>\n                            }                 \n                        </div>\n                    </div>\n                    <div class=\"flex sm:items-center\">\n                        <i class=\"fa-thin fa-coins fa-lg me-1\"></i>\n                        <div class=\"ml-6 leading-6\">\n                            {{ contact.currency }}                  \n                        </div>\n                    </div>\n                    \n\n                    <!-- Address -->\n                    @if (contact.addresses?.length > 0) {\n                        <div class=\"flex sm:items-start\">\n                            <mat-icon class=\"mt-1\" [svgIcon]=\"'heroicons_outline:map-pin'\"></mat-icon>\n                            <div class=\"ml-6 space-y-2 leading-6\">\n                                @for (address of contact.addresses; track trackByFn($index, address)) {\n                                    <div>\n                                        <div class=\"font-semibold text-secondary\">\n                                            {{ address.label || 'Address' }}\n                                        </div>\n                                        <div>\n                                            {{ address.address }}<br />\n                                            {{ address.zip }} {{ address.city }}<br />\n                                            {{ address.country }}\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                    }\n\n                    @if (contact.customerNr || contact.businessRegNr) {\n\n                        <div class=\"flex sm:items-center\">\n                            <mat-icon\n                                [svgIcon]=\"\n                                    'heroicons_outline:shield-check'\n                                \"\n                            ></mat-icon>\n                            <div class=\"ml-6 leading-6\">\n                        @if (contact.customerNr) {\n                                    <strong>Customer nr.</strong> {{ contact.customerNr }}\n                        } <br />\n                        @if (contact.customerNr) {\n                            <strong>Business nr.</strong> {{ contact.businessRegNr }}\n                        }\n                    </div>\n                </div>\n\n                    }\n\n                    <!-- Phone -->\n                    @if (contact.phoneNumbers?.length) {\n                        <div class=\"flex\">\n                            <mat-icon\n                                [svgIcon]=\"'heroicons_outline:phone'\"\n                            ></mat-icon>\n                            <div class=\"ml-6 min-w-0 space-y-1\">\n                                @for (\n                                    phoneNumber of contact.phoneNumbers;\n                                    track trackByFn($index, phoneNumber)\n                                ) {\n                                    <div class=\"flex items-center leading-6\">\n                                        <div\n                                            class=\"hidden h-4 w-6 overflow-hidden sm:flex\"\n                                            [matTooltip]=\"\n                                                getCountryByIso(\n                                                    phoneNumber.country\n                                                ).name\n                                            \"\n                                            [style.background]=\"\n                                                'url(\\'/images/apps/contacts/flags.png\\') no-repeat 0 0'\n                                            \"\n                                            [style.backgroundSize]=\"\n                                                '24px 3876px'\n                                            \"\n                                            [style.backgroundPosition]=\"\n                                                getCountryByIso(\n                                                    phoneNumber.country\n                                                ).flagImagePos\n                                            \"\n                                        ></div>\n                                        <div class=\"font-mono sm:ml-3\">\n                                            {{\n                                                getCountryByIso(\n                                                    phoneNumber.country\n                                                ).code\n                                            }}\n                                        </div>\n                                        <div class=\"ml-2.5 font-mono\">\n                                            {{ phoneNumber.phoneNumber }}\n                                        </div>\n                                        @if (phoneNumber.label) {\n                                            <div\n                                                class=\"text-secondary truncate text-md\"\n                                            >\n                                                <span class=\"mx-2\">&bull;</span>\n                                                <span class=\"font-medium\">{{\n                                                    phoneNumber.label\n                                                }}</span>\n                                            </div>\n                                        }\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                    }\n\n                    <!-- Notes -->\n                    @if (contact.notes) {\n                        <div class=\"flex\">\n                            <mat-icon\n                                [svgIcon]=\"\n                                    'heroicons_outline:bars-3-bottom-left'\n                                \"\n                            ></mat-icon>\n                            <div\n                                class=\"prose prose-sm ml-6 max-w-none\"\n                                [innerHTML]=\"contact.notes\"\n                            ></div>\n                        </div>\n                    }\n\n                    <!-- Bestaande bedrijf info bovenaan -->\n\n                    <h2 class=\"text-lg font-bold mt-6 mb-0\">Login credentials</h2>\n                    <hr style=\"margin-top: 10px !important;\"/>\n                    @if (users.length > 0) {\n                        <div class=\"divide-y mt-0\" style=\"margin-top: 0px !important;\">\n                            @for (user of users; track user.id) {\n                                <div class=\"flex justify-between items-center py-3\">\n                                    <div class=\"flex flex-col\">\n                                        @if (user.firstName || user.lastName) {\n                                            <div class=\"font-semibold\">\n                                                {{ user.firstName }} {{ user.lastName }}\n                                            </div>\n                                        }\n                                        @if (user.email) {\n                                            <div class=\"text-sm text-gray-500\">\n                                                {{ user.email }}\n                                            </div>\n                                        }\n                                    </div>\n                                    <div class=\"flex items-center gap-2\">\n                                        <button mat-icon-button color=\"primary\" (click)=\"editUser(user)\">\n                                            <mat-icon>edit</mat-icon>\n                                        </button>\n                                        <!-- Delete Button -->\n                                        <button\n                                        mat-button\n                                        [color]=\"'warn'\"\n                                        [matTooltip]=\"'Delete'\"\n                                        (click)=\"deleteUser(user.id)\"\n                                    >\n                                    <mat-icon>delete</mat-icon>\n                                    </button>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    } @else {\n                        <div class=\"text-gray-400 italic py-4\" style=\"margin-top: 0px !important;\">No Login yet</div>\n                    }\n\n                    <!-- Knop om nieuwe user toe te voegen -->\n                    <div class=\"mt-4\">\n                        <button mat-flat-button color=\"primary\" (click)=\"openAddUserPanel()\">\n                            Add Login\n                        </button>\n                    </div>\n\n                    <!-- User toevoegen/bewerken panel -->\n                    @if (showUserForm) {\n                        <div class=\"bg-gray-100 p-4 mt-4 rounded shadow\">\n                            <h3 class=\"font-semibold mb-2\">{{ selectedUser ? 'Edit Login' : 'Add Login' }}</h3>\n                            <form [formGroup]=\"userForm\" (ngSubmit)=\"saveUser()\">\n                                <div class=\"flex flex-col sm:flex-row gap-4\">\n                                <mat-form-field appearance=\"fill\" class=\"w-full sm:w-1/2\">\n                                    <mat-label>First Name</mat-label>\n                                    <input matInput formControlName=\"firstName\" />\n                                </mat-form-field>\n                            \n                                <mat-form-field appearance=\"fill\" class=\"w-full sm:w-1/2\">\n                                    <mat-label>Last Name</mat-label>\n                                    <input matInput formControlName=\"lastName\" />\n                                </mat-form-field>\n                            </div>\n                                \n                                <mat-form-field appearance=\"fill\" class=\"w-full mt-2\">\n                                    <mat-label>Email</mat-label>\n                                    <input matInput formControlName=\"email\" />\n                                </mat-form-field>\n                            \n                                <div class=\"flex justify-end gap-2 mt-4\">\n                                    <button mat-button type=\"button\" (click)=\"cancelUser()\">Cancel</button>\n                                    <button mat-flat-button color=\"primary\" type=\"submit\">\n                                        Save\n                                    </button>\n                                </div>\n                            </form>\n                        </div>\n                    }\n\n\n                </div>\n            </div>\n        </div>\n    }\n\n    <!-- Edit mode -->\n    @if (editMode) {\n        <!-- Header -->\n        <div\n            class=\"relative h-32 w-full bg-primary-800 px-8 dark:bg-accent-700 sm:h-32 sm:px-12\"\n        >\n            <!-- Background -->\n            <!--@if (contact.background) {\n                <img\n                    class=\"absolute inset-0 h-full w-full object-cover\"\n                    [src]=\"contact.background\"\n                />\n            } -->\n            <!-- Close button -->\n            <div\n                class=\"mx-auto flex w-full max-w-3xl items-center justify-end pt-6\"\n            >\n                <a\n                    mat-icon-button\n                    [matTooltip]=\"'Close'\"\n                    (click)=\"closeDrawer()\"\n                >\n                    <mat-icon\n                        class=\"text-white\"\n                        [svgIcon]=\"'heroicons_outline:x-mark'\"\n                    ></mat-icon>\n                </a>\n            </div>\n        </div>\n\n        <!-- Contact form -->\n        <div\n            class=\"relative flex flex-auto flex-col items-center px-6 sm:px-12\"\n        >\n            <div class=\"w-full max-w-3xl\">\n                <form [formGroup]=\"contactForm\">\n                    <!-- Avatar -->\n                    <div class=\"-mt-16 flex flex-auto items-end\">\n                        <div\n                            class=\"ring-bg-card relative flex h-32 w-32 items-center justify-center overflow-hidden rounded-full ring-4\"\n                        >\n                            <!-- Upload / Remove avatar -->\n                            <div\n                                class=\"absolute inset-0 z-10 bg-black bg-opacity-50\"\n                            ></div>\n                            <div\n                                class=\"absolute inset-0 z-20 flex items-center justify-center\"\n                            >\n                                <div>\n                                    <input\n                                        id=\"avatar-file-input\"\n                                        class=\"pointer-events-none invisible absolute h-0 w-0 opacity-0\"\n                                        type=\"file\"\n                                        [multiple]=\"false\"\n                                        [accept]=\"'image/jpeg, image/png'\"\n                                        (change)=\"\n                                            uploadAvatar(avatarFileInput.files)\n                                        \"\n                                        #avatarFileInput\n                                    />\n                                    <label\n                                        class=\"flex h-10 w-10 cursor-pointer items-center justify-center rounded-full hover:bg-hover\"\n                                        for=\"avatar-file-input\"\n                                        matRipple\n                                    >\n                                        <mat-icon\n                                            class=\"text-white\"\n                                            [svgIcon]=\"\n                                                'heroicons_outline:camera'\n                                            \"\n                                        ></mat-icon>\n                                    </label>\n                                </div>\n                                <div>\n                                    <button\n                                        mat-icon-button\n                                        (click)=\"removeAvatar()\"\n                                    >\n                                        <mat-icon\n                                            class=\"text-white\"\n                                            [svgIcon]=\"\n                                                'heroicons_outline:trash'\n                                            \"\n                                        ></mat-icon>\n                                    </button>\n                                </div>\n                            </div>\n                            <!-- Image/Letter -->\n                            @if (contact.avatar) {\n                                <img\n                                    class=\"h-full w-full object-cover\"\n                                    [src]=\"contact.avatar\"\n                                />\n                            }\n                            @if (!contact.avatar) {\n                                <div\n                                    class=\"flex h-full w-full items-center justify-center overflow-hidden rounded bg-gray-200 text-8xl font-bold uppercase leading-none text-gray-600 dark:bg-gray-700 dark:text-gray-200\"\n                                >\n                                    {{ contact.company.charAt(0) }}\n                                </div>\n                            }\n                        </div>\n                    </div>\n\n\n                    <!-- Responsive container voor Company en Type -->\n                    <div class=\"mt-8 flex flex-col sm:flex-row gap-4\">\n                        <!-- Company -->\n                        <mat-form-field class=\"w-full sm:w-2/3\" [subscriptSizing]=\"'dynamic'\">\n                            <mat-label>Company</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:building-office-2'\"\n                            ></mat-icon>\n                            <input\n                                matInput\n                                formControlName=\"company\"\n                                placeholder=\"Company\"\n                            />\n                        </mat-form-field>\n\n                        <mat-form-field class=\"w-full sm:w-1/3\" [subscriptSizing]=\"'dynamic'\">\n                            <mat-label>Type</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:identification'\"\n                            ></mat-icon>\n                            <mat-select formControlName=\"type\">\n                                <mat-option value=\"Dealer\">Dealer</mat-option>\n                                <mat-option value=\"Agent\">Agent</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        </div>\n\n                        <div class=\"mt-8 flex flex-col sm:flex-row gap-4\">\n                        <!-- Legal representative -->\n\n                        <mat-form-field class=\"w-full\" [subscriptSizing]=\"'dynamic'\">\n                            <mat-label>Legal Representative</mat-label>\n                            <input matInput [formControl]=\"contactForm.get('legal_representative')\" />\n                        </mat-form-field>\n\n                        </div>\n\n\n                    <div class=\"mt-8\" formArrayName=\"addresses\">\n                        <div class=\"space-y-4\">\n                            @for (\n                                addressGroup of contactForm.get('addresses')['controls'];\n                                let i = $index;\n                                let first = $first;\n                                let last = $last;\n                                track trackByFn(i, addressGroup)\n                            ) {\n                                <div [formGroupName]=\"i\" class=\"relative flex flex-col sm:flex-row gap-4\">\n                                    <mat-form-field class=\"w-full sm:w-1/4\" [subscriptSizing]=\"'dynamic'\">\n                                        @if (first) {\n                                          <mat-label>Label</mat-label>\n                                        }\n                                      \n                                        @if (i === 0) {\n                                            <mat-select [formControl]=\"addressGroup.get('label')\" disabled>\n                                              <mat-option value=\"Billing\">Billing</mat-option>\n                                            </mat-select>\n                                          } @else {\n                                            <mat-select [formControl]=\"addressGroup.get('label')\" (selectionChange)=\"onLabelChange($event, i)\">\n                                              <mat-option value=\"Billing\">Billing</mat-option>\n                                              <mat-option value=\"Shop\">Shop</mat-option>\n                                              <mat-option value=\"Shipping\">Shipping</mat-option>\n                                              <mat-option value=\"Other\">Other</mat-option>\n                                            </mat-select>\n                                          }\n                                      </mat-form-field>\n                                   \n                    \n                                    <!-- Address -->\n                                    <mat-form-field class=\"w-full sm:w-2/4\" [subscriptSizing]=\"'dynamic'\">\n                                        @if (first) {\n                                            <mat-label>Street + No.</mat-label>\n                                        }\n                                        <mat-icon\n                                            matPrefix\n                                            class=\"hidden icon-size-5 sm:flex\"\n                                            [svgIcon]=\"'heroicons_solid:map'\"\n                                        ></mat-icon>\n                                        <input\n                                            matInput\n                                            [formControl]=\"addressGroup.get('address')\"\n                                            [placeholder]=\"'Street + No.'\"\n                                        />\n                                    </mat-form-field>\n                    \n                                    <!-- ZIP -->\n                                    <mat-form-field class=\"w-full sm:w-1/4\" [subscriptSizing]=\"'dynamic'\">\n                                        @if (first) {\n                                            <mat-label>ZIP</mat-label>\n                                        }\n                                        <input\n                                            matInput\n                                            [formControl]=\"addressGroup.get('zip')\"\n                                            [placeholder]=\"'ZIP'\"\n                                        />\n                                    </mat-form-field>\n                                </div>\n                                \n\n                                <div class=\"flex flex-col sm:flex-row gap-4 mt-4\">\n                                    <!-- City -->\n                                    <mat-form-field class=\"w-full sm:w-1/2\" [subscriptSizing]=\"'dynamic'\">\n                                        @if (first) {\n                                            <mat-label>City</mat-label>\n                                        }\n                                        <input\n                                            matInput\n                                            [formControl]=\"addressGroup.get('city')\"\n                                            [placeholder]=\"'City'\"\n                                        />\n                                    </mat-form-field>\n                    \n                                    <!-- Country -->\n                                    <mat-form-field class=\"w-full sm:w-1/2\" [subscriptSizing]=\"'dynamic'\">\n                                        @if (first) {\n                                            <mat-label>Country</mat-label>\n                                        }\n                                        <mat-select [formControl]=\"addressGroup.get('country')\">\n                                            @for (country of countries; track trackByFn($index, country)) {\n                                                <mat-option [value]=\"country.name\">\n                                                    {{ country.name }}\n                                                </mat-option>\n                                            }\n                                        </mat-select>\n                                    </mat-form-field>\n\n                                </div>\n\n                                <div class=\"flex flex-col sm:flex-row gap-4 mt-4\">\n                                    <!-- latitude -->\n                                    <mat-form-field class=\"w-full sm:w-1/2\" [subscriptSizing]=\"'dynamic'\">\n                                        @if (first) {\n                                            <mat-label>Latitude</mat-label>\n                                        }\n                                        <input\n                                            matInput\n                                            [formControl]=\"addressGroup.get('latitude')\"\n                                            [placeholder]=\"'Latitude'\"\n                                        />\n                                    </mat-form-field>\n\n                                    <!-- longitude -->\n                                    <mat-form-field class=\"w-full sm:w-1/2\" [subscriptSizing]=\"'dynamic'\">\n                                        @if (first) {\n                                            <mat-label>Longitude</mat-label>\n                                        }\n                                        <input\n                                            matInput\n                                            [formControl]=\"addressGroup.get('longitude')\"\n                                            [placeholder]=\"'Longitude'\"\n                                        />\n                                    </mat-form-field> \n                                    <!-- Remove button -->\n                                    @if (i !== 0) {\n                                        <div class=\"flex w-10 items-center pl-2\" [ngClass]=\"{ 'mt-6': first }\">\n                                            <button\n                                                class=\"h-8 min-h-8 w-8\"\n                                                mat-icon-button\n                                                (click)=\"removeAddressField(i)\"\n                                                matTooltip=\"Remove address\"\n                                            >\n                                                <mat-icon\n                                                    class=\"icon-size-5\"\n                                                    [svgIcon]=\"'heroicons_solid:trash'\"\n                                                ></mat-icon>\n                                            </button>\n                                        </div>\n                                    }\n                                </div>\n                                <!-- Show on Locator Map Checkbox -->\n                                \n                                <!-- Show on Locator Map Checkbox (only for 'Shop') -->\n                                \n                                    <mat-checkbox [formControl]=\"addressGroup.get('show_on_locator_map')\">\n                                      Show on locator map\n                                    </mat-checkbox>\n                                \n                                <hr />\n                            }\n                        </div>\n                    \n                        <!-- Add new address -->\n                        <div\n                            class=\"group -ml-4 mt-2 inline-flex cursor-pointer items-center rounded px-4 py-2\"\n                            (click)=\"addAddressField()\"\n                        >\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:plus-circle'\"\n                            ></mat-icon>\n                            <span\n                                class=\"text-secondary ml-2 font-medium group-hover:underline\"\n                                >Add address</span\n                            >\n                        </div>\n                    </div>\n\n\n                    <!-- Business registration number -->\n                    <div class=\"mt-8 flex flex-col sm:flex-row gap-4\">\n                        <mat-form-field class=\"w-full\" [subscriptSizing]=\"'dynamic'\">\n                            <mat-label>Customer number in Omnivers</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:shield-check'\"\n                            ></mat-icon>\n                            <input matInput [formControlName]=\"'customerNr'\" />\n                        </mat-form-field>\n                    <!-- Business registration number -->\n                        <mat-form-field class=\"w-full\" [subscriptSizing]=\"'dynamic'\">\n                            <mat-label>Business registration number</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:shield-check'\"\n                            ></mat-icon>\n                            <input matInput [formControlName]=\"'businessRegNr'\" />\n                        </mat-form-field>\n                    </div>\n\n                    <hr />\n                    <!-- Alleen tonen als type === 'Dealer' -->\n                    @if (contactForm?.get('type')?.value === 'Dealer') {\n                        <div class=\"mt-8\">\n                            <mat-form-field class=\"w-full\" appearance=\"fill\">\n                                <mat-label>Agent</mat-label>\n                                <mat-icon\n                                    matPrefix\n                                    class=\"hidden icon-size-5 sm:flex\"\n                                    [svgIcon]=\"'heroicons_solid:building-library'\"\n                                ></mat-icon>\n                                <mat-select formControlName=\"agentId\">\n                                    @for (agent of agents; track agent) {\n                                        <mat-option [value]=\"agent.id\">\n                                          {{ agent.company }}\n                                        </mat-option>\n                                      }\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div>\n                            <mat-form-field class=\"w-full\" appearance=\"fill\">\n                                <mat-label>Commission</mat-label>\n                                <input matInput type=\"number\" formControlName=\"commission\" />\n                            </mat-form-field>\n                        </div>\n                    }\n\n                    @if (contactForm?.get('type')?.value === 'Agent') {\n                    <!-- Discount -->\n                    <div class=\"mt-8\">\n                        <mat-form-field class=\"w-full\" [subscriptSizing]=\"'dynamic'\">\n                            <mat-label>Discount (%)</mat-label>\n                            <input matInput type=\"number\" [formControlName]=\"'discount'\" />\n                        </mat-form-field>\n                    </div>\n                    <!-- Default commission for dealer -->\n                    <div class=\"mt-8\">\n                        <mat-form-field class=\"w-full\" [subscriptSizing]=\"'dynamic'\">\n                            <mat-label>Default commission for Dealer (%)</mat-label>\n                            <input matInput type=\"number\" [formControlName]=\"'defaultCommission'\" />\n                            <mat-hint class=\"text-start\">\n                                Commission set for Agent in % - Default 10 %\n                            </mat-hint>\n                        </mat-form-field>\n                    </div>\n                }\n\n                    \n                    <!-- Default airport -->\n                    <div class=\"flex flex-col sm:flex-row gap-4 mt-4\">\n                        <mat-form-field class=\"w-full sm:w-1/2\" [subscriptSizing]=\"'dynamic'\">\n                            <mat-label>Default airport</mat-label>\n                            <mat-select formControlName=\"defaultAirport\">\n                                <mat-option [value]=\"null\">- Select an airport -</mat-option>\n                                @for (airport of airports; track airport.code) {\n                                    <mat-option [value]=\"airport.code\">\n                                      {{ airport.name }}\n                                    </mat-option>\n                                  }\n                            </mat-select>\n                        </mat-form-field>\n                    \n                        <!-- Currency -->\n                        <mat-form-field class=\"w-full sm:w-1/2\" [subscriptSizing]=\"'dynamic'\">\n                            <mat-label>Currency</mat-label>\n                            <mat-select formControlName=\"currency\">\n                                @for (currency of currencies; track currency) {\n                                    <mat-option [value]=\"currency\">\n                                      {{ currency }}\n                                    </mat-option>\n                                  }\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    \n                    <hr />\n\n                    <!-- Emails -->\n                    <div class=\"mt-8\">\n                        <div class=\"space-y-4\">\n                            @for (\n                                email of contactForm.get('emails')['controls'];\n                                track trackByFn(i, email);\n                                let i = $index;\n                                let first = $first;\n                                let last = $last\n                            ) {\n                                <div class=\"flex\">\n                                    <mat-form-field\n                                        class=\"flex-auto\"\n                                        [subscriptSizing]=\"'dynamic'\"\n                                    >\n                                        @if (first) {\n                                            <mat-label>Email</mat-label>\n                                        }\n                                        <mat-icon\n                                            matPrefix\n                                            class=\"hidden icon-size-5 sm:flex\"\n                                            [svgIcon]=\"\n                                                'heroicons_solid:envelope'\n                                            \"\n                                        ></mat-icon>\n                                        <input\n                                            matInput\n                                            [formControl]=\"email.get('email')\"\n                                            [placeholder]=\"'Email address'\"\n                                            [spellcheck]=\"false\"\n                                            type=\"email\"\n                                        />\n                                        <mat-error *ngIf=\"email.get('email')?.invalid && (email.get('email')?.touched || email.get('email')?.dirty)\">\n                                            Please enter a valid email address.\n                                        </mat-error>\n                                    </mat-form-field>\n                                    <mat-form-field\n                                        class=\"ml-2 w-full max-w-24 flex-auto sm:ml-4 sm:max-w-40\"\n                                        [subscriptSizing]=\"'dynamic'\"\n                                    >\n                                        @if (first) {\n                                            <mat-label>Label</mat-label>\n                                        }\n\n                                        <mat-icon\n                                            matPrefix\n                                            class=\"hidden icon-size-5 sm:flex\"\n                                            [svgIcon]=\"'heroicons_solid:tag'\"\n                                        ></mat-icon>\n\n                                        @if (i === 0) {\n                                            <!-- Eerste e-mail: vast label -->\n                                            <mat-select [formControl]=\"email.get('label')\" disabled>\n                                                <mat-option value=\"Order\">Order</mat-option>\n                                            </mat-select>\n                                        } @else {\n                                            <!-- Andere e-mails: keuzemenu -->\n                                            <mat-select [formControl]=\"email.get('label')\">\n                                                <mat-option value=\"Order\">Order</mat-option>\n                                                <mat-option value=\"Invoicing\">Invoicing</mat-option>\n                                                <mat-option value=\"Newsletter\">Newsletter</mat-option>\n                                                <mat-option value=\"Other\">Other</mat-option>\n                                            </mat-select>\n                                        }\n                                    </mat-form-field>\n                                    <!-- Remove email -->\n                                    @if (i > 0) {\n                                        <div\n                                            class=\"flex w-10 items-center pl-2\"\n                                            [ngClass]=\"{ 'mt-6': first }\"\n                                        >\n                                            <button\n                                                class=\"h-8 min-h-8 w-8\"\n                                                mat-icon-button\n                                                (click)=\"removeEmailField(i)\"\n                                                matTooltip=\"Remove\"\n                                            >\n                                                <mat-icon\n                                                    class=\"icon-size-5\"\n                                                    [svgIcon]=\"'heroicons_solid:trash'\"\n                                                ></mat-icon>\n                                            </button>\n                                        </div>\n                                    }\n                                </div>\n                            }\n                        </div>\n                        <div\n                            class=\"group -ml-4 mt-2 inline-flex cursor-pointer items-center rounded px-4 py-2\"\n                            (click)=\"addEmailField()\"\n                        >\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:plus-circle'\"\n                            ></mat-icon>\n                            <span\n                                class=\"text-secondary ml-2 font-medium group-hover:underline\"\n                                >Add an email address</span\n                            >\n                        </div>\n                    </div>\n\n\n                    <!-- Phone numbers -->\n                    <div class=\"mt-8\">\n                        <div class=\"space-y-4\">\n                            @for (\n                                phoneNumber of contactForm.get('phoneNumbers')[\n                                    'controls'\n                                ];\n                                track trackByFn(i, phoneNumber);\n                                let i = $index;\n                                let first = $first;\n                                let last = $last\n                            ) {\n                                <div class=\"relative flex\">\n                                    <mat-form-field\n                                        class=\"flex-auto\"\n                                        [subscriptSizing]=\"'dynamic'\"\n                                    >\n                                        @if (first) {\n                                            <mat-label>Phone</mat-label>\n                                        }\n                                        <input\n                                            matInput\n                                            [formControl]=\"\n                                                phoneNumber.get('phoneNumber')\n                                            \"\n                                            [placeholder]=\"'Phone'\"\n                                        />\n                                        <mat-select\n                                            class=\"mr-1.5\"\n                                            [formControl]=\"\n                                                phoneNumber.get('country')\n                                            \"\n                                            matPrefix\n                                        >\n                                            <mat-select-trigger>\n                                                <span class=\"flex items-center\">\n                                                    <span\n                                                        class=\"mr-1 hidden h-4 w-6 overflow-hidden sm:flex\"\n                                                        [style.background]=\"\n                                                            'url(\\'/images/apps/contacts/flags.png\\') no-repeat 0 0'\n                                                        \"\n                                                        [style.backgroundSize]=\"\n                                                            '24px 3876px'\n                                                        \"\n                                                        [style.backgroundPosition]=\"\n                                                            getCountryByIso(\n                                                                phoneNumber.get(\n                                                                    'country'\n                                                                ).value\n                                                            ).flagImagePos\n                                                        \"\n                                                    ></span>\n                                                    <span\n                                                        class=\"text-default font-medium sm:mx-0.5\"\n                                                        >{{\n                                                            getCountryByIso(\n                                                                phoneNumber.get(\n                                                                    'country'\n                                                                ).value\n                                                            ).code\n                                                        }}</span\n                                                    >\n                                                </span>\n                                            </mat-select-trigger>\n                                            @for (\n                                                country of countries;\n                                                track trackByFn($index, country)\n                                            ) {\n                                                <mat-option\n                                                    [value]=\"country.iso\"\n                                                >\n                                                    <span\n                                                        class=\"flex items-center\"\n                                                    >\n                                                        <span\n                                                            class=\"h-4 w-6 overflow-hidden\"\n                                                            [style.background]=\"\n                                                                'url(\\'/images/apps/contacts/flags.png\\') no-repeat 0 0'\n                                                            \"\n                                                            [style.backgroundSize]=\"\n                                                                '24px 3876px'\n                                                            \"\n                                                            [style.backgroundPosition]=\"\n                                                                country.flagImagePos\n                                                            \"\n                                                        ></span>\n                                                        <span class=\"ml-2\">{{\n                                                            country.name\n                                                        }}</span>\n                                                        <span\n                                                            class=\"ml-2 font-medium\"\n                                                            >{{\n                                                                country.code\n                                                            }}</span\n                                                        >\n                                                    </span>\n                                                </mat-option>\n                                            }\n                                        </mat-select>\n                                    </mat-form-field>\n                                    <mat-form-field\n                                    class=\"ml-2 w-full max-w-36 flex-auto sm:ml-4 sm:max-w-64\"\n                                    [subscriptSizing]=\"'dynamic'\"\n                                >\n                                    @if (first) {\n                                        <mat-label>Label</mat-label>\n                                    }\n                                    <mat-icon\n                                        matPrefix\n                                        class=\"hidden icon-size-5 sm:flex\"\n                                        [svgIcon]=\"'heroicons_solid:tag'\"\n                                    ></mat-icon>\n                                \n                                    <mat-select [formControl]=\"phoneNumber.get('label')\">\n                                        <mat-option [value]=\"'Mobile'\">Mobile</mat-option>\n                                        <mat-option [value]=\"'Work'\">Work</mat-option>\n                                        <mat-option [value]=\"'Home'\">Home</mat-option>\n                                        <mat-option [value]=\"'Fax'\">Fax</mat-option>\n                                        <mat-option [value]=\"'Other'\">Other</mat-option>\n                                    </mat-select>\n                                </mat-form-field>\n                                    <!-- Remove phone number -->\n                                    @if (!(first && last)) {\n                                        <div\n                                            class=\"flex w-10 items-center pl-2\"\n                                            [ngClass]=\"{ 'mt-6': first }\"\n                                        >\n                                            <button\n                                                class=\"h-8 min-h-8 w-8\"\n                                                mat-icon-button\n                                                (click)=\"\n                                                    removePhoneNumberField(i)\n                                                \"\n                                                matTooltip=\"Remove\"\n                                            >\n                                                <mat-icon\n                                                    class=\"icon-size-5\"\n                                                    [svgIcon]=\"\n                                                        'heroicons_solid:trash'\n                                                    \"\n                                                ></mat-icon>\n                                            </button>\n                                        </div>\n                                    }\n                                </div>\n                            }\n                        </div>\n                        <div\n                            class=\"group -ml-4 mt-2 inline-flex cursor-pointer items-center rounded px-4 py-2\"\n                            (click)=\"addPhoneNumberField()\"\n                        >\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:plus-circle'\"\n                            ></mat-icon>\n                            <span\n                                class=\"text-secondary ml-2 font-medium group-hover:underline\"\n                                >Add a phone number</span\n                            >\n                        </div>\n                    </div>\n\n                    <!-- Website -->\n                    <div class=\"mt-8\">\n                        <mat-form-field class=\"w-full\" appearance=\"fill\" [subscriptSizing]=\"'dynamic'\">\n                            <mat-label>Website</mat-label>\n                            \n                            <!-- Optioneel prepend -->\n                            <span matPrefix>https://</span>\n\n                            <input\n                                matInput\n                                formControlName=\"website\"\n                                placeholder=\"www.example.com\"\n                                type=\"url\"\n                            />\n\n                            <!-- Foutmelding bij ongeldige URL -->\n                            <mat-error>\n                                @if (contactForm.get('website')?.invalid && contactForm.get('website')?.touched) {\n                                    Invalid website URL. Use e.g. www.example.com\n                                }\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n\n                    <!-- Notes -->\n                    <div class=\"mt-8\">\n                        <mat-form-field\n                            class=\"w-full\"\n                            [subscriptSizing]=\"'dynamic'\"\n                        >\n                            <mat-label>Notes</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:bars-3-bottom-left'\"\n                            ></mat-icon>\n                            <textarea\n                                matInput\n                                [formControlName]=\"'notes'\"\n                                [placeholder]=\"'Notes'\"\n                                [rows]=\"5\"\n                                [spellcheck]=\"false\"\n                                cdkTextareaAutosize\n                            ></textarea>\n                        </mat-form-field>\n                    </div>\n\n                    <!-- Actions -->\n                    <div\n                        class=\"-mx-6 mt-10 flex items-center border-t bg-gray-50 py-4 pl-1 pr-4 dark:bg-transparent sm:-mx-12 sm:pl-7 sm:pr-12\"\n                    >\n                        <!-- Delete -->\n                        <button\n                            mat-button\n                            [color]=\"'warn'\"\n                            [matTooltip]=\"'Delete'\"\n                            (click)=\"deleteContact()\"\n                        >\n                            Delete\n                        </button>\n                        <!-- Cancel -->\n                        <button\n                            class=\"ml-auto\"\n                            mat-button\n                            [matTooltip]=\"'Cancel'\"\n                            (click)=\"toggleEditMode(false)\"\n                        >\n                            Cancel\n                        </button>\n                        <!-- Save -->\n                        <button\n                            class=\"ml-2\"\n                            mat-flat-button\n                            [color]=\"'primary'\"\n                            [disabled]=\"contactForm.invalid\"\n                            [matTooltip]=\"'Save'\"\n                            (click)=\"updateContact()\"\n                        >\n                            Save\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    }\n</div>\n", "import { inject } from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    Router,\n    RouterStateSnapshot,\n    Routes,\n} from '@angular/router';\nimport { ContactsComponent } from 'app/pages/crm/customers/contacts.component';\nimport { ContactsService } from 'app/pages/crm/customers/contacts.service';\nimport { ContactsDetailsComponent } from 'app/pages/crm/customers/details/details.component';\nimport { ContactsListComponent } from 'app/pages/crm/customers/list/list.component';\nimport { catchError, throwError, of } from 'rxjs';\n\n/**\n * Contact resolver\n *\n * @param route\n * @param state\n */\nconst contactResolver = (\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n) => {\n    const contactsService = inject(ContactsService);\n    const id = route.paramMap.get('id');\n\n    const isValidUUID =\n        /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id);\n\n    if (!isValidUUID) {\n        console.warn('⛔ Ongeldig UUID-formaat:', id);\n        return throwError(() => new Error('Invalid contact ID format'));\n    }\n\n    return contactsService.getContactById(id).pipe(\n        catchError((error) => {\n            console.warn(`ℹ️ Contact met id ${id} niet gevonden, nieuw contact wordt aangemaakt`);\n            contactsService.setEmptyContactWithId(id); // deze functie voeg je toe aan je service\n            return of(null); // laat de route toch doorgaan\n        })\n    );\n};\n\n/**\n * Can deactivate contacts details\n *\n * @param component\n * @param currentRoute\n * @param currentState\n * @param nextState\n */\nconst canDeactivateContactsDetails = (\n    component: ContactsDetailsComponent,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState: RouterStateSnapshot\n) => {\n    // Get the next route\n    let nextRoute: ActivatedRouteSnapshot = nextState.root;\n    while (nextRoute.firstChild) {\n        nextRoute = nextRoute.firstChild;\n    }\n\n    // If the next state doesn't contain '/contacts'\n    // it means we are navigating away from the\n    // contacts app\n    if (!nextState.url.includes('/contacts')) {\n        // Let it navigate\n        return true;\n    }\n\n    // If we are navigating to another contact...\n    if (nextRoute.paramMap.get('id')) {\n        // Just navigate\n        return true;\n    }\n\n    // Otherwise, close the drawer first, and then navigate\n    return component.closeDrawer().then(() => true);\n};\n\nexport default [\n    {\n        path: '',\n        component: ContactsComponent,\n        resolve: {\n            tags: () => inject(ContactsService).getTags(),\n        },\n        children: [\n            {\n                path: '',\n                component: ContactsListComponent,\n                resolve: {\n                    contacts: () => inject(ContactsService).getContacts(),\n                    countries: () => inject(ContactsService).getCountries(),\n                },\n                children: [\n                    {\n                        path: ':id',\n                        component: ContactsDetailsComponent,\n                        resolve: {\n                            contact: contactResolver,\n                            countries: () =>\n                                inject(ContactsService).getCountries(),\n                        },\n                        canDeactivate: [canDeactivateContactsDetails],\n                    },\n                ],\n            },\n        ],\n    },\n] as Routes;\n"],
  "mappings": "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",
  "names": ["ContactsComponent", "constructor", "selectors", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275element", "RouterOutlet", "encapsulation", "changeDetection", "ContactsService", "constructor", "_httpClient", "_contact", "BehaviorSubject", "_agents", "_contacts", "_countries", "_tags", "contact$", "asObservable", "contacts$", "countries$", "tags$", "agents$", "getContacts", "get", "pipe", "tap", "contacts", "next", "searchContacts", "query", "params", "setContact", "contact", "updateContactActive", "id", "active", "put", "getContactById", "test", "map", "apiResponse", "mapped", "avatar", "type", "emails", "phoneNumbers", "p", "country", "phoneNumber", "phone_number", "label", "company", "legal_representative", "agentName", "addresses", "billingCountry", "notes", "tags", "agentId", "agent_id", "businessRegNr", "business_reg_nr", "customerNr", "customer_nr", "website", "currency", "defaultAirport", "default_airport", "discount", "commission", "defaultCommission", "default_commission", "throwError", "Error", "createContact", "take", "switchMap", "post", "newContact", "setEmptyContactWithId", "emptyContact", "updateContact", "payload", "patch", "headers", "FormData", "undefined", "updatedContact", "index", "findIndex", "item", "deleteContact", "delete", "updated", "getValue", "filter", "getAgents", "agents", "agent", "__spreadProps", "__spreadValues", "getCountries", "countries", "getTags", "createTag", "tag", "newTag", "updateTag", "updatedTag", "deleteTag", "isDeleted", "splice", "forEach", "tagIndex", "uploadAvatar", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "\u0275\u0275text", "\u0275\u0275textInterpolate1", "ctx_r1", "contactsCount", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "normalize", "contact_r3", "company", "charAt", "\u0275\u0275element", "\u0275\u0275property", "avatar", "\u0275\u0275sanitizeUrl", "legal_representative", "agentName", "\u0275\u0275template", "ContactsListComponent_Conditional_32_Conditional_0_For_1_Conditional_0_Template", "ContactsListComponent_Conditional_32_Conditional_0_For_1_Conditional_3_Template", "ContactsListComponent_Conditional_32_Conditional_0_For_1_Conditional_4_Template", "ContactsListComponent_Conditional_32_Conditional_0_For_1_Conditional_8_Template", "ContactsListComponent_Conditional_32_Conditional_0_For_1_Conditional_19_Template", "\u0275\u0275conditional", "\u0275$index_59_r4", "contacts_r5", "\u0275\u0275pureFunction2", "_c2", "selectedContact", "id", "\u0275\u0275pureFunction1", "_c3", "_c4", "active", "_c5", "type", "\u0275\u0275styleProp", "tmp_28_0", "getCountryByName", "billingCountry", "flagImagePos", "tmp_29_0", "name", "\u0275\u0275repeaterCreate", "ContactsListComponent_Conditional_32_Conditional_0_For_1_Template", "\u0275\u0275componentInstance", "trackByFn", "\u0275\u0275repeater", "ContactsListComponent_Conditional_32_Conditional_0_Template", "ContactsListComponent_Conditional_32_Conditional_1_Template", "ctx", "length", "ContactsListComponent", "filter", "_filter$", "value", "setFilter", "next", "_changeDetectorRef", "markForCheck", "constructor", "_activatedRoute", "_contactsService", "_document", "_router", "_fuseMediaWatcherService", "BehaviorSubject", "contactsTableColumns", "searchInputControl", "UntypedFormControl", "_unsubscribeAll", "Subject", "getUserNames", "contact", "users", "map", "user", "first_name", "last_name", "join", "trim", "toUpperCase", "replace", "ngOnInit", "contacts$", "pipe", "takeUntil", "subscribe", "contacts", "contact$", "countries$", "countries", "valueChanges", "switchMap", "query", "searchContacts", "matDrawer", "openedChange", "opened", "onMediaChange$", "matchingAliases", "includes", "drawerMode", "fromEvent", "event", "ctrlKey", "metaKey", "key", "createContact", "filteredContacts$", "combineLatest", "startWith", "search", "toLowerCase", "sort", "a", "b", "localeCompare", "ngOnDestroy", "complete", "onBackdropClicked", "navigate", "relativeTo", "newContact", "addresses", "label", "address", "zip", "city", "country", "longitude", "latitude", "phoneNumbers", "emails", "tags", "index", "item", "find", "\u0275\u0275directiveInject", "ActivatedRoute", "ChangeDetectorRef", "ContactsService", "DOCUMENT", "Router", "FuseMediaWatcherService", "selectors", "viewQuery", "rf", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "ContactsListComponent_Conditional_12_Template", "ContactsListComponent_Conditional_32_Template", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction0", "_c1", "tmp_16_0", "\u0275\u0275pipeBind1", "MatSidenavModule", "MatDrawer", "MatDrawerContainer", "MatDrawerContent", "RouterOutlet", "MatFormFieldModule", "MatFormField", "MatPrefix", "MatIconModule", "MatIcon", "MatInputModule", "MatInput", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "ReactiveFormsModule", "FormControlDirective", "MatButtonModule", "MatButton", "NgClass", "RouterLink", "AsyncPipe", "I18nPluralPipe", "encapsulation", "changeDetection", "UsersService", "constructor", "_httpClient", "getUsersByCompanyId", "companyId", "get", "pipe", "map", "users", "user", "id", "email", "phone", "roleId", "role_id", "company_id", "firstName", "first_name", "lastName", "last_name", "createUser", "post", "updateUser", "put", "deleteUser", "userId", "delete", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275property", "ctx_r1", "contact", "avatar", "\u0275\u0275sanitizeUrl", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "company", "charAt", "\u0275\u0275pureFunction2", "_c3", "type", "\u0275\u0275styleProp", "tmp_8_0", "getCountryByName", "billingCountry", "flagImagePos", "tmp_9_0", "name", "legal_representative", "\u0275\u0275textInterpolate", "email_r3", "label", "\u0275\u0275template", "ContactsDetailsComponent_Conditional_2_Conditional_34_For_4_Conditional_3_Template", "email", "\u0275\u0275conditional", "\u0275\u0275repeaterCreate", "ContactsDetailsComponent_Conditional_2_Conditional_34_For_4_Template", "\u0275\u0275componentInstance", "trackByFn", "\u0275\u0275repeater", "emails", "\u0275\u0275pureFunction1", "_c4", "agentId", "agentName", "commission", "discount", "defaultCommission", "defaultAirport", "address_r4", "address", "\u0275\u0275textInterpolate2", "zip", "city", "country", "ContactsDetailsComponent_Conditional_2_Conditional_46_For_4_Template", "addresses", "customerNr", "businessRegNr", "ContactsDetailsComponent_Conditional_2_Conditional_47_Conditional_3_Template", "ContactsDetailsComponent_Conditional_2_Conditional_47_Conditional_5_Template", "phoneNumber_r5", "ContactsDetailsComponent_Conditional_2_Conditional_48_For_4_Conditional_6_Template", "getCountryByIso", "code", "phoneNumber", "ContactsDetailsComponent_Conditional_2_Conditional_48_For_4_Template", "phoneNumbers", "notes", "\u0275\u0275sanitizeHtml", "user_r7", "firstName", "lastName", "ContactsDetailsComponent_Conditional_2_Conditional_53_For_2_Conditional_2_Template", "ContactsDetailsComponent_Conditional_2_Conditional_53_For_2_Conditional_3_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r6", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "editUser", "deleteUser", "id", "ContactsDetailsComponent_Conditional_2_Conditional_53_For_2_Template", "_forTrack0", "users", "_r8", "saveUser", "cancelUser", "selectedUser", "userForm", "_r1", "closeDrawer", "ContactsDetailsComponent_Conditional_2_Conditional_8_Template", "ContactsDetailsComponent_Conditional_2_Conditional_9_Template", "toggleEditMode", "createContact", "ContactsDetailsComponent_Conditional_2_Conditional_23_Template", "ContactsDetailsComponent_Conditional_2_Conditional_24_Template", "$event", "toggleContactActive", "checked", "ContactsDetailsComponent_Conditional_2_Conditional_34_Template", "ContactsDetailsComponent_Conditional_2_Conditional_35_Template", "ContactsDetailsComponent_Conditional_2_Conditional_36_Template", "ContactsDetailsComponent_Conditional_2_Conditional_40_Template", "ContactsDetailsComponent_Conditional_2_Conditional_41_Template", "ContactsDetailsComponent_Conditional_2_Conditional_46_Template", "ContactsDetailsComponent_Conditional_2_Conditional_47_Template", "ContactsDetailsComponent_Conditional_2_Conditional_48_Template", "ContactsDetailsComponent_Conditional_2_Conditional_49_Template", "ContactsDetailsComponent_Conditional_2_Conditional_53_Template", "ContactsDetailsComponent_Conditional_2_Conditional_54_Template", "openAddUserPanel", "ContactsDetailsComponent_Conditional_2_Conditional_58_Template", "active", "website", "length", "currency", "showUserForm", "addressGroup_r11", "get", "_r12", "\u0275$index_423_r13", "$index", "onLabelChange", "country_r14", "_r15", "removeAddressField", "_c5", "ContactsDetailsComponent_Conditional_3_For_44_Conditional_2_Template", "ContactsDetailsComponent_Conditional_3_For_44_Conditional_3_Template", "ContactsDetailsComponent_Conditional_3_For_44_Conditional_4_Template", "ContactsDetailsComponent_Conditional_3_For_44_Conditional_6_Template", "ContactsDetailsComponent_Conditional_3_For_44_Conditional_10_Template", "ContactsDetailsComponent_Conditional_3_For_44_Conditional_14_Template", "ContactsDetailsComponent_Conditional_3_For_44_Conditional_17_Template", "ContactsDetailsComponent_Conditional_3_For_44_For_20_Template", "ContactsDetailsComponent_Conditional_3_For_44_Conditional_23_Template", "ContactsDetailsComponent_Conditional_3_For_44_Conditional_26_Template", "ContactsDetailsComponent_Conditional_3_For_44_Conditional_28_Template", "countries", "agent_r16", "ContactsDetailsComponent_Conditional_3_Conditional_61_For_7_Template", "\u0275\u0275repeaterTrackByIdentity", "agents", "airport_r17", "currency_r18", "email_r19", "_r20", "\u0275$index_632_r21", "removeEmailField", "ContactsDetailsComponent_Conditional_3_For_82_Conditional_2_Template", "ContactsDetailsComponent_Conditional_3_For_82_mat_error_5_Template", "ContactsDetailsComponent_Conditional_3_For_82_Conditional_7_Template", "ContactsDetailsComponent_Conditional_3_For_82_Conditional_9_Template", "ContactsDetailsComponent_Conditional_3_For_82_Conditional_10_Template", "ContactsDetailsComponent_Conditional_3_For_82_Conditional_11_Template", "tmp_21_0", "invalid", "touched", "dirty", "country_r22", "iso", "_r23", "\u0275$index_697_r24", "removePhoneNumberField", "ContactsDetailsComponent_Conditional_3_For_90_Conditional_2_Template", "ContactsDetailsComponent_Conditional_3_For_90_For_11_Template", "ContactsDetailsComponent_Conditional_3_For_90_Conditional_13_Template", "ContactsDetailsComponent_Conditional_3_For_90_Conditional_26_Template", "phoneNumber_r25", "value", "\u0275$count_697_r26", "_r9", "avatarFileInput_r10", "\u0275\u0275reference", "uploadAvatar", "files", "removeAvatar", "ContactsDetailsComponent_Conditional_3_Conditional_19_Template", "ContactsDetailsComponent_Conditional_3_Conditional_20_Template", "ContactsDetailsComponent_Conditional_3_For_44_Template", "addAddressField", "ContactsDetailsComponent_Conditional_3_Conditional_61_Template", "ContactsDetailsComponent_Conditional_3_Conditional_62_Template", "ContactsDetailsComponent_Conditional_3_For_71_Template", "_forTrack1", "ContactsDetailsComponent_Conditional_3_For_77_Template", "ContactsDetailsComponent_Conditional_3_For_82_Template", "addEmailField", "ContactsDetailsComponent_Conditional_3_For_90_Template", "addPhoneNumberField", "ContactsDetailsComponent_Conditional_3_Conditional_103_Template", "deleteContact", "updateContact", "contactForm", "tmp_25_0", "tmp_26_0", "airports", "currencies", "tmp_37_0", "ContactsDetailsComponent", "constructor", "_activatedRoute", "_changeDetectorRef", "_contactsListComponent", "_contactsService", "_usersService", "_formBuilder", "_fuseConfirmationService", "_renderer2", "_router", "_overlay", "_viewContainerRef", "_snackBar", "editMode", "tagsEditMode", "_unsubscribeAll", "Subject", "countrySearch", "filteredCountries", "loadingContact", "selectedAvatarFile", "generateRandomPassword", "chars", "password", "i", "Math", "floor", "random", "group", "companyId", "user", "userData", "getRawValue", "trim", "mappedUserData", "first_name", "last_name", "phone", "role_id", "roleId", "company_id", "breeder_id", "updateUser", "subscribe", "next", "loadUsersForCompany", "error", "console", "createUser", "err", "message", "open", "duration", "horizontalPosition", "verticalPosition", "panelClass", "getContacts", "userId", "title", "actions", "confirm", "cancel", "afterClosed", "result", "log", "getUsersByCompanyId", "markForCheck", "updateContactActive", "ngOnInit", "countries$", "pipe", "takeUntil", "codes", "matDrawer", "Validators", "pattern", "array", "longitude", "latitude", "show_on_locator_map", "valueChanges", "selectedAgent", "find", "a", "setValue", "typeValue", "agentIdControl", "setValidators", "required", "clearValidators", "updateValueAndValidity", "isAgent", "reset", "getAgents", "agents$", "contacts$", "contacts", "contact$", "warn", "clear", "patchValue", "__spreadProps", "__spreadValues", "emailFormGroups", "sortedEmails", "sort", "b", "order", "aIndex", "indexOf", "bIndex", "forEach", "index", "push", "emailFormGroup", "phoneNumbersFormGroups", "phoneNumbersFormGroup", "map", "addr", "tags$", "tags", "filteredTags", "filterCountries", "query", "toLowerCase", "filter", "includes", "ngOnDestroy", "complete", "_tagsPanelOverlayRef", "dispose", "__async", "close", "navigate", "relativeTo", "formData", "FormData", "append", "JSON", "stringify", "forkJoin", "list", "detail", "getContactById", "currentContactIndex", "findIndex", "item", "nextContactIndex", "nextContactId", "isDeleted", "fileList", "file", "reader", "FileReader", "onload", "readAsDataURL", "_avatarFileInput", "nativeElement", "openTagsPanel", "create", "backdropClass", "hasBackdrop", "scrollStrategy", "scrollStrategies", "block", "positionStrategy", "position", "flexibleConnectedTo", "_tagsPanelOrigin", "withFlexibleDimensions", "withViewportMargin", "withLockedPosition", "withPositions", "originX", "originY", "overlayX", "overlayY", "attachments", "addClass", "overlayElement", "querySelector", "focus", "templatePortal", "TemplatePortal", "_tagsPanel", "attach", "backdropClick", "removeClass", "hasAttached", "detach", "isAttached", "toggleTagsEditMode", "filterTags", "event", "target", "tag", "filterTagsInputKeyDown", "key", "createTag", "removeTagFromContact", "addTagToContact", "response", "updateTagTitle", "updateTag", "debounceTime", "deleteTag", "unshift", "splice", "toggleContactTag", "shouldShowCreateTagButton", "inputValue", "removeAt", "phoneNumberFormGroup", "addressFormGroup", "\u0275\u0275directiveInject", "ActivatedRoute", "ChangeDetectorRef", "ContactsListComponent", "ContactsService", "UsersService", "UntypedFormBuilder", "FuseConfirmationService", "Renderer2", "Router", "Overlay", "ViewContainerRef", "MatSnackBar", "selectors", "viewQuery", "rf", "ctx", "ContactsDetailsComponent_Conditional_1_Template", "ContactsDetailsComponent_Conditional_2_Template", "ContactsDetailsComponent_Conditional_3_Template", "MatButtonModule", "MatButton", "MatIconAnchor", "MatIconButton", "MatTooltipModule", "MatTooltip", "MatIconModule", "MatIcon", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "NgControlStatusGroup", "MatSlideToggleModule", "MatSlideToggle", "ReactiveFormsModule", "FormControlDirective", "FormGroupDirective", "FormControlName", "FormGroupName", "FormArrayName", "MatRippleModule", "MatRipple", "MatFormFieldModule", "MatFormField", "MatLabel", "MatHint", "MatError", "MatPrefix", "MatInputModule", "MatInput", "CdkTextareaAutosize", "MatCheckboxModule", "MatCheckbox", "NgClass", "MatSelectModule", "MatSelect", "MatSelectTrigger", "MatOption", "MatOptionModule", "MatDatepickerModule", "CommonModule", "NgIf", "TextFieldModule", "RouterLink", "encapsulation", "changeDetection", "contactResolver", "route", "state", "contactsService", "inject", "ContactsService", "id", "paramMap", "get", "test", "getContactById", "pipe", "catchError", "error", "console", "warn", "setEmptyContactWithId", "of", "throwError", "Error", "canDeactivateContactsDetails", "component", "currentRoute", "currentState", "nextState", "nextRoute", "root", "firstChild", "url", "includes", "closeDrawer", "then", "contacts_routes_default", "path", "ContactsComponent", "resolve", "tags", "getTags", "children", "ContactsListComponent", "contacts", "getContacts", "countries", "getCountries", "ContactsDetailsComponent", "contact", "canDeactivate"]
}
