{
  "version": 3,
  "sources": ["src/app/modules/auth/sign-in/sign-in.component.ts", "src/app/modules/auth/sign-in/sign-in.component.html", "src/app/modules/auth/sign-in/sign-in.routes.ts"],
  "sourcesContent": ["import { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport {\n    FormsModule,\n    NgForm,\n    ReactiveFormsModule,\n    UntypedFormBuilder,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { fuseAnimations } from '@fuse/animations';\nimport { FuseAlertComponent, FuseAlertType } from '@fuse/components/alert';\nimport { AuthService } from 'app/core/auth/auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n    selector: 'auth-sign-in',\n    templateUrl: './sign-in.component.html',\n    encapsulation: ViewEncapsulation.None,\n    animations: fuseAnimations,\n    imports: [\n        RouterLink,\n        FuseAlertComponent,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatButtonModule,\n        MatIconModule,\n        MatCheckboxModule,\n        MatProgressSpinnerModule,\n    ],\n})\nexport class AuthSignInComponent implements OnInit {\n    @ViewChild('signInNgForm') signInNgForm: NgForm;\n\n    alert: { type: FuseAlertType; message: string } = {\n        type: 'success',\n        message: '',\n    };\n    signInForm: UntypedFormGroup;\n    showAlert: boolean = false;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _authService: AuthService,\n        private _formBuilder: UntypedFormBuilder,\n        private _router: Router,\n        private _snackBar: MatSnackBar\n    ) {}\n\n    showError(message: string): void {\n        this._snackBar.open(message, 'Close', {\n            duration: 4000,\n            panelClass: ['bg-red-600', 'text-white'],\n            horizontalPosition: 'center',\n            verticalPosition: 'top'\n        });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void {\n        // Create the form\n        this.signInForm = this._formBuilder.group({\n            email: [\n                '',\n                [Validators.required, Validators.email],\n            ],\n            password: ['', Validators.required],\n            rememberMe: [''],\n        });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Sign in\n     */\n    signIn(): void {\n        if (this.signInForm.invalid) {\n            const email = this.signInForm.get('email');\n            const password = this.signInForm.get('password');\n    \n            if (email?.hasError('required')) {\n                this.showError('Email is required');\n            } else if (email?.hasError('email')) {\n                this.showError('Please enter a valid email address');\n            } else if (password?.hasError('required')) {\n                this.showError('Password is required');\n            } else {\n                this.showError('Please fill in all required fields');\n            }\n            return;\n        }\n    \n        this.signInForm.disable();\n    \n        this._authService.signIn(this.signInForm.value).subscribe(\n            () => {\n                const redirectURL =\n                    this._activatedRoute.snapshot.queryParamMap.get('redirectURL') || '/signed-in-redirect';\n    \n                this._router.navigateByUrl(redirectURL);\n            },\n            (error) => {\n                this.signInForm.enable();\n                //this.signInNgForm.resetForm();\n    \n                this.showError('Login failed: Wrong email or password');\n            }\n        );\n    }\n}\n", "<div class=\"flex min-w-0 flex-auto flex-col items-center sm:justify-center\">\n    <div\n        class=\"w-full px-4 py-8 sm:bg-card sm:w-auto sm:rounded-2xl sm:p-12 sm:shadow\"\n    >\n        <div class=\"mx-auto w-full max-w-80 sm:mx-0 sm:w-80\">\n            <!-- Logo -->\n            <div class=\"w-56 mx-auto\">\n                <a routerLink=\"/sign-in\">\n                <img src=\"images/logo/ornafish-logo.png\" />\n                </a>\n            </div>\n\n            <!-- Alert -->\n            @if (showAlert) {\n                <fuse-alert\n                    class=\"mt-8\"\n                    [appearance]=\"'outline'\"\n                    [showIcon]=\"false\"\n                    [type]=\"alert.type\"\n                    [@shake]=\"alert.type === 'error'\"\n                >\n                    {{ alert.message }}\n                </fuse-alert>\n            }\n\n            <!-- Sign in form -->\n            <form class=\"mt-8\" [formGroup]=\"signInForm\" #signInNgForm=\"ngForm\">\n                <!-- Email field -->\n                <mat-form-field class=\"w-full\" [hideRequiredMarker]=\"true\">\n                    <mat-label>Email address TEST</mat-label>\n                    <input id=\"email\" matInput [formControlName]=\"'email'\" />\n                  </mat-form-field>\n\n                <!-- Password field -->\n                <mat-form-field class=\"w-full\" [hideRequiredMarker]=\"true\">\n                    <mat-label>Password</mat-label>\n                    <input\n                        id=\"password\"\n                        matInput\n                        type=\"password\"\n                        [formControlName]=\"'password'\"\n                        #passwordField\n                    />\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"\n                            passwordField.type === 'password'\n                                ? (passwordField.type = 'text')\n                                : (passwordField.type = 'password')\n                        \"\n                        matSuffix\n                    >\n                        @if (passwordField.type === 'password') {\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:eye'\"\n                            ></mat-icon>\n                        }\n                        @if (passwordField.type === 'text') {\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:eye-slash'\"\n                            ></mat-icon>\n                        }\n                    </button>\n                    <mat-error> Password is required </mat-error>\n                </mat-form-field>\n\n                <!-- Actions -->\n                <div\n                    class=\"mt-1.5 inline-flex w-full items-center justify-between\"\n                >\n                    <mat-checkbox\n                        class=\"-ml-2\"\n                        [color]=\"'primary'\"\n                        [formControlName]=\"'rememberMe'\"\n                    >\n                        Remember me\n                    </mat-checkbox>\n                    <a\n                        class=\"text-md font-medium text-primary-500 hover:underline\"\n                        [routerLink]=\"['/forgot-password']\"\n                        >Forgot password?\n                    </a>\n                </div>\n\n                <!-- Submit button -->\n                <button\n                    mat-flat-button\n                    [color]=\"'primary'\"\n                    class=\"ornafish-blue-button fuse-mat-button-large mt-6 w-full\"\n                    [disabled]=\"signInForm.disabled\"\n                    (click)=\"signIn()\"\n                >\n                    @if (!signInForm.disabled) {\n                        <span> Sign in </span>\n                    }\n                    @if (signInForm.disabled) {\n                        <mat-progress-spinner\n                            [diameter]=\"24\"\n                            [mode]=\"'indeterminate'\"\n                        ></mat-progress-spinner>\n                    }\n                </button>\n            </form>\n        </div>\n    </div>\n</div>\n", "import { Routes } from '@angular/router';\nimport { AuthSignInComponent } from 'app/modules/auth/sign-in/sign-in.component';\n\nexport default [\n    {\n        path: '',\n        component: AuthSignInComponent,\n    },\n] as Routes;\n"],
  "mappings": "g8BCcgBA,EAAA,EAAA,aAAA,CAAA,EAOIC,EAAA,CAAA,EACJC,EAAA,kBANIC,EAAA,aAAA,SAAA,EAAwB,WAAA,EAAA,EACN,OAAAC,EAAAC,MAAAC,IAAA,EACC,SAAAF,EAAAC,MAAAC,OAAA,OAAA,EAGnBC,EAAA,EAAAC,EAAA,IAAAJ,EAAAC,MAAAI,QAAA,GAAA,yBAiCQC,EAAA,EAAA,WAAA,EAAA,OAEIP,EAAA,UAAA,qBAAA,wBAIJO,EAAA,EAAA,WAAA,EAAA,OAEIP,EAAA,UAAA,2BAAA,yBAkCRH,EAAA,EAAA,MAAA,EAAOC,EAAA,EAAA,WAAA,EAAQC,EAAA,yBAGfQ,EAAA,EAAA,uBAAA,EAAA,OACIP,EAAA,WAAA,EAAA,EAAe,OAAA,eAAA,ED7D3C,IAAaQ,IAAmB,IAAA,CAA1B,MAAOA,CAAmB,CAa5BC,YACYC,EACAC,EACAC,EACAC,EACAC,EAAsB,CAJtB,KAAAJ,gBAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,QAAAA,EACA,KAAAC,UAAAA,EAfZ,KAAAZ,MAAkD,CAC9CC,KAAM,UACNG,QAAS,IAGb,KAAAS,UAAqB,EAWlB,CAEHC,UAAUV,EAAe,CACrB,KAAKQ,UAAUG,KAAKX,EAAS,QAAS,CAClCY,SAAU,IACVC,WAAY,CAAC,aAAc,YAAY,EACvCC,mBAAoB,SACpBC,iBAAkB,MACrB,CACL,CASAC,UAAQ,CAEJ,KAAKC,WAAa,KAAKX,aAAaY,MAAM,CACtCC,MAAO,CACH,GACA,CAACC,EAAWC,SAAUD,EAAWD,KAAK,CAAC,EAE3CG,SAAU,CAAC,GAAIF,EAAWC,QAAQ,EAClCE,WAAY,CAAC,EAAE,EAClB,CACL,CASAC,QAAM,CACF,GAAI,KAAKP,WAAWQ,QAAS,CACzB,IAAMN,EAAQ,KAAKF,WAAWS,IAAI,OAAO,EACnCJ,EAAW,KAAKL,WAAWS,IAAI,UAAU,EAE3CP,GAAOQ,SAAS,UAAU,EAC1B,KAAKjB,UAAU,mBAAmB,EAC3BS,GAAOQ,SAAS,OAAO,EAC9B,KAAKjB,UAAU,oCAAoC,EAC5CY,GAAUK,SAAS,UAAU,EACpC,KAAKjB,UAAU,sBAAsB,EAErC,KAAKA,UAAU,oCAAoC,EAEvD,MACJ,CAEA,KAAKO,WAAWW,QAAO,EAEvB,KAAKvB,aAAamB,OAAO,KAAKP,WAAWY,KAAK,EAAEC,UAC5C,IAAK,CACD,IAAMC,EACF,KAAK3B,gBAAgB4B,SAASC,cAAcP,IAAI,aAAa,GAAK,sBAEtE,KAAKnB,QAAQ2B,cAAcH,CAAW,CAC1C,EACCI,GAAS,CACN,KAAKlB,WAAWmB,OAAM,EAGtB,KAAK1B,UAAU,uCAAuC,CAC1D,CAAC,CAET,iDAzFSR,GAAmBmC,EAAAC,CAAA,EAAAD,EAAAE,CAAA,EAAAF,EAAAG,CAAA,EAAAH,EAAAI,CAAA,EAAAJ,EAAAK,EAAA,CAAA,CAAA,CAAA,+BAAnBxC,EAAmByC,UAAA,CAAA,CAAA,cAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,0mCCvChCtD,EAAA,EAAA,MAAA,CAAA,EAA4E,EAAA,MAAA,CAAA,EAGvE,EAAA,MAAA,CAAA,EACwD,EAAA,MAAA,CAAA,EAEvB,EAAA,IAAA,CAAA,EAEtBU,EAAA,EAAA,MAAA,CAAA,EACAR,EAAA,EAAI,EAIRsD,EAAA,EAAAC,GAAA,EAAA,EAAA,aAAA,CAAA,EAaAzD,EAAA,EAAA,OAAA,EAAA,CAAA,EAAmE,EAAA,iBAAA,EAAA,EAEJ,GAAA,WAAA,EAC5CC,EAAA,GAAA,oBAAA,EAAkBC,EAAA,EAC7BQ,EAAA,GAAA,QAAA,EAAA,EACFR,EAAA,EAGFF,EAAA,GAAA,iBAAA,EAAA,EAA2D,GAAA,WAAA,EAC5CC,EAAA,GAAA,UAAA,EAAQC,EAAA,EACnBQ,EAAA,GAAA,QAAA,GAAA,CAAA,EAOAV,EAAA,GAAA,SAAA,EAAA,EAGI0D,EAAA,QAAA,UAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAC,EAAAC,EAAA,EAAA,EAAA,OAAAC,EAAAF,EAAAvD,OAEN,WAAUuD,EAAAvD,KACP,OAAMuD,EAAAvD,KACV,UAChB,CAAA,CAAA,EAEuBkD,EAAA,GAAAQ,GAAA,EAAA,EAAA,WAAA,EAAA,EAAyC,GAAAC,GAAA,EAAA,EAAA,WAAA,EAAA,EAY7C/D,EAAA,EACAF,EAAA,GAAA,WAAA,EAAYC,EAAA,GAAA,wBAAA,EAAqBC,EAAA,EAAY,EAIjDF,EAAA,GAAA,MAAA,EAAA,EAEC,GAAA,eAAA,EAAA,EAMOC,EAAA,GAAA,eAAA,EACJC,EAAA,EACAF,EAAA,GAAA,IAAA,EAAA,EAGKC,EAAA,GAAA,mBAAA,EACLC,EAAA,EAAI,EAIRF,EAAA,GAAA,SAAA,EAAA,EAKI0D,EAAA,QAAA,UAAA,CAAAQ,OAAAP,EAAAC,CAAA,EAAAG,EAASR,EAAAtB,OAAA,CAAQ,CAAA,CAAA,EAEjBuB,EAAA,GAAAW,GAAA,EAAA,EAAA,MAAA,EAA4B,GAAAC,GAAA,EAAA,EAAA,uBAAA,EAAA,EAShClE,EAAA,EAAS,EACN,EACL,EACJ,sBA9FEK,EAAA,CAAA,EAAA8D,EAAAd,EAAArC,UAAA,EAAA,EAAA,EAamBX,EAAA,EAAAJ,EAAA,YAAAoD,EAAA7B,UAAA,EAEgBnB,EAAA,CAAA,EAAAJ,EAAA,qBAAA,EAAA,EAEAI,EAAA,CAAA,EAAAJ,EAAA,kBAAA,OAAA,EAIAI,EAAA,EAAAJ,EAAA,qBAAA,EAAA,EAMvBI,EAAA,CAAA,EAAAJ,EAAA,kBAAA,UAAA,EAaAI,EAAA,CAAA,EAAA8D,EAAAR,EAAAvD,OAAA,WAAA,GAAA,EAAA,EAMAC,EAAA,EAAA8D,EAAAR,EAAAvD,OAAA,OAAA,GAAA,EAAA,EAgBAC,EAAA,CAAA,EAAAJ,EAAA,QAAA,SAAA,EAAmB,kBAAA,YAAA,EAOnBI,EAAA,CAAA,EAAAJ,EAAA,aAAAmE,EAAA,GAAAC,EAAA,CAAA,EAQJhE,EAAA,CAAA,EAAAJ,EAAA,QAAA,SAAA,EAAmB,WAAAoD,EAAA7B,WAAA8C,QAAA,EAKnBjE,EAAA,EAAA8D,EAAAd,EAAA7B,WAAA8C,SAAA,GAAA,EAAA,EAGAjE,EAAA,EAAA8D,EAAAd,EAAA7B,WAAA8C,SAAA,GAAA,EAAA,kBDvEZC,EACAC,GACAC,EAAWC,EAAAC,EAAAC,EAAAC,EACXC,EAAmBC,EAAAC,EACnBC,EAAkBC,EAAAC,EAAAC,EAAAC,EAClBC,GAAcC,GACdC,EAAeC,EAAAC,EACfC,EAAaC,EACbC,GAAiBC,GACjBC,GAAwBC,EAAA,EAAAC,cAAA,EAAAC,KAAA,CAAAC,UAXhBC,CAAc,CAAA,CAAA,CAAA,SAcjB3F,CAAmB,GAAA,EEpChC,IAAA4F,GAAe,CACX,CACIC,KAAM,GACNC,UAAWC,GACd",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "ctx_r1", "alert", "type", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "message", "\u0275\u0275element", "AuthSignInComponent", "constructor", "_activatedRoute", "_authService", "_formBuilder", "_router", "_snackBar", "showAlert", "showError", "open", "duration", "panelClass", "horizontalPosition", "verticalPosition", "ngOnInit", "signInForm", "group", "email", "Validators", "required", "password", "rememberMe", "signIn", "invalid", "get", "hasError", "disable", "value", "subscribe", "redirectURL", "snapshot", "queryParamMap", "navigateByUrl", "error", "enable", "\u0275\u0275directiveInject", "ActivatedRoute", "AuthService", "UntypedFormBuilder", "Router", "MatSnackBar", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275template", "AuthSignInComponent_Conditional_6_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "passwordField_r3", "\u0275\u0275reference", "\u0275\u0275resetView", "AuthSignInComponent_Conditional_19_Template", "AuthSignInComponent_Conditional_20_Template", "i0", "AuthSignInComponent_Conditional_29_Template", "AuthSignInComponent_Conditional_30_Template", "\u0275\u0275conditional", "\u0275\u0275pureFunction0", "_c1", "disabled", "RouterLink", "FuseAlertComponent", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "MatFormFieldModule", "MatFormField", "MatLabel", "MatError", "MatSuffix", "MatInputModule", "MatInput", "MatButtonModule", "MatButton", "MatIconButton", "MatIconModule", "MatIcon", "MatCheckboxModule", "MatCheckbox", "MatProgressSpinnerModule", "MatProgressSpinner", "encapsulation", "data", "animation", "fuseAnimations", "sign_in_routes_default", "path", "component", "AuthSignInComponent"]
}
