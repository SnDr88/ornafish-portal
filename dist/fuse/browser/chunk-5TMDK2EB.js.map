{
  "version": 3,
  "sources": ["src/app/pages/crm/breeders/contacts.component.ts", "src/app/pages/crm/breeders/contacts.component.html", "src/app/pages/crm/breeders/contacts.service.ts", "src/@fuse/pipes/find-by-key/find-by-key.pipe.ts", "src/app/pages/crm/breeders/list/list.component.ts", "src/app/pages/crm/breeders/list/list.component.html", "src/app/pages/crm/breeders/details/details.component.ts", "src/app/pages/crm/breeders/details/details.component.html", "src/app/pages/crm/breeders/contacts.routes.ts"],
  "sourcesContent": ["import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n} from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n    selector: 'contacts',\n    templateUrl: './contacts.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports: [RouterOutlet],\n})\nexport class ContactsComponent {\n    /**\n     * Constructor\n     */\n    constructor() {}\n}\n", "<router-outlet></router-outlet>\n", "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n    Contact,\n    Country,\n    Tag,\n} from 'app/pages/crm/breeders/contacts.types';\nimport {\n    BehaviorSubject,\n    Observable,\n    filter,\n    map,\n    of,\n    switchMap,\n    take,\n    tap,\n    throwError,\n} from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class ContactsService {\n    // Private\n    private _contact: BehaviorSubject<Contact | null> = new BehaviorSubject(\n        null\n    );\n    private _contacts: BehaviorSubject<Contact[] | null> = new BehaviorSubject(\n        null\n    );\n    private _countries: BehaviorSubject<Country[] | null> = new BehaviorSubject(\n        null\n    );\n    private _tags: BehaviorSubject<Tag[] | null> = new BehaviorSubject(null);\n\n    /**\n     * Constructor\n     */\n    constructor(private _httpClient: HttpClient) {}\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for contact\n     */\n    get contact$(): Observable<Contact> {\n        return this._contact.asObservable();\n    }\n\n    /**\n     * Getter for contacts\n     */\n    get contacts$(): Observable<Contact[]> {\n        return this._contacts.asObservable();\n    }\n\n    /**\n     * Getter for countries\n     */\n    get countries$(): Observable<Country[]> {\n        return this._countries.asObservable();\n    }\n\n    /**\n     * Getter for tags\n     */\n    get tags$(): Observable<Tag[]> {\n        return this._tags.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Get contacts\n     */\n    getContacts(): Observable<Contact[]> {\n        return this._httpClient.get<Contact[]>('api/apps/contacts/all').pipe(\n            tap((contacts) => {\n                this._contacts.next(contacts);\n            })\n        );\n    }\n\n    /**\n     * Search contacts with given query\n     *\n     * @param query\n     */\n    searchContacts(query: string): Observable<Contact[]> {\n        return this._httpClient\n            .get<Contact[]>('api/apps/contacts/search', {\n                params: { query },\n            })\n            .pipe(\n                tap((contacts) => {\n                    this._contacts.next(contacts);\n                })\n            );\n    }\n\n    /**\n     * Get contact by id\n     */\n    getContactById(id: string): Observable<Contact> {\n        return this._contacts.pipe(\n            take(1),\n            map((contacts) => {\n                // Find the contact\n                const contact = contacts.find((item) => item.id === id) || null;\n\n                // Update the contact\n                this._contact.next(contact);\n\n                // Return the contact\n                return contact;\n            }),\n            switchMap((contact) => {\n                if (!contact) {\n                    return throwError(\n                        'Could not found contact with id of ' + id + '!'\n                    );\n                }\n\n                return of(contact);\n            })\n        );\n    }\n\n    /**\n     * Create contact\n     */\n    createContact(): Observable<Contact> {\n        return this.contacts$.pipe(\n            take(1),\n            switchMap((contacts) =>\n                this._httpClient\n                    .post<Contact>('api/apps/contacts/contact', {})\n                    .pipe(\n                        map((newContact) => {\n                            // Update the contacts with the new contact\n                            this._contacts.next([newContact, ...contacts]);\n\n                            // Return the new contact\n                            return newContact;\n                        })\n                    )\n            )\n        );\n    }\n\n    /**\n     * Update contact\n     *\n     * @param id\n     * @param contact\n     */\n    updateContact(id: string, contact: Contact): Observable<Contact> {\n        return this.contacts$.pipe(\n            take(1),\n            switchMap((contacts) =>\n                this._httpClient\n                    .patch<Contact>('api/apps/contacts/contact', {\n                        id,\n                        contact,\n                    })\n                    .pipe(\n                        map((updatedContact) => {\n                            // Find the index of the updated contact\n                            const index = contacts.findIndex(\n                                (item) => item.id === id\n                            );\n\n                            // Update the contact\n                            contacts[index] = updatedContact;\n\n                            // Update the contacts\n                            this._contacts.next(contacts);\n\n                            // Return the updated contact\n                            return updatedContact;\n                        }),\n                        switchMap((updatedContact) =>\n                            this.contact$.pipe(\n                                take(1),\n                                filter((item) => item && item.id === id),\n                                tap(() => {\n                                    // Update the contact if it's selected\n                                    this._contact.next(updatedContact);\n\n                                    // Return the updated contact\n                                    return updatedContact;\n                                })\n                            )\n                        )\n                    )\n            )\n        );\n    }\n\n    /**\n     * Delete the contact\n     *\n     * @param id\n     */\n    deleteContact(id: string): Observable<boolean> {\n        return this.contacts$.pipe(\n            take(1),\n            switchMap((contacts) =>\n                this._httpClient\n                    .delete('api/apps/contacts/contact', { params: { id } })\n                    .pipe(\n                        map((isDeleted: boolean) => {\n                            // Find the index of the deleted contact\n                            const index = contacts.findIndex(\n                                (item) => item.id === id\n                            );\n\n                            // Delete the contact\n                            contacts.splice(index, 1);\n\n                            // Update the contacts\n                            this._contacts.next(contacts);\n\n                            // Return the deleted status\n                            return isDeleted;\n                        })\n                    )\n            )\n        );\n    }\n\n    /**\n     * Get countries\n     */\n    getCountries(): Observable<Country[]> {\n        return this._httpClient\n            .get<Country[]>('api/apps/contacts/countries')\n            .pipe(\n                tap((countries) => {\n                    this._countries.next(countries);\n                })\n            );\n    }\n\n    /**\n     * Get tags\n     */\n    getTags(): Observable<Tag[]> {\n        return this._httpClient.get<Tag[]>('api/apps/contacts/tags').pipe(\n            tap((tags) => {\n                this._tags.next(tags);\n            })\n        );\n    }\n\n    /**\n     * Create tag\n     *\n     * @param tag\n     */\n    createTag(tag: Tag): Observable<Tag> {\n        return this.tags$.pipe(\n            take(1),\n            switchMap((tags) =>\n                this._httpClient\n                    .post<Tag>('api/apps/contacts/tag', { tag })\n                    .pipe(\n                        map((newTag) => {\n                            // Update the tags with the new tag\n                            this._tags.next([...tags, newTag]);\n\n                            // Return new tag from observable\n                            return newTag;\n                        })\n                    )\n            )\n        );\n    }\n\n    /**\n     * Update the tag\n     *\n     * @param id\n     * @param tag\n     */\n    updateTag(id: string, tag: Tag): Observable<Tag> {\n        return this.tags$.pipe(\n            take(1),\n            switchMap((tags) =>\n                this._httpClient\n                    .patch<Tag>('api/apps/contacts/tag', {\n                        id,\n                        tag,\n                    })\n                    .pipe(\n                        map((updatedTag) => {\n                            // Find the index of the updated tag\n                            const index = tags.findIndex(\n                                (item) => item.id === id\n                            );\n\n                            // Update the tag\n                            tags[index] = updatedTag;\n\n                            // Update the tags\n                            this._tags.next(tags);\n\n                            // Return the updated tag\n                            return updatedTag;\n                        })\n                    )\n            )\n        );\n    }\n\n    /**\n     * Delete the tag\n     *\n     * @param id\n     */\n    deleteTag(id: string): Observable<boolean> {\n        return this.tags$.pipe(\n            take(1),\n            switchMap((tags) =>\n                this._httpClient\n                    .delete('api/apps/contacts/tag', { params: { id } })\n                    .pipe(\n                        map((isDeleted: boolean) => {\n                            // Find the index of the deleted tag\n                            const index = tags.findIndex(\n                                (item) => item.id === id\n                            );\n\n                            // Delete the tag\n                            tags.splice(index, 1);\n\n                            // Update the tags\n                            this._tags.next(tags);\n\n                            // Return the deleted status\n                            return isDeleted;\n                        }),\n                        filter((isDeleted) => isDeleted),\n                        switchMap((isDeleted) =>\n                            this.contacts$.pipe(\n                                take(1),\n                                map((contacts) => {\n                                    // Iterate through the contacts\n                                    contacts.forEach((contact) => {\n                                        const tagIndex = contact.tags.findIndex(\n                                            (tag) => tag === id\n                                        );\n\n                                        // If the contact has the tag, remove it\n                                        if (tagIndex > -1) {\n                                            contact.tags.splice(tagIndex, 1);\n                                        }\n                                    });\n\n                                    // Return the deleted status\n                                    return isDeleted;\n                                })\n                            )\n                        )\n                    )\n            )\n        );\n    }\n\n    /**\n     * Update the avatar of the given contact\n     *\n     * @param id\n     * @param avatar\n     */\n    uploadAvatar(id: string, avatar: File): Observable<Contact> {\n        return this.contacts$.pipe(\n            take(1),\n            switchMap((contacts) =>\n                this._httpClient\n                    .post<Contact>(\n                        'api/apps/contacts/avatar',\n                        {\n                            id,\n                            avatar,\n                        },\n                        {\n                            headers: {\n                                // eslint-disable-next-line @typescript-eslint/naming-convention\n                                'Content-Type': avatar.type,\n                            },\n                        }\n                    )\n                    .pipe(\n                        map((updatedContact) => {\n                            // Find the index of the updated contact\n                            const index = contacts.findIndex(\n                                (item) => item.id === id\n                            );\n\n                            // Update the contact\n                            contacts[index] = updatedContact;\n\n                            // Update the contacts\n                            this._contacts.next(contacts);\n\n                            // Return the updated contact\n                            return updatedContact;\n                        }),\n                        switchMap((updatedContact) =>\n                            this.contact$.pipe(\n                                take(1),\n                                filter((item) => item && item.id === id),\n                                tap(() => {\n                                    // Update the contact if it's selected\n                                    this._contact.next(updatedContact);\n\n                                    // Return the updated contact\n                                    return updatedContact;\n                                })\n                            )\n                        )\n                    )\n            )\n        );\n    }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Finds an object from given source using the given key - value pairs\n */\n@Pipe({\n    name: 'fuseFindByKey',\n    pure: false,\n    standalone: true,\n})\nexport class FuseFindByKeyPipe implements PipeTransform {\n    /**\n     * Transform\n     *\n     * @param value A string or an array of strings to find from source\n     * @param key Key of the object property to look for\n     * @param source Array of objects to find from\n     */\n    transform(value: string | string[], key: string, source: any[]): any {\n        // If the given value is an array of strings...\n        if (Array.isArray(value)) {\n            return value.map((item) =>\n                source.find((sourceItem) => sourceItem[key] === item)\n            );\n        }\n\n        // If the value is a string...\n        return source.find((sourceItem) => sourceItem[key] === value);\n    }\n}\n", "import { AsyncPipe, DOCUMENT, I18nPluralPipe, NgClass } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n    ViewEncapsulation,\n} from '@angular/core';\nimport {\n    FormsModule,\n    ReactiveFormsModule,\n    UntypedFormControl,\n} from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatDrawer, MatSidenavModule } from '@angular/material/sidenav';\nimport {\n    ActivatedRoute,\n    Router,\n    RouterLink,\n    RouterOutlet,\n} from '@angular/router';\nimport { FuseMediaWatcherService } from '@fuse/services/media-watcher';\nimport { ContactsService } from 'app/pages/crm/breeders/contacts.service';\nimport {\n    Contact,\n    Country,\n} from 'app/pages/crm/breeders/contacts.types';\nimport {\n    Observable,\n    Subject,\n    filter,\n    fromEvent,\n    switchMap,\n    takeUntil,\n} from 'rxjs';\n\n@Component({\n    selector: 'contacts-list',\n    templateUrl: './list.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports: [\n        MatSidenavModule,\n        RouterOutlet,\n        MatFormFieldModule,\n        MatIconModule,\n        MatInputModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        NgClass,\n        RouterLink,\n        AsyncPipe,\n        I18nPluralPipe,\n    ],\n})\nexport class ContactsListComponent implements OnInit, OnDestroy {\n    @ViewChild('matDrawer', { static: true }) matDrawer: MatDrawer;\n\n    contacts$: Observable<Contact[]>;\n\n    contactsCount: number = 0;\n    contactsTableColumns: string[] = ['name', 'email', 'phoneNumber', 'job'];\n    countries: Country[];\n    drawerMode: 'side' | 'over';\n    searchInputControl: UntypedFormControl = new UntypedFormControl();\n    selectedContact: Contact;\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _contactsService: ContactsService,\n        @Inject(DOCUMENT) private _document: any,\n        private _router: Router,\n        private _fuseMediaWatcherService: FuseMediaWatcherService\n    ) {}\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void {\n        // Get the contacts\n        this.contacts$ = this._contactsService.contacts$;\n        this._contactsService.contacts$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((contacts: Contact[]) => {\n                // Update the counts\n                this.contactsCount = contacts.length;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Get the contact\n        this._contactsService.contact$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((contact: Contact) => {\n                // Update the selected contact\n                this.selectedContact = contact;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Get the countries\n        this._contactsService.countries$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((countries: Country[]) => {\n                // Update the countries\n                this.countries = countries;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Subscribe to search input field value changes\n        this.searchInputControl.valueChanges\n            .pipe(\n                takeUntil(this._unsubscribeAll),\n                switchMap((query) =>\n                    // Search\n                    this._contactsService.searchContacts(query)\n                )\n            )\n            .subscribe();\n\n        // Subscribe to MatDrawer opened change\n        this.matDrawer.openedChange.subscribe((opened) => {\n            if (!opened) {\n                // Remove the selected contact when drawer closed\n                this.selectedContact = null;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n\n        // Subscribe to media changes\n        this._fuseMediaWatcherService.onMediaChange$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(({ matchingAliases }) => {\n                // Set the drawerMode if the given breakpoint is active\n                if (matchingAliases.includes('lg')) {\n                    this.drawerMode = 'side';\n                } else {\n                    this.drawerMode = 'over';\n                }\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Listen for shortcuts\n        fromEvent(this._document, 'keydown')\n            .pipe(\n                takeUntil(this._unsubscribeAll),\n                filter<KeyboardEvent>(\n                    (event) =>\n                        (event.ctrlKey === true || event.metaKey) && // Ctrl or Cmd\n                        event.key === '/' // '/'\n                )\n            )\n            .subscribe(() => {\n                this.createContact();\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next(null);\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On backdrop clicked\n     */\n    onBackdropClicked(): void {\n        // Go back to the list\n        this._router.navigate(['./'], { relativeTo: this._activatedRoute });\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Create contact\n     */\n    createContact(): void {\n        // Create the contact\n        this._contactsService.createContact().subscribe((newContact) => {\n            // Go to the new contact\n            this._router.navigate(['./', newContact.id], {\n                relativeTo: this._activatedRoute,\n            });\n\n            // Mark for check\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    /**\n     * Track by function for ngFor loops\n     *\n     * @param index\n     * @param item\n     */\n    trackByFn(index: number, item: any): any {\n        return item.id || index;\n    }\n}\n", "<div class=\"absolute inset-0 flex min-w-0 flex-col overflow-hidden\">\n    <mat-drawer-container\n        class=\"bg-card h-full flex-auto dark:bg-transparent\"\n        (backdropClick)=\"onBackdropClicked()\"\n    >\n        <!-- Drawer -->\n        <mat-drawer\n            class=\"w-full dark:bg-gray-900 md:w-160\"\n            [mode]=\"drawerMode\"\n            [opened]=\"false\"\n            [position]=\"'end'\"\n            [disableClose]=\"true\"\n            #matDrawer\n        >\n            <router-outlet></router-outlet>\n        </mat-drawer>\n\n        <mat-drawer-content class=\"flex flex-col\">\n            <!-- Main -->\n            <div class=\"flex-auto\">\n                <!-- Header -->\n                <div\n                    class=\"flex flex-auto flex-col justify-between border-b px-6 py-8 sm:flex-row md:flex-col md:px-8\"\n                >\n                    <!-- Title -->\n                    <div>\n                        <div\n                            class=\"text-4xl font-extrabold leading-none tracking-tight\"\n                        >\n                            Breeders\n                        </div>\n                        <div class=\"text-secondary ml-0.5 font-medium\">\n                            @if (contactsCount > 0) {\n                                {{ contactsCount }}\n                            }\n                            {{\n                                contactsCount\n                                    | i18nPlural\n                                        : {\n                                              '=0': 'No breeders',\n                                              '=1': 'breeder',\n                                              other: 'breeders',\n                                          }\n                            }}\n                        </div>\n                    </div>\n\n                    <!-- Main actions -->\n                    <div class=\"mt-4 flex items-center sm:mt-0 md:mt-4\">\n                        <!-- Search -->\n                        <div class=\"flex-auto\">\n                            <mat-form-field\n                                class=\"fuse-mat-dense fuse-mat-rounded w-full min-w-50\"\n                                subscriptSizing=\"dynamic\"\n                            >\n                                <mat-icon\n                                    class=\"icon-size-5\"\n                                    matPrefix\n                                    [svgIcon]=\"\n                                        'heroicons_solid:magnifying-glass'\n                                    \"\n                                ></mat-icon>\n                                <input\n                                    matInput\n                                    [formControl]=\"searchInputControl\"\n                                    [autocomplete]=\"'off'\"\n                                    [placeholder]=\"'Search breeders'\"\n                                />\n                            </mat-form-field>\n                        </div>\n                        <!-- Add contact button -->\n                        <button\n                            class=\"ml-4\"\n                            mat-flat-button\n                            [color]=\"'primary'\"\n                            (click)=\"createContact()\"\n                        >\n                            <mat-icon\n                                [svgIcon]=\"'heroicons_outline:plus'\"\n                            ></mat-icon>\n                            <span class=\"ml-2 mr-1\">Add</span>\n                        </button>\n                    </div>\n                </div>\n\n                <!-- Contacts list -->\n                <div class=\"relative\">\n                    @if (contacts$ | async; as contacts) {\n                        @if (contacts.length) {\n                            @for (\n                                contact of contacts;\n                                track trackByFn(i, contact);\n                                let i = $index\n                            ) {\n                                <!-- Group -->\n                                @if (\n                                    i === 0 ||\n                                    contact.name.charAt(0) !==\n                                        contacts[i - 1].name.charAt(0)\n                                ) {\n                                    <div\n                                        class=\"text-secondary sticky top-0 z-10 -mt-px border-b border-t bg-gray-50 px-6 py-1 font-medium uppercase dark:bg-gray-900 md:px-8\"\n                                    >\n                                        {{ contact.name.charAt(0) }}\n                                    </div>\n                                }\n                                <!-- Contact -->\n                                <a\n                                    class=\"z-20 flex cursor-pointer items-center border-b px-6 py-4 md:px-8\"\n                                    [ngClass]=\"{\n                                        'dark:hover:bg-hover hover:bg-gray-100':\n                                            !selectedContact ||\n                                            selectedContact.id !== contact.id,\n                                        'bg-primary-50 dark:bg-hover':\n                                            selectedContact &&\n                                            selectedContact.id === contact.id,\n                                    }\"\n                                    [routerLink]=\"['./', contact.id]\"\n                                >\n                                    <div\n                                        class=\"flex h-10 w-10 flex-0 items-center justify-center overflow-hidden rounded-full\"\n                                    >\n                                        @if (contact.avatar) {\n                                            <img\n                                                class=\"h-full w-full object-cover\"\n                                                [src]=\"contact.avatar\"\n                                                alt=\"Contact avatar\"\n                                            />\n                                        }\n                                        @if (!contact.avatar) {\n                                            <div\n                                                class=\"flex h-full w-full items-center justify-center rounded-full bg-gray-200 text-lg uppercase text-gray-600 dark:bg-gray-700 dark:text-gray-200\"\n                                            >\n                                                {{ contact.name.charAt(0) }}\n                                            </div>\n                                        }\n                                    </div>\n                                    <div class=\"ml-4 min-w-0\">\n                                        <div\n                                            class=\"truncate font-medium leading-5\"\n                                        >\n                                            {{ contact.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-secondary truncate leading-5\"\n                                        >\n                                            {{ contact.title }}\n                                        </div>\n                                    </div>\n                                </a>\n                            }\n                        } @else {\n                            <div\n                                class=\"border-t p-8 text-center text-4xl font-semibold tracking-tight sm:p-16\"\n                            >\n                                There are no contacts!\n                            </div>\n                        }\n                    }\n\n                    <!-- No contacts -->\n                </div>\n            </div>\n        </mat-drawer-content>\n    </mat-drawer-container>\n</div>\n", "import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport { DatePipe, NgClass } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    OnDestroy,\n    OnInit,\n    Renderer2,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation,\n} from '@angular/core';\nimport {\n    FormsModule,\n    ReactiveFormsModule,\n    UntypedFormArray,\n    UntypedFormBuilder,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatOptionModule, MatRippleModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDrawerToggleResult } from '@angular/material/sidenav';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { FuseFindByKeyPipe } from '@fuse/pipes/find-by-key/find-by-key.pipe';\nimport { FuseConfirmationService } from '@fuse/services/confirmation';\nimport { ContactsService } from 'app/pages/crm/breeders/contacts.service';\nimport {\n    Contact,\n    Country,\n    Tag,\n} from 'app/pages/crm/breeders/contacts.types';\nimport { ContactsListComponent } from 'app/pages/crm/breeders/list/list.component';\nimport { Subject, debounceTime, takeUntil } from 'rxjs';\n\n@Component({\n    selector: 'contacts-details',\n    templateUrl: './details.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports: [\n        MatButtonModule,\n        MatTooltipModule,\n        MatIconModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatRippleModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatCheckboxModule,\n        NgClass,\n        MatSelectModule,\n        MatOptionModule,\n        MatDatepickerModule,\n        TextFieldModule,\n        FuseFindByKeyPipe,\n        DatePipe,\n    ],\n})\nexport class ContactsDetailsComponent implements OnInit, OnDestroy {\n    @ViewChild('avatarFileInput') private _avatarFileInput: ElementRef;\n    @ViewChild('tagsPanel') private _tagsPanel: TemplateRef<any>;\n    @ViewChild('tagsPanelOrigin') private _tagsPanelOrigin: ElementRef;\n\n    editMode: boolean = false;\n    tags: Tag[];\n    tagsEditMode: boolean = false;\n    filteredTags: Tag[];\n    contact: Contact;\n    contactForm: UntypedFormGroup;\n    contacts: Contact[];\n    countries: Country[];\n    private _tagsPanelOverlayRef: OverlayRef;\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _contactsListComponent: ContactsListComponent,\n        private _contactsService: ContactsService,\n        private _formBuilder: UntypedFormBuilder,\n        private _fuseConfirmationService: FuseConfirmationService,\n        private _renderer2: Renderer2,\n        private _router: Router,\n        private _overlay: Overlay,\n        private _viewContainerRef: ViewContainerRef\n    ) {}\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void {\n        // Open the drawer\n        this._contactsListComponent.matDrawer.open();\n\n        // Create the contact form\n        this.contactForm = this._formBuilder.group({\n            id: [''],\n            avatar: [null],\n            name: ['', [Validators.required]],\n            emails: this._formBuilder.array([]),\n            phoneNumbers: this._formBuilder.array([]),\n            title: [''],\n            company: [''],\n            birthday: [null],\n            address: [null],\n            notes: [null],\n            tags: [[]],\n        });\n\n        // Get the contacts\n        this._contactsService.contacts$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((contacts: Contact[]) => {\n                this.contacts = contacts;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Get the contact\n        this._contactsService.contact$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((contact: Contact) => {\n                // Open the drawer in case it is closed\n                this._contactsListComponent.matDrawer.open();\n\n                // Get the contact\n                this.contact = contact;\n\n                // Clear the emails and phoneNumbers form arrays\n                (this.contactForm.get('emails') as UntypedFormArray).clear();\n                (\n                    this.contactForm.get('phoneNumbers') as UntypedFormArray\n                ).clear();\n\n                // Patch values to the form\n                this.contactForm.patchValue(contact);\n\n                // Setup the emails form array\n                const emailFormGroups = [];\n\n                if (contact.emails.length > 0) {\n                    // Iterate through them\n                    contact.emails.forEach((email) => {\n                        // Create an email form group\n                        emailFormGroups.push(\n                            this._formBuilder.group({\n                                email: [email.email],\n                                label: [email.label],\n                            })\n                        );\n                    });\n                } else {\n                    // Create an email form group\n                    emailFormGroups.push(\n                        this._formBuilder.group({\n                            email: [''],\n                            label: [''],\n                        })\n                    );\n                }\n\n                // Add the email form groups to the emails form array\n                emailFormGroups.forEach((emailFormGroup) => {\n                    (this.contactForm.get('emails') as UntypedFormArray).push(\n                        emailFormGroup\n                    );\n                });\n\n                // Setup the phone numbers form array\n                const phoneNumbersFormGroups = [];\n\n                if (contact.phoneNumbers.length > 0) {\n                    // Iterate through them\n                    contact.phoneNumbers.forEach((phoneNumber) => {\n                        // Create an email form group\n                        phoneNumbersFormGroups.push(\n                            this._formBuilder.group({\n                                country: [phoneNumber.country],\n                                phoneNumber: [phoneNumber.phoneNumber],\n                                label: [phoneNumber.label],\n                            })\n                        );\n                    });\n                } else {\n                    // Create a phone number form group\n                    phoneNumbersFormGroups.push(\n                        this._formBuilder.group({\n                            country: ['us'],\n                            phoneNumber: [''],\n                            label: [''],\n                        })\n                    );\n                }\n\n                // Add the phone numbers form groups to the phone numbers form array\n                phoneNumbersFormGroups.forEach((phoneNumbersFormGroup) => {\n                    (\n                        this.contactForm.get('phoneNumbers') as UntypedFormArray\n                    ).push(phoneNumbersFormGroup);\n                });\n\n                // Toggle the edit mode off\n                this.toggleEditMode(false);\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Get the country telephone codes\n        this._contactsService.countries$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((codes: Country[]) => {\n                this.countries = codes;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Get the tags\n        this._contactsService.tags$\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((tags: Tag[]) => {\n                this.tags = tags;\n                this.filteredTags = tags;\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next(null);\n        this._unsubscribeAll.complete();\n\n        // Dispose the overlays if they are still on the DOM\n        if (this._tagsPanelOverlayRef) {\n            this._tagsPanelOverlayRef.dispose();\n        }\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Close the drawer\n     */\n    closeDrawer(): Promise<MatDrawerToggleResult> {\n        return this._contactsListComponent.matDrawer.close();\n    }\n\n    /**\n     * Toggle edit mode\n     *\n     * @param editMode\n     */\n    toggleEditMode(editMode: boolean | null = null): void {\n        if (editMode === null) {\n            this.editMode = !this.editMode;\n        } else {\n            this.editMode = editMode;\n        }\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Update the contact\n     */\n    updateContact(): void {\n        // Get the contact object\n        const contact = this.contactForm.getRawValue();\n\n        // Go through the contact object and clear empty values\n        contact.emails = contact.emails.filter((email) => email.email);\n\n        contact.phoneNumbers = contact.phoneNumbers.filter(\n            (phoneNumber) => phoneNumber.phoneNumber\n        );\n\n        // Update the contact on the server\n        this._contactsService\n            .updateContact(contact.id, contact)\n            .subscribe(() => {\n                // Toggle the edit mode off\n                this.toggleEditMode(false);\n            });\n    }\n\n    /**\n     * Delete the contact\n     */\n    deleteContact(): void {\n        // Open the confirmation dialog\n        const confirmation = this._fuseConfirmationService.open({\n            title: 'Delete contact',\n            message:\n                'Are you sure you want to delete this contact? This action cannot be undone!',\n            actions: {\n                confirm: {\n                    label: 'Delete',\n                },\n            },\n        });\n\n        // Subscribe to the confirmation dialog closed action\n        confirmation.afterClosed().subscribe((result) => {\n            // If the confirm button pressed...\n            if (result === 'confirmed') {\n                // Get the current contact's id\n                const id = this.contact.id;\n\n                // Get the next/previous contact's id\n                const currentContactIndex = this.contacts.findIndex(\n                    (item) => item.id === id\n                );\n                const nextContactIndex =\n                    currentContactIndex +\n                    (currentContactIndex === this.contacts.length - 1 ? -1 : 1);\n                const nextContactId =\n                    this.contacts.length === 1 && this.contacts[0].id === id\n                        ? null\n                        : this.contacts[nextContactIndex].id;\n\n                // Delete the contact\n                this._contactsService\n                    .deleteContact(id)\n                    .subscribe((isDeleted) => {\n                        // Return if the contact wasn't deleted...\n                        if (!isDeleted) {\n                            return;\n                        }\n\n                        // Navigate to the next contact if available\n                        if (nextContactId) {\n                            this._router.navigate(['../', nextContactId], {\n                                relativeTo: this._activatedRoute,\n                            });\n                        }\n                        // Otherwise, navigate to the parent\n                        else {\n                            this._router.navigate(['../'], {\n                                relativeTo: this._activatedRoute,\n                            });\n                        }\n\n                        // Toggle the edit mode off\n                        this.toggleEditMode(false);\n                    });\n\n                // Mark for check\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n\n    /**\n     * Upload avatar\n     *\n     * @param fileList\n     */\n    uploadAvatar(fileList: FileList): void {\n        // Return if canceled\n        if (!fileList.length) {\n            return;\n        }\n\n        const allowedTypes = ['image/jpeg', 'image/png'];\n        const file = fileList[0];\n\n        // Return if the file is not allowed\n        if (!allowedTypes.includes(file.type)) {\n            return;\n        }\n\n        // Upload the avatar\n        this._contactsService.uploadAvatar(this.contact.id, file).subscribe();\n    }\n\n    /**\n     * Remove the avatar\n     */\n    removeAvatar(): void {\n        // Get the form control for 'avatar'\n        const avatarFormControl = this.contactForm.get('avatar');\n\n        // Set the avatar as null\n        avatarFormControl.setValue(null);\n\n        // Set the file input value as null\n        this._avatarFileInput.nativeElement.value = null;\n\n        // Update the contact\n        this.contact.avatar = null;\n    }\n\n    /**\n     * Open tags panel\n     */\n    openTagsPanel(): void {\n        // Create the overlay\n        this._tagsPanelOverlayRef = this._overlay.create({\n            backdropClass: '',\n            hasBackdrop: true,\n            scrollStrategy: this._overlay.scrollStrategies.block(),\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._tagsPanelOrigin.nativeElement)\n                .withFlexibleDimensions(true)\n                .withViewportMargin(64)\n                .withLockedPosition(true)\n                .withPositions([\n                    {\n                        originX: 'start',\n                        originY: 'bottom',\n                        overlayX: 'start',\n                        overlayY: 'top',\n                    },\n                ]),\n        });\n\n        // Subscribe to the attachments observable\n        this._tagsPanelOverlayRef.attachments().subscribe(() => {\n            // Add a class to the origin\n            this._renderer2.addClass(\n                this._tagsPanelOrigin.nativeElement,\n                'panel-opened'\n            );\n\n            // Focus to the search input once the overlay has been attached\n            this._tagsPanelOverlayRef.overlayElement\n                .querySelector('input')\n                .focus();\n        });\n\n        // Create a portal from the template\n        const templatePortal = new TemplatePortal(\n            this._tagsPanel,\n            this._viewContainerRef\n        );\n\n        // Attach the portal to the overlay\n        this._tagsPanelOverlayRef.attach(templatePortal);\n\n        // Subscribe to the backdrop click\n        this._tagsPanelOverlayRef.backdropClick().subscribe(() => {\n            // Remove the class from the origin\n            this._renderer2.removeClass(\n                this._tagsPanelOrigin.nativeElement,\n                'panel-opened'\n            );\n\n            // If overlay exists and attached...\n            if (\n                this._tagsPanelOverlayRef &&\n                this._tagsPanelOverlayRef.hasAttached()\n            ) {\n                // Detach it\n                this._tagsPanelOverlayRef.detach();\n\n                // Reset the tag filter\n                this.filteredTags = this.tags;\n\n                // Toggle the edit mode off\n                this.tagsEditMode = false;\n            }\n\n            // If template portal exists and attached...\n            if (templatePortal && templatePortal.isAttached) {\n                // Detach it\n                templatePortal.detach();\n            }\n        });\n    }\n\n    /**\n     * Toggle the tags edit mode\n     */\n    toggleTagsEditMode(): void {\n        this.tagsEditMode = !this.tagsEditMode;\n    }\n\n    /**\n     * Filter tags\n     *\n     * @param event\n     */\n    filterTags(event): void {\n        // Get the value\n        const value = event.target.value.toLowerCase();\n\n        // Filter the tags\n        this.filteredTags = this.tags.filter((tag) =>\n            tag.title.toLowerCase().includes(value)\n        );\n    }\n\n    /**\n     * Filter tags input key down event\n     *\n     * @param event\n     */\n    filterTagsInputKeyDown(event): void {\n        // Return if the pressed key is not 'Enter'\n        if (event.key !== 'Enter') {\n            return;\n        }\n\n        // If there is no tag available...\n        if (this.filteredTags.length === 0) {\n            // Create the tag\n            this.createTag(event.target.value);\n\n            // Clear the input\n            event.target.value = '';\n\n            // Return\n            return;\n        }\n\n        // If there is a tag...\n        const tag = this.filteredTags[0];\n        const isTagApplied = this.contact.tags.find((id) => id === tag.id);\n\n        // If the found tag is already applied to the contact...\n        if (isTagApplied) {\n            // Remove the tag from the contact\n            this.removeTagFromContact(tag);\n        } else {\n            // Otherwise add the tag to the contact\n            this.addTagToContact(tag);\n        }\n    }\n\n    /**\n     * Create a new tag\n     *\n     * @param title\n     */\n    createTag(title: string): void {\n        const tag = {\n            title,\n        };\n\n        // Create tag on the server\n        this._contactsService.createTag(tag).subscribe((response) => {\n            // Add the tag to the contact\n            this.addTagToContact(response);\n        });\n    }\n\n    /**\n     * Update the tag title\n     *\n     * @param tag\n     * @param event\n     */\n    updateTagTitle(tag: Tag, event): void {\n        // Update the title on the tag\n        tag.title = event.target.value;\n\n        // Update the tag on the server\n        this._contactsService\n            .updateTag(tag.id, tag)\n            .pipe(debounceTime(300))\n            .subscribe();\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Delete the tag\n     *\n     * @param tag\n     */\n    deleteTag(tag: Tag): void {\n        // Delete the tag from the server\n        this._contactsService.deleteTag(tag.id).subscribe();\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Add tag to the contact\n     *\n     * @param tag\n     */\n    addTagToContact(tag: Tag): void {\n        // Add the tag\n        this.contact.tags.unshift(tag.id);\n\n        // Update the contact form\n        this.contactForm.get('tags').patchValue(this.contact.tags);\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Remove tag from the contact\n     *\n     * @param tag\n     */\n    removeTagFromContact(tag: Tag): void {\n        // Remove the tag\n        this.contact.tags.splice(\n            this.contact.tags.findIndex((item) => item === tag.id),\n            1\n        );\n\n        // Update the contact form\n        this.contactForm.get('tags').patchValue(this.contact.tags);\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Toggle contact tag\n     *\n     * @param tag\n     */\n    toggleContactTag(tag: Tag): void {\n        if (this.contact.tags.includes(tag.id)) {\n            this.removeTagFromContact(tag);\n        } else {\n            this.addTagToContact(tag);\n        }\n    }\n\n    /**\n     * Should the create tag button be visible\n     *\n     * @param inputValue\n     */\n    shouldShowCreateTagButton(inputValue: string): boolean {\n        return !!!(\n            inputValue === '' ||\n            this.tags.findIndex(\n                (tag) => tag.title.toLowerCase() === inputValue.toLowerCase()\n            ) > -1\n        );\n    }\n\n    /**\n     * Add the email field\n     */\n    addEmailField(): void {\n        // Create an empty email form group\n        const emailFormGroup = this._formBuilder.group({\n            email: [''],\n            label: [''],\n        });\n\n        // Add the email form group to the emails form array\n        (this.contactForm.get('emails') as UntypedFormArray).push(\n            emailFormGroup\n        );\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Remove the email field\n     *\n     * @param index\n     */\n    removeEmailField(index: number): void {\n        // Get form array for emails\n        const emailsFormArray = this.contactForm.get(\n            'emails'\n        ) as UntypedFormArray;\n\n        // Remove the email field\n        emailsFormArray.removeAt(index);\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Add an empty phone number field\n     */\n    addPhoneNumberField(): void {\n        // Create an empty phone number form group\n        const phoneNumberFormGroup = this._formBuilder.group({\n            country: ['us'],\n            phoneNumber: [''],\n            label: [''],\n        });\n\n        // Add the phone number form group to the phoneNumbers form array\n        (this.contactForm.get('phoneNumbers') as UntypedFormArray).push(\n            phoneNumberFormGroup\n        );\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Remove the phone number field\n     *\n     * @param index\n     */\n    removePhoneNumberField(index: number): void {\n        // Get form array for phone numbers\n        const phoneNumbersFormArray = this.contactForm.get(\n            'phoneNumbers'\n        ) as UntypedFormArray;\n\n        // Remove the phone number field\n        phoneNumbersFormArray.removeAt(index);\n\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Get country info by iso code\n     *\n     * @param iso\n     */\n    getCountryByIso(iso: string): Country {\n        return this.countries.find((country) => country.iso === iso);\n    }\n\n    /**\n     * Track by function for ngFor loops\n     *\n     * @param index\n     * @param item\n     */\n    trackByFn(index: number, item: any): any {\n        return item.id || index;\n    }\n}\n", "<div class=\"flex w-full flex-col\">\n    <!-- View mode -->\n    @if (!editMode) {\n        <!-- Header -->\n        <div\n            class=\"relative h-40 w-full bg-primary-800 px-8 sm:h-48 sm:px-12\"\n        >\n            <!-- Background -->\n            <!-- @if (contact.background) {\n                <img\n                    class=\"absolute inset-0 h-full w-full object-cover\"\n                    [src]=\"contact.background\"\n                />\n            } -->\n            <!-- Close button -->\n            <div\n                class=\"mx-auto flex w-full max-w-3xl items-center justify-end pt-6\"\n            >\n                <a\n                    mat-icon-button\n                    [matTooltip]=\"'Close'\"\n                    (click)=\"closeDrawer()\"\n                >\n                    <mat-icon\n                        class=\"text-white\"\n                        [svgIcon]=\"'heroicons_outline:x-mark'\"\n                    ></mat-icon>\n                </a>\n            </div>\n        </div>\n\n        <!-- Contact -->\n        <div\n            class=\"relative flex flex-auto flex-col items-center p-6 pt-0 sm:p-12 sm:pt-0\"\n        >\n            <div class=\"w-full max-w-3xl\">\n                <!-- Avatar and actions -->\n                <div class=\"-mt-16 flex flex-auto items-end\">\n                    <!-- Avatar -->\n                    <div\n                        class=\"ring-bg-card flex h-32 w-32 items-center justify-center overflow-hidden rounded-full ring-4\"\n                    >\n                        @if (contact.avatar) {\n                            <img\n                                class=\"h-full w-full object-cover\"\n                                [src]=\"contact.avatar\"\n                            />\n                        }\n                        @if (!contact.avatar) {\n                            <div\n                                class=\"flex h-full w-full items-center justify-center overflow-hidden rounded bg-gray-200 text-8xl font-bold uppercase leading-none text-gray-600 dark:bg-gray-700 dark:text-gray-200\"\n                            >\n                                {{ contact.name.charAt(0) }}\n                            </div>\n                        }\n                    </div>\n                    <!-- Actions -->\n                    <div class=\"mb-1 ml-auto flex items-center\">\n                        <button\n                            mat-stroked-button\n                            (click)=\"toggleEditMode(true)\"\n                        >\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:pencil-square'\"\n                            ></mat-icon>\n                            <span class=\"ml-2\">Edit</span>\n                        </button>\n                    </div>\n                </div>\n\n                <!-- Name -->\n                <div class=\"mt-3 truncate text-4xl font-bold\">\n                    {{ contact.name }}\n                </div>\n\n                <!-- Tags -->\n                @if (contact.tags.length) {\n                    <div class=\"mt-2 flex flex-wrap items-center\">\n                        <!-- Tag -->\n                        @for (\n                            tag of contact.tags | fuseFindByKey: 'id' : tags;\n                            track trackByFn($index, tag)\n                        ) {\n                            <div\n                                class=\"mb-3 mr-3 flex items-center justify-center rounded-full bg-gray-100 px-3 py-1 leading-normal text-gray-500 dark:bg-gray-700 dark:text-gray-300\"\n                            >\n                                <span\n                                    class=\"whitespace-nowrap text-sm font-medium\"\n                                    >{{ tag.title }}</span\n                                >\n                            </div>\n                        }\n                    </div>\n                }\n\n                <div class=\"mt-4 flex flex-col space-y-8 border-t pt-6\">\n                    <!-- Title -->\n                    @if (contact.title) {\n                        <div class=\"flex sm:items-center\">\n                            <mat-icon\n                                [svgIcon]=\"'heroicons_outline:briefcase'\"\n                            ></mat-icon>\n                            <div class=\"ml-6 leading-6\">\n                                {{ contact.title }}\n                            </div>\n                        </div>\n                    }\n\n                    <!-- Company -->\n                    @if (contact.company) {\n                        <div class=\"flex sm:items-center\">\n                            <mat-icon\n                                [svgIcon]=\"\n                                    'heroicons_outline:building-office-2'\n                                \"\n                            ></mat-icon>\n                            <div class=\"ml-6 leading-6\">\n                                {{ contact.company }}\n                            </div>\n                        </div>\n                    }\n\n                    <!-- Emails -->\n                    @if (contact.emails.length) {\n                        <div class=\"flex\">\n                            <mat-icon\n                                [svgIcon]=\"'heroicons_outline:envelope'\"\n                            ></mat-icon>\n                            <div class=\"ml-6 min-w-0 space-y-1\">\n                                @for (\n                                    email of contact.emails;\n                                    track trackByFn($index, email)\n                                ) {\n                                    <div class=\"flex items-center leading-6\">\n                                        <a\n                                            class=\"text-primary-500 hover:underline\"\n                                            [href]=\"'mailto:' + email.email\"\n                                            target=\"_blank\"\n                                        >\n                                            {{ email.email }}\n                                        </a>\n                                        @if (email.label) {\n                                            <div\n                                                class=\"text-secondary truncate text-md\"\n                                            >\n                                                <span class=\"mx-2\">&bull;</span>\n                                                <span class=\"font-medium\">{{\n                                                    email.label\n                                                }}</span>\n                                            </div>\n                                        }\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                    }\n\n                    <!-- Phone -->\n                    @if (contact.phoneNumbers.length) {\n                        <div class=\"flex\">\n                            <mat-icon\n                                [svgIcon]=\"'heroicons_outline:phone'\"\n                            ></mat-icon>\n                            <div class=\"ml-6 min-w-0 space-y-1\">\n                                @for (\n                                    phoneNumber of contact.phoneNumbers;\n                                    track trackByFn($index, phoneNumber)\n                                ) {\n                                    <div class=\"flex items-center leading-6\">\n                                        <div\n                                            class=\"hidden h-4 w-6 overflow-hidden sm:flex\"\n                                            [matTooltip]=\"\n                                                getCountryByIso(\n                                                    phoneNumber.country\n                                                ).name\n                                            \"\n                                            [style.background]=\"\n                                                'url(\\'/images/apps/contacts/flags.png\\') no-repeat 0 0'\n                                            \"\n                                            [style.backgroundSize]=\"\n                                                '24px 3876px'\n                                            \"\n                                            [style.backgroundPosition]=\"\n                                                getCountryByIso(\n                                                    phoneNumber.country\n                                                ).flagImagePos\n                                            \"\n                                        ></div>\n                                        <div class=\"font-mono sm:ml-3\">\n                                            {{\n                                                getCountryByIso(\n                                                    phoneNumber.country\n                                                ).code\n                                            }}\n                                        </div>\n                                        <div class=\"ml-2.5 font-mono\">\n                                            {{ phoneNumber.phoneNumber }}\n                                        </div>\n                                        @if (phoneNumber.label) {\n                                            <div\n                                                class=\"text-secondary truncate text-md\"\n                                            >\n                                                <span class=\"mx-2\">&bull;</span>\n                                                <span class=\"font-medium\">{{\n                                                    phoneNumber.label\n                                                }}</span>\n                                            </div>\n                                        }\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                    }\n\n                    <!-- Address -->\n                    @if (contact.address) {\n                        <div class=\"flex sm:items-center\">\n                            <mat-icon\n                                [svgIcon]=\"'heroicons_outline:map-pin'\"\n                            ></mat-icon>\n                            <div class=\"ml-6 leading-6\">\n                                {{ contact.address }}\n                            </div>\n                        </div>\n                    }\n\n                    <!-- Birthday -->\n                    @if (contact.birthday) {\n                        <div class=\"flex sm:items-center\">\n                            <mat-icon\n                                [svgIcon]=\"'heroicons_outline:cake'\"\n                            ></mat-icon>\n                            <div class=\"ml-6 leading-6\">\n                                {{ contact.birthday | date: 'longDate' }}\n                            </div>\n                        </div>\n                    }\n\n                    <!-- Notes -->\n                    @if (contact.notes) {\n                        <div class=\"flex\">\n                            <mat-icon\n                                [svgIcon]=\"\n                                    'heroicons_outline:bars-3-bottom-left'\n                                \"\n                            ></mat-icon>\n                            <div\n                                class=\"prose prose-sm ml-6 max-w-none\"\n                                [innerHTML]=\"contact.notes\"\n                            ></div>\n                        </div>\n                    }\n                </div>\n            </div>\n        </div>\n    }\n\n    <!-- Edit mode -->\n    @if (editMode) {\n        <!-- Header -->\n        <div\n            class=\"relative h-40 w-full bg-primary-800 px-8 dark:bg-accent-700 sm:h-48 sm:px-12\"\n        >\n            <!-- Background -->\n            <!--@if (contact.background) {\n                <img\n                    class=\"absolute inset-0 h-full w-full object-cover\"\n                    [src]=\"contact.background\"\n                />\n            } -->\n            <!-- Close button -->\n            <div\n                class=\"mx-auto flex w-full max-w-3xl items-center justify-end pt-6\"\n            >\n                <a\n                    mat-icon-button\n                    [matTooltip]=\"'Close'\"\n                    (click)=\"closeDrawer()\"\n                >\n                    <mat-icon\n                        class=\"text-white\"\n                        [svgIcon]=\"'heroicons_outline:x-mark'\"\n                    ></mat-icon>\n                </a>\n            </div>\n        </div>\n\n        <!-- Contact form -->\n        <div\n            class=\"relative flex flex-auto flex-col items-center px-6 sm:px-12\"\n        >\n            <div class=\"w-full max-w-3xl\">\n                <form [formGroup]=\"contactForm\">\n                    <!-- Avatar -->\n                    <div class=\"-mt-16 flex flex-auto items-end\">\n                        <div\n                            class=\"ring-bg-card relative flex h-32 w-32 items-center justify-center overflow-hidden rounded-full ring-4\"\n                        >\n                            <!-- Upload / Remove avatar -->\n                            <div\n                                class=\"absolute inset-0 z-10 bg-black bg-opacity-50\"\n                            ></div>\n                            <div\n                                class=\"absolute inset-0 z-20 flex items-center justify-center\"\n                            >\n                                <div>\n                                    <input\n                                        id=\"avatar-file-input\"\n                                        class=\"pointer-events-none invisible absolute h-0 w-0 opacity-0\"\n                                        type=\"file\"\n                                        [multiple]=\"false\"\n                                        [accept]=\"'image/jpeg, image/png'\"\n                                        (change)=\"\n                                            uploadAvatar(avatarFileInput.files)\n                                        \"\n                                        #avatarFileInput\n                                    />\n                                    <label\n                                        class=\"flex h-10 w-10 cursor-pointer items-center justify-center rounded-full hover:bg-hover\"\n                                        for=\"avatar-file-input\"\n                                        matRipple\n                                    >\n                                        <mat-icon\n                                            class=\"text-white\"\n                                            [svgIcon]=\"\n                                                'heroicons_outline:camera'\n                                            \"\n                                        ></mat-icon>\n                                    </label>\n                                </div>\n                                <div>\n                                    <button\n                                        mat-icon-button\n                                        (click)=\"removeAvatar()\"\n                                    >\n                                        <mat-icon\n                                            class=\"text-white\"\n                                            [svgIcon]=\"\n                                                'heroicons_outline:trash'\n                                            \"\n                                        ></mat-icon>\n                                    </button>\n                                </div>\n                            </div>\n                            <!-- Image/Letter -->\n                            @if (contact.avatar) {\n                                <img\n                                    class=\"h-full w-full object-cover\"\n                                    [src]=\"contact.avatar\"\n                                />\n                            }\n                            @if (!contact.avatar) {\n                                <div\n                                    class=\"flex h-full w-full items-center justify-center overflow-hidden rounded bg-gray-200 text-8xl font-bold uppercase leading-none text-gray-600 dark:bg-gray-700 dark:text-gray-200\"\n                                >\n                                    {{ contact.name.charAt(0) }}\n                                </div>\n                            }\n                        </div>\n                    </div>\n\n                    <!-- Name -->\n                    <div class=\"mt-8\">\n                        <mat-form-field\n                            class=\"w-full\"\n                            [subscriptSizing]=\"'dynamic'\"\n                        >\n                            <mat-label>Name</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:user-circle'\"\n                            ></mat-icon>\n                            <input\n                                matInput\n                                [formControlName]=\"'name'\"\n                                [placeholder]=\"'Name'\"\n                                [spellcheck]=\"false\"\n                            />\n                        </mat-form-field>\n                    </div>\n\n                    <!-- Tags -->\n                    <div class=\"-m-1.5 mt-6 flex flex-wrap items-center\">\n                        <!-- Tags -->\n                        @if (contact.tags.length) {\n                            @for (\n                                tag of contact.tags\n                                    | fuseFindByKey: 'id' : tags;\n                                track trackByFn($index, tag)\n                            ) {\n                                <div\n                                    class=\"m-1.5 flex items-center justify-center rounded-full bg-gray-100 px-4 leading-9 text-gray-500 dark:bg-gray-700 dark:text-gray-300\"\n                                >\n                                    <span\n                                        class=\"whitespace-nowrap text-md font-medium\"\n                                        >{{ tag.title }}</span\n                                    >\n                                </div>\n                            }\n                        }\n                        <!-- Tags panel and its button -->\n                        <div\n                            class=\"m-1.5 flex cursor-pointer items-center justify-center rounded-full bg-gray-100 px-4 leading-9 text-gray-500 dark:bg-gray-700 dark:text-gray-300\"\n                            (click)=\"openTagsPanel()\"\n                            #tagsPanelOrigin\n                        >\n                            @if (contact.tags.length) {\n                                <mat-icon\n                                    class=\"icon-size-5\"\n                                    [svgIcon]=\"'heroicons_solid:pencil-square'\"\n                                ></mat-icon>\n                                <span\n                                    class=\"ml-1.5 whitespace-nowrap text-md font-medium\"\n                                    >Edit</span\n                                >\n                            }\n\n                            @if (!contact.tags.length) {\n                                <mat-icon\n                                    class=\"icon-size-5\"\n                                    [svgIcon]=\"'heroicons_solid:plus-circle'\"\n                                ></mat-icon>\n                                <span\n                                    class=\"ml-1.5 whitespace-nowrap text-md font-medium\"\n                                    >Add</span\n                                >\n                            }\n\n                            <!-- Tags panel -->\n                            <ng-template #tagsPanel>\n                                <div\n                                    class=\"bg-card w-60 rounded border shadow-md\"\n                                >\n                                    <!-- Tags panel header -->\n                                    <div class=\"m-3 mr-2 flex items-center\">\n                                        <div class=\"flex items-center\">\n                                            <mat-icon\n                                                class=\"icon-size-5\"\n                                                [svgIcon]=\"\n                                                    'heroicons_solid:magnifying-glass'\n                                                \"\n                                            ></mat-icon>\n                                            <div class=\"ml-2\">\n                                                <input\n                                                    class=\"w-full min-w-0 border-0 py-1\"\n                                                    type=\"text\"\n                                                    placeholder=\"Enter tag name\"\n                                                    (input)=\"filterTags($event)\"\n                                                    (keydown)=\"\n                                                        filterTagsInputKeyDown(\n                                                            $event\n                                                        )\n                                                    \"\n                                                    [maxLength]=\"30\"\n                                                    #newTagInput\n                                                />\n                                            </div>\n                                        </div>\n                                        <button\n                                            class=\"ml-1\"\n                                            mat-icon-button\n                                            (click)=\"toggleTagsEditMode()\"\n                                        >\n                                            @if (!tagsEditMode) {\n                                                <mat-icon\n                                                    class=\"icon-size-5\"\n                                                    [svgIcon]=\"\n                                                        'heroicons_solid:pencil-square'\n                                                    \"\n                                                ></mat-icon>\n                                            }\n                                            @if (tagsEditMode) {\n                                                <mat-icon\n                                                    class=\"icon-size-5\"\n                                                    [svgIcon]=\"\n                                                        'heroicons_solid:check'\n                                                    \"\n                                                ></mat-icon>\n                                            }\n                                        </button>\n                                    </div>\n                                    <div\n                                        class=\"flex max-h-64 flex-col overflow-y-auto border-t py-2\"\n                                    >\n                                        <!-- Tags -->\n                                        @if (!tagsEditMode) {\n                                            @for (\n                                                tag of filteredTags;\n                                                track trackByFn($index, tag)\n                                            ) {\n                                                <div\n                                                    class=\"flex h-10 min-h-10 cursor-pointer items-center pl-1 pr-4 hover:bg-hover\"\n                                                    (click)=\"\n                                                        toggleContactTag(tag)\n                                                    \"\n                                                    matRipple\n                                                >\n                                                    <mat-checkbox\n                                                        class=\"pointer-events-none flex h-10 min-h-10 items-center\"\n                                                        [checked]=\"\n                                                            contact.tags.includes(\n                                                                tag.id\n                                                            )\n                                                        \"\n                                                        [color]=\"'primary'\"\n                                                        [disableRipple]=\"true\"\n                                                    >\n                                                    </mat-checkbox>\n                                                    <div>{{ tag.title }}</div>\n                                                </div>\n                                            }\n                                        }\n                                        <!-- Tags editing -->\n                                        @if (tagsEditMode) {\n                                            <div class=\"space-y-2 py-2\">\n                                                @for (\n                                                    tag of filteredTags;\n                                                    track trackByFn($index, tag)\n                                                ) {\n                                                    <div\n                                                        class=\"flex items-center\"\n                                                    >\n                                                        <mat-form-field\n                                                            class=\"fuse-mat-dense mx-4 w-full\"\n                                                            [subscriptSizing]=\"\n                                                                'dynamic'\n                                                            \"\n                                                        >\n                                                            <input\n                                                                matInput\n                                                                [value]=\"\n                                                                    tag.title\n                                                                \"\n                                                                (input)=\"\n                                                                    updateTagTitle(\n                                                                        tag,\n                                                                        $event\n                                                                    )\n                                                                \"\n                                                            />\n                                                            <button\n                                                                mat-icon-button\n                                                                (click)=\"\n                                                                    deleteTag(\n                                                                        tag\n                                                                    )\n                                                                \"\n                                                                matSuffix\n                                                            >\n                                                                <mat-icon\n                                                                    class=\"ml-2 icon-size-5\"\n                                                                    [svgIcon]=\"\n                                                                        'heroicons_solid:trash'\n                                                                    \"\n                                                                ></mat-icon>\n                                                            </button>\n                                                        </mat-form-field>\n                                                    </div>\n                                                }\n                                            </div>\n                                        }\n                                        <!-- Create tag -->\n                                        @if (\n                                            shouldShowCreateTagButton(\n                                                newTagInput.value\n                                            )\n                                        ) {\n                                            <div\n                                                class=\"-ml-0.5 flex h-10 min-h-10 cursor-pointer items-center pl-4 pr-3 leading-none hover:bg-hover\"\n                                                (click)=\"\n                                                    createTag(\n                                                        newTagInput.value\n                                                    );\n                                                    newTagInput.value = ''\n                                                \"\n                                                matRipple\n                                            >\n                                                <mat-icon\n                                                    class=\"mr-2 icon-size-5\"\n                                                    [svgIcon]=\"\n                                                        'heroicons_solid:plus-circle'\n                                                    \"\n                                                ></mat-icon>\n                                                <div class=\"break-all\">\n                                                    Create \"<b>{{\n                                                        newTagInput.value\n                                                    }}</b\n                                                    >\"\n                                                </div>\n                                            </div>\n                                        }\n                                    </div>\n                                </div>\n                            </ng-template>\n                        </div>\n                    </div>\n\n                    <!-- Title -->\n                    <div class=\"mt-8\">\n                        <mat-form-field\n                            class=\"w-full\"\n                            [subscriptSizing]=\"'dynamic'\"\n                        >\n                            <mat-label>Title</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:briefcase'\"\n                            ></mat-icon>\n                            <input\n                                matInput\n                                [formControlName]=\"'title'\"\n                                [placeholder]=\"'Job title'\"\n                            />\n                        </mat-form-field>\n                    </div>\n\n                    <!-- Company -->\n                    <div class=\"mt-8\">\n                        <mat-form-field\n                            class=\"w-full\"\n                            [subscriptSizing]=\"'dynamic'\"\n                        >\n                            <mat-label>Company</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:building-office-2'\"\n                            ></mat-icon>\n                            <input\n                                matInput\n                                [formControlName]=\"'company'\"\n                                [placeholder]=\"'Company'\"\n                            />\n                        </mat-form-field>\n                    </div>\n\n                    <!-- Emails -->\n                    <div class=\"mt-8\">\n                        <div class=\"space-y-4\">\n                            @for (\n                                email of contactForm.get('emails')['controls'];\n                                track trackByFn(i, email);\n                                let i = $index;\n                                let first = $first;\n                                let last = $last\n                            ) {\n                                <div class=\"flex\">\n                                    <mat-form-field\n                                        class=\"flex-auto\"\n                                        [subscriptSizing]=\"'dynamic'\"\n                                    >\n                                        @if (first) {\n                                            <mat-label>Email</mat-label>\n                                        }\n                                        <mat-icon\n                                            matPrefix\n                                            class=\"hidden icon-size-5 sm:flex\"\n                                            [svgIcon]=\"\n                                                'heroicons_solid:envelope'\n                                            \"\n                                        ></mat-icon>\n                                        <input\n                                            matInput\n                                            [formControl]=\"email.get('email')\"\n                                            [placeholder]=\"'Email address'\"\n                                            [spellcheck]=\"false\"\n                                        />\n                                    </mat-form-field>\n                                    <mat-form-field\n                                        class=\"ml-2 w-full max-w-24 flex-auto sm:ml-4 sm:max-w-40\"\n                                        [subscriptSizing]=\"'dynamic'\"\n                                    >\n                                        @if (first) {\n                                            <mat-label>Label</mat-label>\n                                        }\n                                        <mat-icon\n                                            matPrefix\n                                            class=\"hidden icon-size-5 sm:flex\"\n                                            [svgIcon]=\"'heroicons_solid:tag'\"\n                                        ></mat-icon>\n                                        <input\n                                            matInput\n                                            [formControl]=\"email.get('label')\"\n                                            [placeholder]=\"'Label'\"\n                                        />\n                                    </mat-form-field>\n                                    <!-- Remove email -->\n                                    @if (!(first && last)) {\n                                        <div\n                                            class=\"flex w-10 items-center pl-2\"\n                                            [ngClass]=\"{ 'mt-6': first }\"\n                                        >\n                                            <button\n                                                class=\"h-8 min-h-8 w-8\"\n                                                mat-icon-button\n                                                (click)=\"removeEmailField(i)\"\n                                                matTooltip=\"Remove\"\n                                            >\n                                                <mat-icon\n                                                    class=\"icon-size-5\"\n                                                    [svgIcon]=\"\n                                                        'heroicons_solid:trash'\n                                                    \"\n                                                ></mat-icon>\n                                            </button>\n                                        </div>\n                                    }\n                                </div>\n                            }\n                        </div>\n                        <div\n                            class=\"group -ml-4 mt-2 inline-flex cursor-pointer items-center rounded px-4 py-2\"\n                            (click)=\"addEmailField()\"\n                        >\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:plus-circle'\"\n                            ></mat-icon>\n                            <span\n                                class=\"text-secondary ml-2 font-medium group-hover:underline\"\n                                >Add an email address</span\n                            >\n                        </div>\n                    </div>\n\n                    <!-- Phone numbers -->\n                    <div class=\"mt-8\">\n                        <div class=\"space-y-4\">\n                            @for (\n                                phoneNumber of contactForm.get('phoneNumbers')[\n                                    'controls'\n                                ];\n                                track trackByFn(i, phoneNumber);\n                                let i = $index;\n                                let first = $first;\n                                let last = $last\n                            ) {\n                                <div class=\"relative flex\">\n                                    <mat-form-field\n                                        class=\"flex-auto\"\n                                        [subscriptSizing]=\"'dynamic'\"\n                                    >\n                                        @if (first) {\n                                            <mat-label>Phone</mat-label>\n                                        }\n                                        <input\n                                            matInput\n                                            [formControl]=\"\n                                                phoneNumber.get('phoneNumber')\n                                            \"\n                                            [placeholder]=\"'Phone'\"\n                                        />\n                                        <mat-select\n                                            class=\"mr-1.5\"\n                                            [formControl]=\"\n                                                phoneNumber.get('country')\n                                            \"\n                                            matPrefix\n                                        >\n                                            <mat-select-trigger>\n                                                <span class=\"flex items-center\">\n                                                    <span\n                                                        class=\"mr-1 hidden h-4 w-6 overflow-hidden sm:flex\"\n                                                        [style.background]=\"\n                                                            'url(\\'/images/apps/contacts/flags.png\\') no-repeat 0 0'\n                                                        \"\n                                                        [style.backgroundSize]=\"\n                                                            '24px 3876px'\n                                                        \"\n                                                        [style.backgroundPosition]=\"\n                                                            getCountryByIso(\n                                                                phoneNumber.get(\n                                                                    'country'\n                                                                ).value\n                                                            ).flagImagePos\n                                                        \"\n                                                    ></span>\n                                                    <span\n                                                        class=\"text-default font-medium sm:mx-0.5\"\n                                                        >{{\n                                                            getCountryByIso(\n                                                                phoneNumber.get(\n                                                                    'country'\n                                                                ).value\n                                                            ).code\n                                                        }}</span\n                                                    >\n                                                </span>\n                                            </mat-select-trigger>\n                                            @for (\n                                                country of countries;\n                                                track trackByFn($index, country)\n                                            ) {\n                                                <mat-option\n                                                    [value]=\"country.iso\"\n                                                >\n                                                    <span\n                                                        class=\"flex items-center\"\n                                                    >\n                                                        <span\n                                                            class=\"h-4 w-6 overflow-hidden\"\n                                                            [style.background]=\"\n                                                                'url(\\'/images/apps/contacts/flags.png\\') no-repeat 0 0'\n                                                            \"\n                                                            [style.backgroundSize]=\"\n                                                                '24px 3876px'\n                                                            \"\n                                                            [style.backgroundPosition]=\"\n                                                                country.flagImagePos\n                                                            \"\n                                                        ></span>\n                                                        <span class=\"ml-2\">{{\n                                                            country.name\n                                                        }}</span>\n                                                        <span\n                                                            class=\"ml-2 font-medium\"\n                                                            >{{\n                                                                country.code\n                                                            }}</span\n                                                        >\n                                                    </span>\n                                                </mat-option>\n                                            }\n                                        </mat-select>\n                                    </mat-form-field>\n                                    <mat-form-field\n                                        class=\"ml-2 w-full max-w-24 flex-auto sm:ml-4 sm:max-w-40\"\n                                        [subscriptSizing]=\"'dynamic'\"\n                                    >\n                                        @if (first) {\n                                            <mat-label>Label</mat-label>\n                                        }\n                                        <mat-icon\n                                            matPrefix\n                                            class=\"hidden icon-size-5 sm:flex\"\n                                            [svgIcon]=\"'heroicons_solid:tag'\"\n                                        ></mat-icon>\n                                        <input\n                                            matInput\n                                            [formControl]=\"\n                                                phoneNumber.get('label')\n                                            \"\n                                            [placeholder]=\"'Label'\"\n                                        />\n                                    </mat-form-field>\n                                    <!-- Remove phone number -->\n                                    @if (!(first && last)) {\n                                        <div\n                                            class=\"flex w-10 items-center pl-2\"\n                                            [ngClass]=\"{ 'mt-6': first }\"\n                                        >\n                                            <button\n                                                class=\"h-8 min-h-8 w-8\"\n                                                mat-icon-button\n                                                (click)=\"\n                                                    removePhoneNumberField(i)\n                                                \"\n                                                matTooltip=\"Remove\"\n                                            >\n                                                <mat-icon\n                                                    class=\"icon-size-5\"\n                                                    [svgIcon]=\"\n                                                        'heroicons_solid:trash'\n                                                    \"\n                                                ></mat-icon>\n                                            </button>\n                                        </div>\n                                    }\n                                </div>\n                            }\n                        </div>\n                        <div\n                            class=\"group -ml-4 mt-2 inline-flex cursor-pointer items-center rounded px-4 py-2\"\n                            (click)=\"addPhoneNumberField()\"\n                        >\n                            <mat-icon\n                                class=\"icon-size-5\"\n                                [svgIcon]=\"'heroicons_solid:plus-circle'\"\n                            ></mat-icon>\n                            <span\n                                class=\"text-secondary ml-2 font-medium group-hover:underline\"\n                                >Add a phone number</span\n                            >\n                        </div>\n                    </div>\n\n                    <!-- Address -->\n                    <div class=\"mt-8\">\n                        <mat-form-field\n                            class=\"w-full\"\n                            [subscriptSizing]=\"'dynamic'\"\n                        >\n                            <mat-label>Address</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:map-pin'\"\n                            ></mat-icon>\n                            <input\n                                matInput\n                                [formControlName]=\"'address'\"\n                                [placeholder]=\"'Address'\"\n                            />\n                        </mat-form-field>\n                    </div>\n\n                    <!-- Birthday -->\n                    <div class=\"mt-8\">\n                        <mat-form-field\n                            class=\"w-full\"\n                            [subscriptSizing]=\"'dynamic'\"\n                        >\n                            <mat-label>Birthday</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:cake'\"\n                            ></mat-icon>\n                            <input\n                                matInput\n                                [matDatepicker]=\"birthdayDatepicker\"\n                                [formControlName]=\"'birthday'\"\n                                [placeholder]=\"'Birthday'\"\n                            />\n                            <mat-datepicker-toggle\n                                matSuffix\n                                [for]=\"birthdayDatepicker\"\n                            >\n                            </mat-datepicker-toggle>\n                            <mat-datepicker\n                                #birthdayDatepicker\n                            ></mat-datepicker>\n                        </mat-form-field>\n                    </div>\n\n                    <!-- Notes -->\n                    <div class=\"mt-8\">\n                        <mat-form-field\n                            class=\"w-full\"\n                            [subscriptSizing]=\"'dynamic'\"\n                        >\n                            <mat-label>Notes</mat-label>\n                            <mat-icon\n                                matPrefix\n                                class=\"hidden icon-size-5 sm:flex\"\n                                [svgIcon]=\"'heroicons_solid:bars-3-bottom-left'\"\n                            ></mat-icon>\n                            <textarea\n                                matInput\n                                [formControlName]=\"'notes'\"\n                                [placeholder]=\"'Notes'\"\n                                [rows]=\"5\"\n                                [spellcheck]=\"false\"\n                                cdkTextareaAutosize\n                            ></textarea>\n                        </mat-form-field>\n                    </div>\n\n                    <!-- Actions -->\n                    <div\n                        class=\"-mx-6 mt-10 flex items-center border-t bg-gray-50 py-4 pl-1 pr-4 dark:bg-transparent sm:-mx-12 sm:pl-7 sm:pr-12\"\n                    >\n                        <!-- Delete -->\n                        <button\n                            mat-button\n                            [color]=\"'warn'\"\n                            [matTooltip]=\"'Delete'\"\n                            (click)=\"deleteContact()\"\n                        >\n                            Delete\n                        </button>\n                        <!-- Cancel -->\n                        <button\n                            class=\"ml-auto\"\n                            mat-button\n                            [matTooltip]=\"'Cancel'\"\n                            (click)=\"toggleEditMode(false)\"\n                        >\n                            Cancel\n                        </button>\n                        <!-- Save -->\n                        <button\n                            class=\"ml-2\"\n                            mat-flat-button\n                            [color]=\"'primary'\"\n                            [disabled]=\"contactForm.invalid\"\n                            [matTooltip]=\"'Save'\"\n                            (click)=\"updateContact()\"\n                        >\n                            Save\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    }\n</div>\n", "import { inject } from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    Router,\n    RouterStateSnapshot,\n    Routes,\n} from '@angular/router';\nimport { ContactsComponent } from 'app/pages/crm/breeders/contacts.component';\nimport { ContactsService } from 'app/pages/crm/breeders/contacts.service';\nimport { ContactsDetailsComponent } from 'app/pages/crm/breeders/details/details.component';\nimport { ContactsListComponent } from 'app/pages/crm/breeders/list/list.component';\nimport { catchError, throwError } from 'rxjs';\n\n/**\n * Contact resolver\n *\n * @param route\n * @param state\n */\nconst contactResolver = (\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n) => {\n    const contactsService = inject(ContactsService);\n    const router = inject(Router);\n\n    return contactsService.getContactById(route.paramMap.get('id')).pipe(\n        // Error here means the requested contact is not available\n        catchError((error) => {\n            // Log the error\n            console.error(error);\n\n            // Get the parent url\n            const parentUrl = state.url.split('/').slice(0, -1).join('/');\n\n            // Navigate to there\n            router.navigateByUrl(parentUrl);\n\n            // Throw an error\n            return throwError(error);\n        })\n    );\n};\n\n/**\n * Can deactivate contacts details\n *\n * @param component\n * @param currentRoute\n * @param currentState\n * @param nextState\n */\nconst canDeactivateContactsDetails = (\n    component: ContactsDetailsComponent,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState: RouterStateSnapshot\n) => {\n    // Get the next route\n    let nextRoute: ActivatedRouteSnapshot = nextState.root;\n    while (nextRoute.firstChild) {\n        nextRoute = nextRoute.firstChild;\n    }\n\n    // If the next state doesn't contain '/contacts'\n    // it means we are navigating away from the\n    // contacts app\n    if (!nextState.url.includes('/contacts')) {\n        // Let it navigate\n        return true;\n    }\n\n    // If we are navigating to another contact...\n    if (nextRoute.paramMap.get('id')) {\n        // Just navigate\n        return true;\n    }\n\n    // Otherwise, close the drawer first, and then navigate\n    return component.closeDrawer().then(() => true);\n};\n\nexport default [\n    {\n        path: '',\n        component: ContactsComponent,\n        resolve: {\n            tags: () => inject(ContactsService).getTags(),\n        },\n        children: [\n            {\n                path: '',\n                component: ContactsListComponent,\n                resolve: {\n                    contacts: () => inject(ContactsService).getContacts(),\n                    countries: () => inject(ContactsService).getCountries(),\n                },\n                children: [\n                    {\n                        path: ':id',\n                        component: ContactsDetailsComponent,\n                        resolve: {\n                            contact: contactResolver,\n                            countries: () =>\n                                inject(ContactsService).getCountries(),\n                        },\n                        canDeactivate: [canDeactivateContactsDetails],\n                    },\n                ],\n            },\n        ],\n    },\n] as Routes;\n"],
  "mappings": "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",
  "names": ["ContactsComponent", "constructor", "selectors", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275element", "RouterOutlet", "encapsulation", "changeDetection", "ContactsService", "constructor", "_httpClient", "_contact", "BehaviorSubject", "_contacts", "_countries", "_tags", "contact$", "asObservable", "contacts$", "countries$", "tags$", "getContacts", "get", "pipe", "tap", "contacts", "next", "searchContacts", "query", "params", "getContactById", "id", "take", "map", "contact", "find", "item", "switchMap", "of", "throwError", "createContact", "post", "newContact", "updateContact", "patch", "updatedContact", "index", "findIndex", "filter", "deleteContact", "delete", "isDeleted", "splice", "getCountries", "countries", "getTags", "tags", "createTag", "tag", "newTag", "updateTag", "updatedTag", "deleteTag", "forEach", "tagIndex", "uploadAvatar", "avatar", "headers", "type", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "FuseFindByKeyPipe", "transform", "value", "key", "source", "Array", "isArray", "map", "item", "find", "sourceItem", "pure", "\u0275\u0275text", "\u0275\u0275textInterpolate1", "ctx_r1", "contactsCount", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "contact_r3", "name", "charAt", "\u0275\u0275element", "\u0275\u0275property", "avatar", "\u0275\u0275sanitizeUrl", "\u0275\u0275template", "ContactsListComponent_Conditional_25_Conditional_0_For_1_Conditional_0_Template", "ContactsListComponent_Conditional_25_Conditional_0_For_1_Conditional_3_Template", "ContactsListComponent_Conditional_25_Conditional_0_For_1_Conditional_4_Template", "\u0275\u0275conditional", "\u0275$index_48_r4", "contacts_r5", "\u0275\u0275pureFunction2", "_c2", "selectedContact", "id", "\u0275\u0275pureFunction1", "_c3", "title", "\u0275\u0275repeaterCreate", "ContactsListComponent_Conditional_25_Conditional_0_For_1_Template", "\u0275\u0275componentInstance", "trackByFn", "\u0275\u0275repeater", "ContactsListComponent_Conditional_25_Conditional_0_Template", "ContactsListComponent_Conditional_25_Conditional_1_Template", "ctx", "length", "ContactsListComponent", "constructor", "_activatedRoute", "_changeDetectorRef", "_contactsService", "_document", "_router", "_fuseMediaWatcherService", "contactsTableColumns", "searchInputControl", "UntypedFormControl", "_unsubscribeAll", "Subject", "ngOnInit", "contacts$", "pipe", "takeUntil", "subscribe", "contacts", "markForCheck", "contact$", "contact", "countries$", "countries", "valueChanges", "switchMap", "query", "searchContacts", "matDrawer", "openedChange", "opened", "onMediaChange$", "matchingAliases", "includes", "drawerMode", "fromEvent", "filter", "event", "ctrlKey", "metaKey", "key", "createContact", "ngOnDestroy", "next", "complete", "onBackdropClicked", "navigate", "relativeTo", "newContact", "index", "item", "\u0275\u0275directiveInject", "ActivatedRoute", "ChangeDetectorRef", "ContactsService", "DOCUMENT", "Router", "FuseMediaWatcherService", "selectors", "viewQuery", "rf", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "ContactsListComponent_Conditional_12_Template", "ContactsListComponent_Conditional_25_Template", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction0", "_c1", "tmp_13_0", "\u0275\u0275pipeBind1", "MatSidenavModule", "MatDrawer", "MatDrawerContainer", "MatDrawerContent", "RouterOutlet", "MatFormFieldModule", "MatFormField", "MatPrefix", "MatIconModule", "MatIcon", "MatInputModule", "MatInput", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "ReactiveFormsModule", "FormControlDirective", "MatButtonModule", "MatButton", "NgClass", "RouterLink", "AsyncPipe", "I18nPluralPipe", "encapsulation", "changeDetection", "\u0275\u0275element", "\u0275\u0275property", "ctx_r1", "contact", "avatar", "\u0275\u0275sanitizeUrl", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "name", "charAt", "\u0275\u0275textInterpolate", "tag_r3", "title", "\u0275\u0275repeaterCreate", "ContactsDetailsComponent_Conditional_1_Conditional_17_For_2_Template", "\u0275\u0275componentInstance", "trackByFn", "\u0275\u0275repeater", "\u0275\u0275pipeBind3", "tags", "company", "email_r4", "label", "\u0275\u0275template", "ContactsDetailsComponent_Conditional_1_Conditional_21_For_4_Conditional_3_Template", "email", "\u0275\u0275conditional", "ContactsDetailsComponent_Conditional_1_Conditional_21_For_4_Template", "emails", "phoneNumber_r5", "ContactsDetailsComponent_Conditional_1_Conditional_22_For_4_Conditional_6_Template", "\u0275\u0275styleProp", "getCountryByIso", "country", "flagImagePos", "code", "phoneNumber", "ContactsDetailsComponent_Conditional_1_Conditional_22_For_4_Template", "phoneNumbers", "address", "\u0275\u0275pipeBind2", "birthday", "notes", "\u0275\u0275sanitizeHtml", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "closeDrawer", "ContactsDetailsComponent_Conditional_1_Conditional_8_Template", "ContactsDetailsComponent_Conditional_1_Conditional_9_Template", "toggleEditMode", "ContactsDetailsComponent_Conditional_1_Conditional_17_Template", "ContactsDetailsComponent_Conditional_1_Conditional_19_Template", "ContactsDetailsComponent_Conditional_1_Conditional_20_Template", "ContactsDetailsComponent_Conditional_1_Conditional_21_Template", "ContactsDetailsComponent_Conditional_1_Conditional_22_Template", "ContactsDetailsComponent_Conditional_1_Conditional_23_Template", "ContactsDetailsComponent_Conditional_1_Conditional_24_Template", "ContactsDetailsComponent_Conditional_1_Conditional_25_Template", "length", "tag_r8", "ContactsDetailsComponent_Conditional_2_Conditional_28_For_1_Template", "tag_r11", "_r10", "$implicit", "toggleContactTag", "includes", "id", "ContactsDetailsComponent_Conditional_2_ng_template_33_Conditional_11_For_1_Template", "filteredTags", "$event", "tag_r13", "_r12", "updateTagTitle", "deleteTag", "ContactsDetailsComponent_Conditional_2_ng_template_33_Conditional_12_For_2_Template", "_r14", "newTagInput_r15", "\u0275\u0275reference", "createTag", "value", "_r9", "filterTags", "filterTagsInputKeyDown", "toggleTagsEditMode", "ContactsDetailsComponent_Conditional_2_ng_template_33_Conditional_8_Template", "ContactsDetailsComponent_Conditional_2_ng_template_33_Conditional_9_Template", "ContactsDetailsComponent_Conditional_2_ng_template_33_Conditional_11_Template", "ContactsDetailsComponent_Conditional_2_ng_template_33_Conditional_12_Template", "ContactsDetailsComponent_Conditional_2_ng_template_33_Conditional_13_Template", "tagsEditMode", "shouldShowCreateTagButton", "_r16", "\u0275$index_304_r17", "$index", "removeEmailField", "\u0275\u0275pureFunction1", "_c3", "ContactsDetailsComponent_Conditional_2_For_50_Conditional_2_Template", "ContactsDetailsComponent_Conditional_2_For_50_Conditional_6_Template", "ContactsDetailsComponent_Conditional_2_For_50_Conditional_9_Template", "email_r18", "get", "\u0275$count_304_r19", "country_r20", "iso", "_r21", "\u0275$index_345_r22", "removePhoneNumberField", "ContactsDetailsComponent_Conditional_2_For_58_Conditional_2_Template", "ContactsDetailsComponent_Conditional_2_For_58_For_11_Template", "ContactsDetailsComponent_Conditional_2_For_58_Conditional_13_Template", "ContactsDetailsComponent_Conditional_2_For_58_Conditional_16_Template", "phoneNumber_r23", "countries", "\u0275$count_345_r24", "_r6", "avatarFileInput_r7", "uploadAvatar", "files", "removeAvatar", "ContactsDetailsComponent_Conditional_2_Conditional_19_Template", "ContactsDetailsComponent_Conditional_2_Conditional_20_Template", "ContactsDetailsComponent_Conditional_2_Conditional_28_Template", "openTagsPanel", "ContactsDetailsComponent_Conditional_2_Conditional_31_Template", "ContactsDetailsComponent_Conditional_2_Conditional_32_Template", "ContactsDetailsComponent_Conditional_2_ng_template_33_Template", "\u0275\u0275templateRefExtractor", "ContactsDetailsComponent_Conditional_2_For_50_Template", "addEmailField", "ContactsDetailsComponent_Conditional_2_For_58_Template", "addPhoneNumberField", "deleteContact", "updateContact", "contactForm", "birthdayDatepicker_r25", "invalid", "ContactsDetailsComponent", "constructor", "_activatedRoute", "_changeDetectorRef", "_contactsListComponent", "_contactsService", "_formBuilder", "_fuseConfirmationService", "_renderer2", "_router", "_overlay", "_viewContainerRef", "editMode", "_unsubscribeAll", "Subject", "ngOnInit", "matDrawer", "open", "group", "Validators", "required", "array", "contacts$", "pipe", "takeUntil", "subscribe", "contacts", "markForCheck", "contact$", "clear", "patchValue", "emailFormGroups", "forEach", "push", "emailFormGroup", "phoneNumbersFormGroups", "phoneNumbersFormGroup", "countries$", "codes", "tags$", "ngOnDestroy", "next", "complete", "_tagsPanelOverlayRef", "dispose", "close", "getRawValue", "filter", "message", "actions", "confirm", "afterClosed", "result", "currentContactIndex", "findIndex", "item", "nextContactIndex", "nextContactId", "isDeleted", "navigate", "relativeTo", "fileList", "allowedTypes", "file", "type", "setValue", "_avatarFileInput", "nativeElement", "create", "backdropClass", "hasBackdrop", "scrollStrategy", "scrollStrategies", "block", "positionStrategy", "position", "flexibleConnectedTo", "_tagsPanelOrigin", "withFlexibleDimensions", "withViewportMargin", "withLockedPosition", "withPositions", "originX", "originY", "overlayX", "overlayY", "attachments", "addClass", "overlayElement", "querySelector", "focus", "templatePortal", "TemplatePortal", "_tagsPanel", "attach", "backdropClick", "removeClass", "hasAttached", "detach", "isAttached", "event", "target", "toLowerCase", "tag", "key", "find", "removeTagFromContact", "addTagToContact", "response", "updateTag", "debounceTime", "unshift", "splice", "inputValue", "index", "removeAt", "phoneNumberFormGroup", "\u0275\u0275directiveInject", "ActivatedRoute", "ChangeDetectorRef", "ContactsListComponent", "ContactsService", "UntypedFormBuilder", "FuseConfirmationService", "Renderer2", "Router", "Overlay", "ViewContainerRef", "selectors", "viewQuery", "rf", "ctx", "ContactsDetailsComponent_Conditional_1_Template", "ContactsDetailsComponent_Conditional_2_Template", "MatButtonModule", "MatButton", "MatIconAnchor", "MatIconButton", "MatTooltipModule", "MatTooltip", "MatIconModule", "MatIcon", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormControlDirective", "FormGroupDirective", "FormControlName", "MatRippleModule", "MatRipple", "MatFormFieldModule", "MatFormField", "MatLabel", "MatPrefix", "MatSuffix", "MatInputModule", "MatInput", "CdkTextareaAutosize", "MatCheckboxModule", "MatCheckbox", "NgClass", "MatSelectModule", "MatSelect", "MatSelectTrigger", "MatOption", "MatOptionModule", "MatDatepickerModule", "MatDatepicker", "MatDatepickerInput", "MatDatepickerToggle", "TextFieldModule", "FuseFindByKeyPipe", "DatePipe", "encapsulation", "changeDetection", "contactResolver", "route", "state", "contactsService", "inject", "ContactsService", "router", "Router", "getContactById", "paramMap", "get", "pipe", "catchError", "error", "console", "parentUrl", "url", "split", "slice", "join", "navigateByUrl", "throwError", "canDeactivateContactsDetails", "component", "currentRoute", "currentState", "nextState", "nextRoute", "root", "firstChild", "includes", "closeDrawer", "then", "contacts_routes_default", "path", "ContactsComponent", "resolve", "tags", "getTags", "children", "ContactsListComponent", "contacts", "getContacts", "countries", "getCountries", "ContactsDetailsComponent", "contact", "canDeactivate"]
}
