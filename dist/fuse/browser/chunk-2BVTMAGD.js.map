{"version":3,"sources":["node_modules/@angular/material/fesm2022/datepicker.mjs"],"sourcesContent":["import { _IdGenerator, CdkMonitorFocus, CdkTrapFocus, A11yModule } from '@angular/cdk/a11y';\nimport { Overlay, FlexibleConnectedPositionStrategy, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal, CdkPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, ElementRef, NgZone, EventEmitter, Injector, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, Optional, SkipSelf, InjectionToken, ChangeDetectorRef, ViewChild, ViewContainerRef, booleanAttribute, Directive, forwardRef, signal, HostAttributeToken, ContentChild, TemplateRef, NgModule } from '@angular/core';\nimport { MatButton, MatIconButton, MatButtonModule } from '@angular/material/button';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1 from '@angular/material/core';\nimport { _StructuralStylesLoader, DateAdapter, MAT_DATE_FORMATS, ErrorStateMatcher, _ErrorStateTracker, MatCommonModule } from '@angular/material/core';\nimport { Subject, Subscription, merge, of } from 'rxjs';\nimport { ESCAPE, hasModifierKey, SPACE, ENTER, PAGE_DOWN, PAGE_UP, END, HOME, DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW, BACKSPACE } from '@angular/cdk/keycodes';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { normalizePassiveListenerOptions, Platform, _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { NgClass, DOCUMENT } from '@angular/common';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { startWith, take, filter } from 'rxjs/operators';\nimport { coerceStringArray } from '@angular/cdk/coercion';\nimport { trigger, transition, animate, keyframes, style, state } from '@angular/animations';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators, NgForm, FormGroupDirective, NgControl, ControlContainer } from '@angular/forms';\nimport { MAT_FORM_FIELD, MatFormFieldControl } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\n\n/** @docs-private */\nconst _c0 = [\"mat-calendar-body\", \"\"];\nfunction _forTrack0($index, $item) {\n  return this._trackRow($item);\n}\nconst _forTrack1 = ($index, $item) => $item.id;\nfunction MatCalendarBody_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 0)(1, \"td\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    i0.ɵɵattribute(\"colspan\", ctx_r0.numCols);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.label, \" \");\n  }\n}\nfunction MatCalendarBody_For_2_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    i0.ɵɵattribute(\"colspan\", ctx_r0._firstRowOffset);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0._firstRowOffset >= ctx_r0.labelMinRequiredCells ? ctx_r0.label : \"\", \" \");\n  }\n}\nfunction MatCalendarBody_For_2_For_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 6)(1, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function MatCalendarBody_For_2_For_3_Template_button_click_1_listener($event) {\n      const item_r3 = i0.ɵɵrestoreView(_r2).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0._cellClicked(item_r3, $event));\n    })(\"focus\", function MatCalendarBody_For_2_For_3_Template_button_focus_1_listener($event) {\n      const item_r3 = i0.ɵɵrestoreView(_r2).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0._emitActiveDateChange(item_r3, $event));\n    });\n    i0.ɵɵelementStart(2, \"span\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"span\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    const ɵ$index_14_r4 = ctx.$index;\n    const ɵ$index_7_r5 = i0.ɵɵnextContext().$index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"width\", ctx_r0._cellWidth)(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    i0.ɵɵattribute(\"data-mat-row\", ɵ$index_7_r5)(\"data-mat-col\", ɵ$index_14_r4);\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"mat-calendar-body-disabled\", !item_r3.enabled)(\"mat-calendar-body-active\", ctx_r0._isActiveCell(ɵ$index_7_r5, ɵ$index_14_r4))(\"mat-calendar-body-range-start\", ctx_r0._isRangeStart(item_r3.compareValue))(\"mat-calendar-body-range-end\", ctx_r0._isRangeEnd(item_r3.compareValue))(\"mat-calendar-body-in-range\", ctx_r0._isInRange(item_r3.compareValue))(\"mat-calendar-body-comparison-bridge-start\", ctx_r0._isComparisonBridgeStart(item_r3.compareValue, ɵ$index_7_r5, ɵ$index_14_r4))(\"mat-calendar-body-comparison-bridge-end\", ctx_r0._isComparisonBridgeEnd(item_r3.compareValue, ɵ$index_7_r5, ɵ$index_14_r4))(\"mat-calendar-body-comparison-start\", ctx_r0._isComparisonStart(item_r3.compareValue))(\"mat-calendar-body-comparison-end\", ctx_r0._isComparisonEnd(item_r3.compareValue))(\"mat-calendar-body-in-comparison-range\", ctx_r0._isInComparisonRange(item_r3.compareValue))(\"mat-calendar-body-preview-start\", ctx_r0._isPreviewStart(item_r3.compareValue))(\"mat-calendar-body-preview-end\", ctx_r0._isPreviewEnd(item_r3.compareValue))(\"mat-calendar-body-in-preview\", ctx_r0._isInPreview(item_r3.compareValue));\n    i0.ɵɵproperty(\"ngClass\", item_r3.cssClasses)(\"tabindex\", ctx_r0._isActiveCell(ɵ$index_7_r5, ɵ$index_14_r4) ? 0 : -1);\n    i0.ɵɵattribute(\"aria-label\", item_r3.ariaLabel)(\"aria-disabled\", !item_r3.enabled || null)(\"aria-pressed\", ctx_r0._isSelected(item_r3.compareValue))(\"aria-current\", ctx_r0.todayValue === item_r3.compareValue ? \"date\" : null)(\"aria-describedby\", ctx_r0._getDescribedby(item_r3.compareValue));\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"mat-calendar-body-selected\", ctx_r0._isSelected(item_r3.compareValue))(\"mat-calendar-body-comparison-identical\", ctx_r0._isComparisonIdentical(item_r3.compareValue))(\"mat-calendar-body-today\", ctx_r0.todayValue === item_r3.compareValue);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", item_r3.displayValue, \" \");\n  }\n}\nfunction MatCalendarBody_For_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 1);\n    i0.ɵɵtemplate(1, MatCalendarBody_For_2_Conditional_1_Template, 2, 6, \"td\", 4);\n    i0.ɵɵrepeaterCreate(2, MatCalendarBody_For_2_For_3_Template, 5, 48, \"td\", 5, _forTrack1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r6 = ctx.$implicit;\n    const ɵ$index_7_r5 = ctx.$index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(ɵ$index_7_r5 === 0 && ctx_r0._firstRowOffset ? 1 : -1);\n    i0.ɵɵadvance();\n    i0.ɵɵrepeater(row_r6);\n  }\n}\nfunction MatMonthView_For_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 2)(1, \"span\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 3);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const day_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(day_r1.long);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(day_r1.narrow);\n  }\n}\nconst _c1 = [\"*\"];\nfunction MatCalendar_ng_template_0_Template(rf, ctx) {}\nfunction MatCalendar_Case_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-month-view\", 4);\n    i0.ɵɵtwoWayListener(\"activeDateChange\", function MatCalendar_Case_2_Template_mat_month_view_activeDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"_userSelection\", function MatCalendar_Case_2_Template_mat_month_view__userSelection_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._dateSelected($event));\n    })(\"dragStarted\", function MatCalendar_Case_2_Template_mat_month_view_dragStarted_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._dragStarted($event));\n    })(\"dragEnded\", function MatCalendar_Case_2_Template_mat_month_view_dragEnded_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._dragEnded($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵtwoWayProperty(\"activeDate\", ctx_r1.activeDate);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass)(\"comparisonStart\", ctx_r1.comparisonStart)(\"comparisonEnd\", ctx_r1.comparisonEnd)(\"startDateAccessibleName\", ctx_r1.startDateAccessibleName)(\"endDateAccessibleName\", ctx_r1.endDateAccessibleName)(\"activeDrag\", ctx_r1._activeDrag);\n  }\n}\nfunction MatCalendar_Case_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-year-view\", 5);\n    i0.ɵɵtwoWayListener(\"activeDateChange\", function MatCalendar_Case_3_Template_mat_year_view_activeDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"monthSelected\", function MatCalendar_Case_3_Template_mat_year_view_monthSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._monthSelectedInYearView($event));\n    })(\"selectedChange\", function MatCalendar_Case_3_Template_mat_year_view_selectedChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._goToDateInView($event, \"month\"));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵtwoWayProperty(\"activeDate\", ctx_r1.activeDate);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass);\n  }\n}\nfunction MatCalendar_Case_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-multi-year-view\", 6);\n    i0.ɵɵtwoWayListener(\"activeDateChange\", function MatCalendar_Case_4_Template_mat_multi_year_view_activeDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"yearSelected\", function MatCalendar_Case_4_Template_mat_multi_year_view_yearSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._yearSelectedInMultiYearView($event));\n    })(\"selectedChange\", function MatCalendar_Case_4_Template_mat_multi_year_view_selectedChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._goToDateInView($event, \"year\"));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵtwoWayProperty(\"activeDate\", ctx_r1.activeDate);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass);\n  }\n}\nfunction MatDatepickerContent_ng_template_2_Template(rf, ctx) {}\nconst _c2 = [\"button\"];\nconst _c3 = [[[\"\", \"matDatepickerToggleIcon\", \"\"]]];\nconst _c4 = [\"[matDatepickerToggleIcon]\"];\nfunction MatDatepickerToggle_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 2);\n    i0.ɵɵelement(1, \"path\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c5 = [[[\"input\", \"matStartDate\", \"\"]], [[\"input\", \"matEndDate\", \"\"]]];\nconst _c6 = [\"input[matStartDate]\", \"input[matEndDate]\"];\nfunction MatDatepickerActions_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction createMissingDateImplError(provider) {\n  return Error(`MatDatepicker: No provider found for ${provider}. You must add one of the following ` + `to your app config: provideNativeDateAdapter, provideDateFnsAdapter, ` + `provideLuxonDateAdapter, provideMomentDateAdapter, or provide a custom implementation.`);\n}\n\n/** Datepicker data that requires internationalization. */\nlet MatDatepickerIntl = /*#__PURE__*/(() => {\n  class MatDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    changes = new Subject();\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel = 'Calendar';\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel = 'Open calendar';\n    /** Label for the button used to close the calendar popup. */\n    closeCalendarLabel = 'Close calendar';\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel = 'Previous month';\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel = 'Next month';\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel = 'Previous year';\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel = 'Next year';\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel = 'Previous 24 years';\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel = 'Next 24 years';\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel = 'Choose date';\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel = 'Choose month and year';\n    /**\n     * A label for the first date of a range of dates (used by screen readers).\n     * @deprecated Provide your own internationalization string.\n     * @breaking-change 17.0.0\n     */\n    startDateLabel = 'Start date';\n    /**\n     * A label for the last date of a range of dates (used by screen readers).\n     * @deprecated Provide your own internationalization string.\n     * @breaking-change 17.0.0\n     */\n    endDateLabel = 'End date';\n    /**\n     * A label for the Comparison date of a range of dates (used by screen readers).\n     */\n    comparisonDateLabel = 'Comparison range';\n    /** Formats a range of years (used for visuals). */\n    formatYearRange(start, end) {\n      return `${start} \\u2013 ${end}`;\n    }\n    /** Formats a label for a range of years (used by screen readers). */\n    formatYearRangeLabel(start, end) {\n      return `${start} to ${end}`;\n    }\n    static ɵfac = function MatDatepickerIntl_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerIntl)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatDatepickerIntl,\n      factory: MatDatepickerIntl.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MatDatepickerIntl;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet uniqueIdCounter$1 = 0;\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nclass MatCalendarCell {\n  value;\n  displayValue;\n  ariaLabel;\n  enabled;\n  cssClasses;\n  compareValue;\n  rawValue;\n  id = uniqueIdCounter$1++;\n  constructor(value, displayValue, ariaLabel, enabled, cssClasses = {}, compareValue = value, rawValue) {\n    this.value = value;\n    this.displayValue = displayValue;\n    this.ariaLabel = ariaLabel;\n    this.enabled = enabled;\n    this.cssClasses = cssClasses;\n    this.compareValue = compareValue;\n    this.rawValue = rawValue;\n  }\n}\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n/** Event options that can be used to bind a passive, capturing event. */\nconst passiveCapturingEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Event options that can be used to bind a passive, non-capturing event. */\nconst passiveEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\nlet MatCalendarBody = /*#__PURE__*/(() => {\n  class MatCalendarBody {\n    _elementRef = inject(ElementRef);\n    _ngZone = inject(NgZone);\n    _platform = inject(Platform);\n    _intl = inject(MatDatepickerIntl);\n    /**\n     * Used to skip the next focus event when rendering the preview range.\n     * We need a flag like this, because some browsers fire focus events asynchronously.\n     */\n    _skipNextFocus;\n    /**\n     * Used to focus the active cell after change detection has run.\n     */\n    _focusActiveCellAfterViewChecked = false;\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    label;\n    /** The cells to display in the table. */\n    rows;\n    /** The value in the table that corresponds to today. */\n    todayValue;\n    /** Start value of the selected date range. */\n    startValue;\n    /** End value of the selected date range. */\n    endValue;\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    labelMinRequiredCells;\n    /** The number of columns in the table. */\n    numCols = 7;\n    /** The cell number of the active cell in the table. */\n    activeCell = 0;\n    ngAfterViewChecked() {\n      if (this._focusActiveCellAfterViewChecked) {\n        this._focusActiveCell();\n        this._focusActiveCellAfterViewChecked = false;\n      }\n    }\n    /** Whether a range is being selected. */\n    isRange = false;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    cellAspectRatio = 1;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** Start of the preview range. */\n    previewStart = null;\n    /** End of the preview range. */\n    previewEnd = null;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Emits when a new value is selected. */\n    selectedValueChange = new EventEmitter();\n    /** Emits when the preview has changed as a result of a user action. */\n    previewChange = new EventEmitter();\n    activeDateChange = new EventEmitter();\n    /** Emits the date at the possible start of a drag event. */\n    dragStarted = new EventEmitter();\n    /** Emits the date at the conclusion of a drag, or null if mouse was not released on a date. */\n    dragEnded = new EventEmitter();\n    /** The number of blank cells to put at the beginning for the first row. */\n    _firstRowOffset;\n    /** Padding for the individual date cells. */\n    _cellPadding;\n    /** Width of an individual cell. */\n    _cellWidth;\n    /** ID for the start date label. */\n    _startDateLabelId;\n    /** ID for the end date label. */\n    _endDateLabelId;\n    /** ID for the comparison start date label. */\n    _comparisonStartDateLabelId;\n    /** ID for the comparison end date label. */\n    _comparisonEndDateLabelId;\n    _didDragSinceMouseDown = false;\n    _injector = inject(Injector);\n    comparisonDateAccessibleName = this._intl.comparisonDateLabel;\n    /**\n     * Tracking function for rows based on their identity. Ideally we would use some sort of\n     * key on the row, but that would require a breaking change for the `rows` input. We don't\n     * use the built-in identity tracking, because it logs warnings.\n     */\n    _trackRow = row => row;\n    constructor() {\n      const idGenerator = inject(_IdGenerator);\n      this._startDateLabelId = idGenerator.getId('mat-calendar-body-start-');\n      this._endDateLabelId = idGenerator.getId('mat-calendar-body-end-');\n      this._comparisonStartDateLabelId = idGenerator.getId('mat-calendar-body-comparison-start-');\n      this._comparisonEndDateLabelId = idGenerator.getId('mat-calendar-body-comparison-end-');\n      inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n      this._ngZone.runOutsideAngular(() => {\n        const element = this._elementRef.nativeElement;\n        // `touchmove` is active since we need to call `preventDefault`.\n        element.addEventListener('touchmove', this._touchmoveHandler, activeCapturingEventOptions);\n        element.addEventListener('mouseenter', this._enterHandler, passiveCapturingEventOptions);\n        element.addEventListener('focus', this._enterHandler, passiveCapturingEventOptions);\n        element.addEventListener('mouseleave', this._leaveHandler, passiveCapturingEventOptions);\n        element.addEventListener('blur', this._leaveHandler, passiveCapturingEventOptions);\n        element.addEventListener('mousedown', this._mousedownHandler, passiveEventOptions);\n        element.addEventListener('touchstart', this._mousedownHandler, passiveEventOptions);\n        if (this._platform.isBrowser) {\n          window.addEventListener('mouseup', this._mouseupHandler);\n          window.addEventListener('touchend', this._touchendHandler);\n        }\n      });\n    }\n    /** Called when a cell is clicked. */\n    _cellClicked(cell, event) {\n      // Ignore \"clicks\" that are actually canceled drags (eg the user dragged\n      // off and then went back to this cell to undo).\n      if (this._didDragSinceMouseDown) {\n        return;\n      }\n      if (cell.enabled) {\n        this.selectedValueChange.emit({\n          value: cell.value,\n          event\n        });\n      }\n    }\n    _emitActiveDateChange(cell, event) {\n      if (cell.enabled) {\n        this.activeDateChange.emit({\n          value: cell.value,\n          event\n        });\n      }\n    }\n    /** Returns whether a cell should be marked as selected. */\n    _isSelected(value) {\n      return this.startValue === value || this.endValue === value;\n    }\n    ngOnChanges(changes) {\n      const columnChanges = changes['numCols'];\n      const {\n        rows,\n        numCols\n      } = this;\n      if (changes['rows'] || columnChanges) {\n        this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n      }\n      if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n        this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n      }\n      if (columnChanges || !this._cellWidth) {\n        this._cellWidth = `${100 / numCols}%`;\n      }\n    }\n    ngOnDestroy() {\n      const element = this._elementRef.nativeElement;\n      element.removeEventListener('touchmove', this._touchmoveHandler, activeCapturingEventOptions);\n      element.removeEventListener('mouseenter', this._enterHandler, passiveCapturingEventOptions);\n      element.removeEventListener('focus', this._enterHandler, passiveCapturingEventOptions);\n      element.removeEventListener('mouseleave', this._leaveHandler, passiveCapturingEventOptions);\n      element.removeEventListener('blur', this._leaveHandler, passiveCapturingEventOptions);\n      element.removeEventListener('mousedown', this._mousedownHandler, passiveEventOptions);\n      element.removeEventListener('touchstart', this._mousedownHandler, passiveEventOptions);\n      if (this._platform.isBrowser) {\n        window.removeEventListener('mouseup', this._mouseupHandler);\n        window.removeEventListener('touchend', this._touchendHandler);\n      }\n    }\n    /** Returns whether a cell is active. */\n    _isActiveCell(rowIndex, colIndex) {\n      let cellNumber = rowIndex * this.numCols + colIndex;\n      // Account for the fact that the first row may not have as many cells.\n      if (rowIndex) {\n        cellNumber -= this._firstRowOffset;\n      }\n      return cellNumber == this.activeCell;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     *\n     * Adding a 0ms setTimeout seems to fix Voiceover losing focus when pressing PageUp/PageDown\n     * (issue #24330).\n     *\n     * Determined a 0ms by gradually increasing duration from 0 and testing two use cases with screen\n     * reader enabled:\n     *\n     * 1. Pressing PageUp/PageDown repeatedly with pausing between each key press.\n     * 2. Pressing and holding the PageDown key with repeated keys enabled.\n     *\n     * Test 1 worked roughly 95-99% of the time with 0ms and got a little bit better as the duration\n     * increased. Test 2 got slightly better until the duration was long enough to interfere with\n     * repeated keys. If the repeated key speed was faster than the timeout duration, then pressing\n     * and holding pagedown caused the entire page to scroll.\n     *\n     * Since repeated key speed can verify across machines, determined that any duration could\n     * potentially interfere with repeated keys. 0ms would be best because it almost entirely\n     * eliminates the focus being lost in Voiceover (#24330) without causing unintended side effects.\n     * Adding delay also complicates writing tests.\n     */\n    _focusActiveCell(movePreview = true) {\n      afterNextRender(() => {\n        setTimeout(() => {\n          const activeCell = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n          if (activeCell) {\n            if (!movePreview) {\n              this._skipNextFocus = true;\n            }\n            activeCell.focus();\n          }\n        });\n      }, {\n        injector: this._injector\n      });\n    }\n    /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n    _scheduleFocusActiveCellAfterViewChecked() {\n      this._focusActiveCellAfterViewChecked = true;\n    }\n    /** Gets whether a value is the start of the main range. */\n    _isRangeStart(value) {\n      return isStart(value, this.startValue, this.endValue);\n    }\n    /** Gets whether a value is the end of the main range. */\n    _isRangeEnd(value) {\n      return isEnd(value, this.startValue, this.endValue);\n    }\n    /** Gets whether a value is within the currently-selected range. */\n    _isInRange(value) {\n      return isInRange(value, this.startValue, this.endValue, this.isRange);\n    }\n    /** Gets whether a value is the start of the comparison range. */\n    _isComparisonStart(value) {\n      return isStart(value, this.comparisonStart, this.comparisonEnd);\n    }\n    /** Whether the cell is a start bridge cell between the main and comparison ranges. */\n    _isComparisonBridgeStart(value, rowIndex, colIndex) {\n      if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n        return false;\n      }\n      let previousCell = this.rows[rowIndex][colIndex - 1];\n      if (!previousCell) {\n        const previousRow = this.rows[rowIndex - 1];\n        previousCell = previousRow && previousRow[previousRow.length - 1];\n      }\n      return previousCell && !this._isRangeEnd(previousCell.compareValue);\n    }\n    /** Whether the cell is an end bridge cell between the main and comparison ranges. */\n    _isComparisonBridgeEnd(value, rowIndex, colIndex) {\n      if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n        return false;\n      }\n      let nextCell = this.rows[rowIndex][colIndex + 1];\n      if (!nextCell) {\n        const nextRow = this.rows[rowIndex + 1];\n        nextCell = nextRow && nextRow[0];\n      }\n      return nextCell && !this._isRangeStart(nextCell.compareValue);\n    }\n    /** Gets whether a value is the end of the comparison range. */\n    _isComparisonEnd(value) {\n      return isEnd(value, this.comparisonStart, this.comparisonEnd);\n    }\n    /** Gets whether a value is within the current comparison range. */\n    _isInComparisonRange(value) {\n      return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n    }\n    /**\n     * Gets whether a value is the same as the start and end of the comparison range.\n     * For context, the functions that we use to determine whether something is the start/end of\n     * a range don't allow for the start and end to be on the same day, because we'd have to use\n     * much more specific CSS selectors to style them correctly in all scenarios. This is fine for\n     * the regular range, because when it happens, the selected styles take over and still show where\n     * the range would've been, however we don't have these selected styles for a comparison range.\n     * This function is used to apply a class that serves the same purpose as the one for selected\n     * dates, but it only applies in the context of a comparison range.\n     */\n    _isComparisonIdentical(value) {\n      // Note that we don't need to null check the start/end\n      // here, because the `value` will always be defined.\n      return this.comparisonStart === this.comparisonEnd && value === this.comparisonStart;\n    }\n    /** Gets whether a value is the start of the preview range. */\n    _isPreviewStart(value) {\n      return isStart(value, this.previewStart, this.previewEnd);\n    }\n    /** Gets whether a value is the end of the preview range. */\n    _isPreviewEnd(value) {\n      return isEnd(value, this.previewStart, this.previewEnd);\n    }\n    /** Gets whether a value is inside the preview range. */\n    _isInPreview(value) {\n      return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n    }\n    /** Gets ids of aria descriptions for the start and end of a date range. */\n    _getDescribedby(value) {\n      if (!this.isRange) {\n        return null;\n      }\n      if (this.startValue === value && this.endValue === value) {\n        return `${this._startDateLabelId} ${this._endDateLabelId}`;\n      } else if (this.startValue === value) {\n        return this._startDateLabelId;\n      } else if (this.endValue === value) {\n        return this._endDateLabelId;\n      }\n      if (this.comparisonStart !== null && this.comparisonEnd !== null) {\n        if (value === this.comparisonStart && value === this.comparisonEnd) {\n          return `${this._comparisonStartDateLabelId} ${this._comparisonEndDateLabelId}`;\n        } else if (value === this.comparisonStart) {\n          return this._comparisonStartDateLabelId;\n        } else if (value === this.comparisonEnd) {\n          return this._comparisonEndDateLabelId;\n        }\n      }\n      return null;\n    }\n    /**\n     * Event handler for when the user enters an element\n     * inside the calendar body (e.g. by hovering in or focus).\n     */\n    _enterHandler = event => {\n      if (this._skipNextFocus && event.type === 'focus') {\n        this._skipNextFocus = false;\n        return;\n      }\n      // We only need to hit the zone when we're selecting a range.\n      if (event.target && this.isRange) {\n        const cell = this._getCellFromElement(event.target);\n        if (cell) {\n          this._ngZone.run(() => this.previewChange.emit({\n            value: cell.enabled ? cell : null,\n            event\n          }));\n        }\n      }\n    };\n    _touchmoveHandler = event => {\n      if (!this.isRange) return;\n      const target = getActualTouchTarget(event);\n      const cell = target ? this._getCellFromElement(target) : null;\n      if (target !== event.target) {\n        this._didDragSinceMouseDown = true;\n      }\n      // If the initial target of the touch is a date cell, prevent default so\n      // that the move is not handled as a scroll.\n      if (getCellElement(event.target)) {\n        event.preventDefault();\n      }\n      this._ngZone.run(() => this.previewChange.emit({\n        value: cell?.enabled ? cell : null,\n        event\n      }));\n    };\n    /**\n     * Event handler for when the user's pointer leaves an element\n     * inside the calendar body (e.g. by hovering out or blurring).\n     */\n    _leaveHandler = event => {\n      // We only need to hit the zone when we're selecting a range.\n      if (this.previewEnd !== null && this.isRange) {\n        if (event.type !== 'blur') {\n          this._didDragSinceMouseDown = true;\n        }\n        // Only reset the preview end value when leaving cells. This looks better, because\n        // we have a gap between the cells and the rows and we don't want to remove the\n        // range just for it to show up again when the user moves a few pixels to the side.\n        if (event.target && this._getCellFromElement(event.target) && !(event.relatedTarget && this._getCellFromElement(event.relatedTarget))) {\n          this._ngZone.run(() => this.previewChange.emit({\n            value: null,\n            event\n          }));\n        }\n      }\n    };\n    /**\n     * Triggered on mousedown or touchstart on a date cell.\n     * Respsonsible for starting a drag sequence.\n     */\n    _mousedownHandler = event => {\n      if (!this.isRange) return;\n      this._didDragSinceMouseDown = false;\n      // Begin a drag if a cell within the current range was targeted.\n      const cell = event.target && this._getCellFromElement(event.target);\n      if (!cell || !this._isInRange(cell.compareValue)) {\n        return;\n      }\n      this._ngZone.run(() => {\n        this.dragStarted.emit({\n          value: cell.rawValue,\n          event\n        });\n      });\n    };\n    /** Triggered on mouseup anywhere. Respsonsible for ending a drag sequence. */\n    _mouseupHandler = event => {\n      if (!this.isRange) return;\n      const cellElement = getCellElement(event.target);\n      if (!cellElement) {\n        // Mouseup happened outside of datepicker. Cancel drag.\n        this._ngZone.run(() => {\n          this.dragEnded.emit({\n            value: null,\n            event\n          });\n        });\n        return;\n      }\n      if (cellElement.closest('.mat-calendar-body') !== this._elementRef.nativeElement) {\n        // Mouseup happened inside a different month instance.\n        // Allow it to handle the event.\n        return;\n      }\n      this._ngZone.run(() => {\n        const cell = this._getCellFromElement(cellElement);\n        this.dragEnded.emit({\n          value: cell?.rawValue ?? null,\n          event\n        });\n      });\n    };\n    /** Triggered on touchend anywhere. Respsonsible for ending a drag sequence. */\n    _touchendHandler = event => {\n      const target = getActualTouchTarget(event);\n      if (target) {\n        this._mouseupHandler({\n          target\n        });\n      }\n    };\n    /** Finds the MatCalendarCell that corresponds to a DOM node. */\n    _getCellFromElement(element) {\n      const cell = getCellElement(element);\n      if (cell) {\n        const row = cell.getAttribute('data-mat-row');\n        const col = cell.getAttribute('data-mat-col');\n        if (row && col) {\n          return this.rows[parseInt(row)][parseInt(col)];\n        }\n      }\n      return null;\n    }\n    static ɵfac = function MatCalendarBody_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCalendarBody)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatCalendarBody,\n      selectors: [[\"\", \"mat-calendar-body\", \"\"]],\n      hostAttrs: [1, \"mat-calendar-body\"],\n      inputs: {\n        label: \"label\",\n        rows: \"rows\",\n        todayValue: \"todayValue\",\n        startValue: \"startValue\",\n        endValue: \"endValue\",\n        labelMinRequiredCells: \"labelMinRequiredCells\",\n        numCols: \"numCols\",\n        activeCell: \"activeCell\",\n        isRange: \"isRange\",\n        cellAspectRatio: \"cellAspectRatio\",\n        comparisonStart: \"comparisonStart\",\n        comparisonEnd: \"comparisonEnd\",\n        previewStart: \"previewStart\",\n        previewEnd: \"previewEnd\",\n        startDateAccessibleName: \"startDateAccessibleName\",\n        endDateAccessibleName: \"endDateAccessibleName\"\n      },\n      outputs: {\n        selectedValueChange: \"selectedValueChange\",\n        previewChange: \"previewChange\",\n        activeDateChange: \"activeDateChange\",\n        dragStarted: \"dragStarted\",\n        dragEnded: \"dragEnded\"\n      },\n      exportAs: [\"matCalendarBody\"],\n      features: [i0.ɵɵNgOnChangesFeature],\n      attrs: _c0,\n      decls: 11,\n      vars: 11,\n      consts: [[\"aria-hidden\", \"true\"], [\"role\", \"row\"], [1, \"mat-calendar-body-hidden-label\", 3, \"id\"], [1, \"mat-calendar-body-label\"], [1, \"mat-calendar-body-label\", 3, \"paddingTop\", \"paddingBottom\"], [\"role\", \"gridcell\", 1, \"mat-calendar-body-cell-container\", 3, \"width\", \"paddingTop\", \"paddingBottom\"], [\"role\", \"gridcell\", 1, \"mat-calendar-body-cell-container\"], [\"type\", \"button\", 1, \"mat-calendar-body-cell\", 3, \"click\", \"focus\", \"ngClass\", \"tabindex\"], [1, \"mat-calendar-body-cell-content\", \"mat-focus-indicator\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-body-cell-preview\"]],\n      template: function MatCalendarBody_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, MatCalendarBody_Conditional_0_Template, 3, 6, \"tr\", 0);\n          i0.ɵɵrepeaterCreate(1, MatCalendarBody_For_2_Template, 4, 1, \"tr\", 1, _forTrack0, true);\n          i0.ɵɵelementStart(3, \"span\", 2);\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"span\", 2);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"span\", 2);\n          i0.ɵɵtext(8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"span\", 2);\n          i0.ɵɵtext(10);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵconditional(ctx._firstRowOffset < ctx.labelMinRequiredCells ? 0 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵrepeater(ctx.rows);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"id\", ctx._startDateLabelId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.startDateAccessibleName, \"\\n\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"id\", ctx._endDateLabelId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.endDateAccessibleName, \"\\n\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"id\", ctx._comparisonStartDateLabelId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate2(\" \", ctx.comparisonDateAccessibleName, \" \", ctx.startDateAccessibleName, \"\\n\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"id\", ctx._comparisonEndDateLabelId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate2(\" \", ctx.comparisonDateAccessibleName, \" \", ctx.endDateAccessibleName, \"\\n\");\n        }\n      },\n      dependencies: [NgClass],\n      styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-outline-color, var(--mat-sys-primary))}.mat-calendar-body-label{height:0;line-height:0;text-align:start;padding-left:4.7142857143%;padding-right:4.7142857143%;font-size:var(--mat-datepicker-calendar-body-label-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-body-label-text-weight, var(--mat-sys-title-small-weight));color:var(--mat-datepicker-calendar-body-label-text-color, var(--mat-sys-on-surface))}.mat-calendar-body-hidden-label{display:none}.mat-calendar-body-cell-container{position:relative;height:0;line-height:0}.mat-calendar-body-cell{position:absolute;top:0;left:0;width:100%;height:100%;background:none;text-align:center;outline:none;font-family:inherit;margin:0;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size));-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-calendar-body-cell::-moz-focus-inner{border:0}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;display:block;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview{color:var(--mat-datepicker-calendar-date-preview-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-disabled>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){color:var(--mat-datepicker-calendar-date-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-disabled>.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-disabled-state-outline-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}@media(forced-colors: active){.mat-calendar-body-disabled{opacity:.5}}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px;color:var(--mat-datepicker-calendar-date-text-color, var(--mat-sys-on-surface));border-color:var(--mat-datepicker-calendar-date-outline-color, transparent)}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}@media(forced-colors: active){.mat-calendar-body-cell-content{border:none}}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-focus-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(hover: hover){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-hover-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}}.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-state-background-color, var(--mat-sys-primary));color:var(--mat-datepicker-calendar-date-selected-state-text-color, var(--mat-sys-on-primary))}.mat-calendar-body-disabled>.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-selected.mat-calendar-body-today{box-shadow:inset 0 0 0 1px var(--mat-datepicker-calendar-date-today-selected-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-range::before{background:var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-bridge-start::before,[dir=rtl] .mat-calendar-body-comparison-bridge-end::before{background:linear-gradient(to right, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-comparison-bridge-end::before,[dir=rtl] .mat-calendar-body-comparison-bridge-start::before{background:linear-gradient(to left, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-in-range>.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after{background:var(--mat-datepicker-calendar-date-in-overlap-range-state-background-color, var(--mat-sys-secondary-container))}.mat-calendar-body-comparison-identical.mat-calendar-body-selected,.mat-calendar-body-in-comparison-range>.mat-calendar-body-selected{background:var(--mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color, var(--mat-sys-secondary))}@media(forced-colors: active){.mat-datepicker-popup:not(:empty),.mat-calendar-body-cell:not(.mat-calendar-body-in-range) .mat-calendar-body-selected{outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-selected{background:none}.mat-calendar-body-in-range::before,.mat-calendar-body-comparison-bridge-start::before,.mat-calendar-body-comparison-bridge-end::before{border-top:solid 1px;border-bottom:solid 1px}.mat-calendar-body-range-start::before{border-left:solid 1px}[dir=rtl] .mat-calendar-body-range-start::before{border-left:0;border-right:solid 1px}.mat-calendar-body-range-end::before{border-right:solid 1px}[dir=rtl] .mat-calendar-body-range-end::before{border-right:0;border-left:solid 1px}.mat-calendar-body-in-comparison-range::before{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-comparison-start::before{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-start::before{border-left:0;border-right:dashed 1px}.mat-calendar-body-comparison-end::before{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-end::before{border-right:0;border-left:dashed 1px}}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatCalendarBody;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Checks whether a node is a table cell element. */\nfunction isTableCell(node) {\n  return node?.nodeName === 'TD';\n}\n/**\n * Gets the date table cell element that is or contains the specified element.\n * Or returns null if element is not part of a date cell.\n */\nfunction getCellElement(element) {\n  let cell;\n  if (isTableCell(element)) {\n    cell = element;\n  } else if (isTableCell(element.parentNode)) {\n    cell = element.parentNode;\n  } else if (isTableCell(element.parentNode?.parentNode)) {\n    cell = element.parentNode.parentNode;\n  }\n  return cell?.getAttribute('data-mat-row') != null ? cell : null;\n}\n/** Checks whether a value is the start of a range. */\nfunction isStart(value, start, end) {\n  return end !== null && start !== end && value < end && value === start;\n}\n/** Checks whether a value is the end of a range. */\nfunction isEnd(value, start, end) {\n  return start !== null && start !== end && value >= start && value === end;\n}\n/** Checks whether a value is inside of a range. */\nfunction isInRange(value, start, end, rangeEnabled) {\n  return rangeEnabled && start !== null && end !== null && start !== end && value >= start && value <= end;\n}\n/**\n * Extracts the element that actually corresponds to a touch event's location\n * (rather than the element that initiated the sequence of touch events).\n */\nfunction getActualTouchTarget(event) {\n  const touchLocation = event.changedTouches[0];\n  return document.elementFromPoint(touchLocation.clientX, touchLocation.clientY);\n}\n\n/** A class representing a range of dates. */\nclass DateRange {\n  start;\n  end;\n  /**\n   * Ensures that objects with a `start` and `end` property can't be assigned to a variable that\n   * expects a `DateRange`\n   */\n  // tslint:disable-next-line:no-unused-variable\n  _disableStructuralEquivalency;\n  constructor(/** The start date of the range. */\n  start, /** The end date of the range. */\n  end) {\n    this.start = start;\n    this.end = end;\n  }\n}\n/**\n * A selection model containing a date selection.\n * @docs-private\n */\nlet MatDateSelectionModel = /*#__PURE__*/(() => {\n  class MatDateSelectionModel {\n    selection;\n    _adapter;\n    _selectionChanged = new Subject();\n    /** Emits when the selection has changed. */\n    selectionChanged = this._selectionChanged;\n    constructor(/** The current selection. */\n    selection, _adapter) {\n      this.selection = selection;\n      this._adapter = _adapter;\n      this.selection = selection;\n    }\n    /**\n     * Updates the current selection in the model.\n     * @param value New selection that should be assigned.\n     * @param source Object that triggered the selection change.\n     */\n    updateSelection(value, source) {\n      const oldValue = this.selection;\n      this.selection = value;\n      this._selectionChanged.next({\n        selection: value,\n        source,\n        oldValue\n      });\n    }\n    ngOnDestroy() {\n      this._selectionChanged.complete();\n    }\n    _isValidDateInstance(date) {\n      return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n    }\n    static ɵfac = function MatDateSelectionModel_Factory(__ngFactoryType__) {\n      i0.ɵɵinvalidFactory();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatDateSelectionModel,\n      factory: MatDateSelectionModel.ɵfac\n    });\n  }\n  return MatDateSelectionModel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A selection model that contains a single date.\n * @docs-private\n */\nlet MatSingleDateSelectionModel = /*#__PURE__*/(() => {\n  class MatSingleDateSelectionModel extends MatDateSelectionModel {\n    constructor(adapter) {\n      super(null, adapter);\n    }\n    /**\n     * Adds a date to the current selection. In the case of a single date selection, the added date\n     * simply overwrites the previous selection\n     */\n    add(date) {\n      super.updateSelection(date, this);\n    }\n    /** Checks whether the current selection is valid. */\n    isValid() {\n      return this.selection != null && this._isValidDateInstance(this.selection);\n    }\n    /**\n     * Checks whether the current selection is complete. In the case of a single date selection, this\n     * is true if the current selection is not null.\n     */\n    isComplete() {\n      return this.selection != null;\n    }\n    /** Clones the selection model. */\n    clone() {\n      const clone = new MatSingleDateSelectionModel(this._adapter);\n      clone.updateSelection(this.selection, this);\n      return clone;\n    }\n    static ɵfac = function MatSingleDateSelectionModel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSingleDateSelectionModel)(i0.ɵɵinject(i1.DateAdapter));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatSingleDateSelectionModel,\n      factory: MatSingleDateSelectionModel.ɵfac\n    });\n  }\n  return MatSingleDateSelectionModel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A selection model that contains a date range.\n * @docs-private\n */\nlet MatRangeDateSelectionModel = /*#__PURE__*/(() => {\n  class MatRangeDateSelectionModel extends MatDateSelectionModel {\n    constructor(adapter) {\n      super(new DateRange(null, null), adapter);\n    }\n    /**\n     * Adds a date to the current selection. In the case of a date range selection, the added date\n     * fills in the next `null` value in the range. If both the start and the end already have a date,\n     * the selection is reset so that the given date is the new `start` and the `end` is null.\n     */\n    add(date) {\n      let {\n        start,\n        end\n      } = this.selection;\n      if (start == null) {\n        start = date;\n      } else if (end == null) {\n        end = date;\n      } else {\n        start = date;\n        end = null;\n      }\n      super.updateSelection(new DateRange(start, end), this);\n    }\n    /** Checks whether the current selection is valid. */\n    isValid() {\n      const {\n        start,\n        end\n      } = this.selection;\n      // Empty ranges are valid.\n      if (start == null && end == null) {\n        return true;\n      }\n      // Complete ranges are only valid if both dates are valid and the start is before the end.\n      if (start != null && end != null) {\n        return this._isValidDateInstance(start) && this._isValidDateInstance(end) && this._adapter.compareDate(start, end) <= 0;\n      }\n      // Partial ranges are valid if the start/end is valid.\n      return (start == null || this._isValidDateInstance(start)) && (end == null || this._isValidDateInstance(end));\n    }\n    /**\n     * Checks whether the current selection is complete. In the case of a date range selection, this\n     * is true if the current selection has a non-null `start` and `end`.\n     */\n    isComplete() {\n      return this.selection.start != null && this.selection.end != null;\n    }\n    /** Clones the selection model. */\n    clone() {\n      const clone = new MatRangeDateSelectionModel(this._adapter);\n      clone.updateSelection(this.selection, this);\n      return clone;\n    }\n    static ɵfac = function MatRangeDateSelectionModel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatRangeDateSelectionModel)(i0.ɵɵinject(i1.DateAdapter));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatRangeDateSelectionModel,\n      factory: MatRangeDateSelectionModel.ɵfac\n    });\n  }\n  return MatRangeDateSelectionModel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\nfunction MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n  return parent || new MatSingleDateSelectionModel(adapter);\n}\n/**\n * Used to provide a single selection model to a component.\n * @docs-private\n */\nconst MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER = {\n  provide: MatDateSelectionModel,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY\n};\n/** @docs-private */\nfunction MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n  return parent || new MatRangeDateSelectionModel(adapter);\n}\n/**\n * Used to provide a range selection model to a component.\n * @docs-private\n */\nconst MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER = {\n  provide: MatDateSelectionModel,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY\n};\n\n/** Injection token used to customize the date range selection behavior. */\nconst MAT_DATE_RANGE_SELECTION_STRATEGY = /*#__PURE__*/new InjectionToken('MAT_DATE_RANGE_SELECTION_STRATEGY');\n/** Provides the default date range selection behavior. */\nlet DefaultMatCalendarRangeStrategy = /*#__PURE__*/(() => {\n  class DefaultMatCalendarRangeStrategy {\n    _dateAdapter;\n    constructor(_dateAdapter) {\n      this._dateAdapter = _dateAdapter;\n    }\n    selectionFinished(date, currentRange) {\n      let {\n        start,\n        end\n      } = currentRange;\n      if (start == null) {\n        start = date;\n      } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n        end = date;\n      } else {\n        start = date;\n        end = null;\n      }\n      return new DateRange(start, end);\n    }\n    createPreview(activeDate, currentRange) {\n      let start = null;\n      let end = null;\n      if (currentRange.start && !currentRange.end && activeDate) {\n        start = currentRange.start;\n        end = activeDate;\n      }\n      return new DateRange(start, end);\n    }\n    createDrag(dragOrigin, originalRange, newDate) {\n      let start = originalRange.start;\n      let end = originalRange.end;\n      if (!start || !end) {\n        // Can't drag from an incomplete range.\n        return null;\n      }\n      const adapter = this._dateAdapter;\n      const isRange = adapter.compareDate(start, end) !== 0;\n      const diffYears = adapter.getYear(newDate) - adapter.getYear(dragOrigin);\n      const diffMonths = adapter.getMonth(newDate) - adapter.getMonth(dragOrigin);\n      const diffDays = adapter.getDate(newDate) - adapter.getDate(dragOrigin);\n      if (isRange && adapter.sameDate(dragOrigin, originalRange.start)) {\n        start = newDate;\n        if (adapter.compareDate(newDate, end) > 0) {\n          end = adapter.addCalendarYears(end, diffYears);\n          end = adapter.addCalendarMonths(end, diffMonths);\n          end = adapter.addCalendarDays(end, diffDays);\n        }\n      } else if (isRange && adapter.sameDate(dragOrigin, originalRange.end)) {\n        end = newDate;\n        if (adapter.compareDate(newDate, start) < 0) {\n          start = adapter.addCalendarYears(start, diffYears);\n          start = adapter.addCalendarMonths(start, diffMonths);\n          start = adapter.addCalendarDays(start, diffDays);\n        }\n      } else {\n        start = adapter.addCalendarYears(start, diffYears);\n        start = adapter.addCalendarMonths(start, diffMonths);\n        start = adapter.addCalendarDays(start, diffDays);\n        end = adapter.addCalendarYears(end, diffYears);\n        end = adapter.addCalendarMonths(end, diffMonths);\n        end = adapter.addCalendarDays(end, diffDays);\n      }\n      return new DateRange(start, end);\n    }\n    static ɵfac = function DefaultMatCalendarRangeStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DefaultMatCalendarRangeStrategy)(i0.ɵɵinject(i1.DateAdapter));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DefaultMatCalendarRangeStrategy,\n      factory: DefaultMatCalendarRangeStrategy.ɵfac\n    });\n  }\n  return DefaultMatCalendarRangeStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\nfunction MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY(parent, adapter) {\n  return parent || new DefaultMatCalendarRangeStrategy(adapter);\n}\n/** @docs-private */\nconst MAT_CALENDAR_RANGE_STRATEGY_PROVIDER = {\n  provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MAT_DATE_RANGE_SELECTION_STRATEGY], DateAdapter],\n  useFactory: MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY\n};\nconst DAYS_PER_WEEK = 7;\nlet uniqueIdCounter = 0;\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nlet MatMonthView = /*#__PURE__*/(() => {\n  class MatMonthView {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dateFormats = inject(MAT_DATE_FORMATS, {\n      optional: true\n    });\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _rangeStrategy = inject(MAT_DATE_RANGE_SELECTION_STRATEGY, {\n      optional: true\n    });\n    _rerenderSubscription = Subscription.EMPTY;\n    /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n    _selectionKeyPressed;\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    get activeDate() {\n      return this._activeDate;\n    }\n    set activeDate(value) {\n      const oldActiveDate = this._activeDate;\n      const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n      if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n        this._init();\n      }\n    }\n    _activeDate;\n    /** The currently selected date. */\n    get selected() {\n      return this._selected;\n    }\n    set selected(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n      this._setRanges(this._selected);\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n      return this._minDate;\n    }\n    set minDate(value) {\n      this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n      return this._maxDate;\n    }\n    set maxDate(value) {\n      this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Origin of active drag, or null when dragging is not active. */\n    activeDrag = null;\n    /** Emits when a new date is selected. */\n    selectedChange = new EventEmitter();\n    /** Emits when any date is selected. */\n    _userSelection = new EventEmitter();\n    /** Emits when the user initiates a date range drag via mouse or touch. */\n    dragStarted = new EventEmitter();\n    /**\n     * Emits when the user completes or cancels a date range drag.\n     * Emits null when the drag was canceled or the newly selected date range if completed.\n     */\n    dragEnded = new EventEmitter();\n    /** Emits when any date is activated. */\n    activeDateChange = new EventEmitter();\n    /** The body of calendar table */\n    _matCalendarBody;\n    /** The label for this month (e.g. \"January 2017\"). */\n    _monthLabel;\n    /** Grid of calendar cells representing the dates of the month. */\n    _weeks;\n    /** The number of blank cells in the first row before the 1st of the month. */\n    _firstWeekOffset;\n    /** Start value of the currently-shown date range. */\n    _rangeStart;\n    /** End value of the currently-shown date range. */\n    _rangeEnd;\n    /** Start value of the currently-shown comparison date range. */\n    _comparisonRangeStart;\n    /** End value of the currently-shown comparison date range. */\n    _comparisonRangeEnd;\n    /** Start of the preview range. */\n    _previewStart;\n    /** End of the preview range. */\n    _previewEnd;\n    /** Whether the user is currently selecting a range of dates. */\n    _isRange;\n    /** The date of the month that today falls on. Null if today is in another month. */\n    _todayDate;\n    /** The names of the weekdays. */\n    _weekdays;\n    constructor() {\n      inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._dateAdapter) {\n          throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n          throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n      }\n      this._activeDate = this._dateAdapter.today();\n    }\n    ngAfterContentInit() {\n      this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(() => this._init());\n    }\n    ngOnChanges(changes) {\n      const comparisonChange = changes['comparisonStart'] || changes['comparisonEnd'];\n      if (comparisonChange && !comparisonChange.firstChange) {\n        this._setRanges(this.selected);\n      }\n      if (changes['activeDrag'] && !this.activeDrag) {\n        this._clearPreview();\n      }\n    }\n    ngOnDestroy() {\n      this._rerenderSubscription.unsubscribe();\n    }\n    /** Handles when a new date is selected. */\n    _dateSelected(event) {\n      const date = event.value;\n      const selectedDate = this._getDateFromDayOfMonth(date);\n      let rangeStartDate;\n      let rangeEndDate;\n      if (this._selected instanceof DateRange) {\n        rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n        rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n      } else {\n        rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n      }\n      if (rangeStartDate !== date || rangeEndDate !== date) {\n        this.selectedChange.emit(selectedDate);\n      }\n      this._userSelection.emit({\n        value: selectedDate,\n        event: event.event\n      });\n      this._clearPreview();\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n     * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n     * that date.\n     *\n     * This function is used to match each component's model of the active date with the calendar\n     * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n     * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n     * updated value asynchronously via the `activeCell` Input.\n     */\n    _updateActiveDate(event) {\n      const month = event.value;\n      const oldActiveDate = this._activeDate;\n      this.activeDate = this._getDateFromDayOfMonth(month);\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this._activeDate);\n      }\n    }\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeydown(event) {\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n      const oldActiveDate = this._activeDate;\n      const isRtl = this._isRtl();\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n          break;\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n          break;\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n          break;\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n          break;\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n          break;\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate));\n          break;\n        case PAGE_UP:\n          this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, -1) : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n          break;\n        case PAGE_DOWN:\n          this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, 1) : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n          break;\n        case ENTER:\n        case SPACE:\n          this._selectionKeyPressed = true;\n          if (this._canSelect(this._activeDate)) {\n            // Prevent unexpected default actions such as form submission.\n            // Note that we only prevent the default action here while the selection happens in\n            // `keyup` below. We can't do the selection here, because it can cause the calendar to\n            // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n            // because it's too late (see #23305).\n            event.preventDefault();\n          }\n          return;\n        case ESCAPE:\n          // Abort the current range selection if the user presses escape mid-selection.\n          if (this._previewEnd != null && !hasModifierKey(event)) {\n            this._clearPreview();\n            // If a drag is in progress, cancel the drag without changing the\n            // current selection.\n            if (this.activeDrag) {\n              this.dragEnded.emit({\n                value: null,\n                event\n              });\n            } else {\n              this.selectedChange.emit(null);\n              this._userSelection.emit({\n                value: null,\n                event\n              });\n            }\n            event.preventDefault();\n            event.stopPropagation(); // Prevents the overlay from closing.\n          }\n          return;\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n        this._focusActiveCellAfterViewChecked();\n      }\n      // Prevent unexpected default actions such as form submission.\n      event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeyup(event) {\n      if (event.keyCode === SPACE || event.keyCode === ENTER) {\n        if (this._selectionKeyPressed && this._canSelect(this._activeDate)) {\n          this._dateSelected({\n            value: this._dateAdapter.getDate(this._activeDate),\n            event\n          });\n        }\n        this._selectionKeyPressed = false;\n      }\n    }\n    /** Initializes this month view. */\n    _init() {\n      this._setRanges(this.selected);\n      this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n      this._monthLabel = this._dateFormats.display.monthLabel ? this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthLabel) : this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n      let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n      this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n      this._initWeekdays();\n      this._createWeekCells();\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(movePreview) {\n      this._matCalendarBody._focusActiveCell(movePreview);\n    }\n    /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n    _focusActiveCellAfterViewChecked() {\n      this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n    }\n    /** Called when the user has activated a new cell and the preview needs to be updated. */\n    _previewChanged({\n      event,\n      value: cell\n    }) {\n      if (this._rangeStrategy) {\n        // We can assume that this will be a range, because preview\n        // events aren't fired for single date selections.\n        const value = cell ? cell.rawValue : null;\n        const previewRange = this._rangeStrategy.createPreview(value, this.selected, event);\n        this._previewStart = this._getCellCompareValue(previewRange.start);\n        this._previewEnd = this._getCellCompareValue(previewRange.end);\n        if (this.activeDrag && value) {\n          const dragRange = this._rangeStrategy.createDrag?.(this.activeDrag.value, this.selected, value, event);\n          if (dragRange) {\n            this._previewStart = this._getCellCompareValue(dragRange.start);\n            this._previewEnd = this._getCellCompareValue(dragRange.end);\n          }\n        }\n        // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n        // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n        // when navigating one month back using the keyboard which will cause this handler\n        // to throw a \"changed after checked\" error when updating the preview state.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Called when the user has ended a drag. If the drag/drop was successful,\n     * computes and emits the new range selection.\n     */\n    _dragEnded(event) {\n      if (!this.activeDrag) return;\n      if (event.value) {\n        // Propagate drag effect\n        const dragDropResult = this._rangeStrategy?.createDrag?.(this.activeDrag.value, this.selected, event.value, event.event);\n        this.dragEnded.emit({\n          value: dragDropResult ?? null,\n          event: event.event\n        });\n      } else {\n        this.dragEnded.emit({\n          value: null,\n          event: event.event\n        });\n      }\n    }\n    /**\n     * Takes a day of the month and returns a new date in the same month and year as the currently\n     *  active date. The returned date will have the same day of the month as the argument date.\n     */\n    _getDateFromDayOfMonth(dayOfMonth) {\n      return this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), dayOfMonth);\n    }\n    /** Initializes the weekdays. */\n    _initWeekdays() {\n      const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n      const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n      const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n      // Rotate the labels for days of the week based on the configured first day of the week.\n      let weekdays = longWeekdays.map((long, i) => {\n        return {\n          long,\n          narrow: narrowWeekdays[i],\n          id: uniqueIdCounter++\n        };\n      });\n      this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n    }\n    /** Creates MatCalendarCells for the dates in this month. */\n    _createWeekCells() {\n      const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n      const dateNames = this._dateAdapter.getDateNames();\n      this._weeks = [[]];\n      for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n        if (cell == DAYS_PER_WEEK) {\n          this._weeks.push([]);\n          cell = 0;\n        }\n        const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n        const enabled = this._shouldEnableDate(date);\n        const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n        const cellClasses = this.dateClass ? this.dateClass(date, 'month') : undefined;\n        this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses, this._getCellCompareValue(date), date));\n      }\n    }\n    /** Date filter for the month */\n    _shouldEnableDate(date) {\n      return !!date && (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) && (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) && (!this.dateFilter || this.dateFilter(date));\n    }\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    _getDateInCurrentMonth(date) {\n      return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;\n    }\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    _hasSameMonthAndYear(d1, d2) {\n      return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) && this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    }\n    /** Gets the value that will be used to one cell to another. */\n    _getCellCompareValue(date) {\n      if (date) {\n        // We use the time since the Unix epoch to compare dates in this view, rather than the\n        // cell values, because we need to support ranges that span across multiple months/years.\n        const year = this._dateAdapter.getYear(date);\n        const month = this._dateAdapter.getMonth(date);\n        const day = this._dateAdapter.getDate(date);\n        return new Date(year, month, day).getTime();\n      }\n      return null;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the current range based on a model value. */\n    _setRanges(selectedValue) {\n      if (selectedValue instanceof DateRange) {\n        this._rangeStart = this._getCellCompareValue(selectedValue.start);\n        this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n        this._isRange = true;\n      } else {\n        this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n        this._isRange = false;\n      }\n      this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n      this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n    }\n    /** Gets whether a date can be selected in the month view. */\n    _canSelect(date) {\n      return !this.dateFilter || this.dateFilter(date);\n    }\n    /** Clears out preview state. */\n    _clearPreview() {\n      this._previewStart = this._previewEnd = null;\n    }\n    static ɵfac = function MatMonthView_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatMonthView)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatMonthView,\n      selectors: [[\"mat-month-view\"]],\n      viewQuery: function MatMonthView_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatCalendarBody, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n        }\n      },\n      inputs: {\n        activeDate: \"activeDate\",\n        selected: \"selected\",\n        minDate: \"minDate\",\n        maxDate: \"maxDate\",\n        dateFilter: \"dateFilter\",\n        dateClass: \"dateClass\",\n        comparisonStart: \"comparisonStart\",\n        comparisonEnd: \"comparisonEnd\",\n        startDateAccessibleName: \"startDateAccessibleName\",\n        endDateAccessibleName: \"endDateAccessibleName\",\n        activeDrag: \"activeDrag\"\n      },\n      outputs: {\n        selectedChange: \"selectedChange\",\n        _userSelection: \"_userSelection\",\n        dragStarted: \"dragStarted\",\n        dragEnded: \"dragEnded\",\n        activeDateChange: \"activeDateChange\"\n      },\n      exportAs: [\"matMonthView\"],\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 8,\n      vars: 14,\n      consts: [[\"role\", \"grid\", 1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"scope\", \"col\"], [\"aria-hidden\", \"true\"], [\"colspan\", \"7\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"selectedValueChange\", \"activeDateChange\", \"previewChange\", \"dragStarted\", \"dragEnded\", \"keyup\", \"keydown\", \"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\", \"isRange\", \"labelMinRequiredCells\", \"activeCell\", \"startDateAccessibleName\", \"endDateAccessibleName\"], [1, \"cdk-visually-hidden\"]],\n      template: function MatMonthView_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\", 1)(2, \"tr\");\n          i0.ɵɵrepeaterCreate(3, MatMonthView_For_4_Template, 5, 2, \"th\", 2, _forTrack1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"tr\", 3);\n          i0.ɵɵelement(6, \"th\", 4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"tbody\", 5);\n          i0.ɵɵlistener(\"selectedValueChange\", function MatMonthView_Template_tbody_selectedValueChange_7_listener($event) {\n            return ctx._dateSelected($event);\n          })(\"activeDateChange\", function MatMonthView_Template_tbody_activeDateChange_7_listener($event) {\n            return ctx._updateActiveDate($event);\n          })(\"previewChange\", function MatMonthView_Template_tbody_previewChange_7_listener($event) {\n            return ctx._previewChanged($event);\n          })(\"dragStarted\", function MatMonthView_Template_tbody_dragStarted_7_listener($event) {\n            return ctx.dragStarted.emit($event);\n          })(\"dragEnded\", function MatMonthView_Template_tbody_dragEnded_7_listener($event) {\n            return ctx._dragEnded($event);\n          })(\"keyup\", function MatMonthView_Template_tbody_keyup_7_listener($event) {\n            return ctx._handleCalendarBodyKeyup($event);\n          })(\"keydown\", function MatMonthView_Template_tbody_keydown_7_listener($event) {\n            return ctx._handleCalendarBodyKeydown($event);\n          });\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵrepeater(ctx._weekdays);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"label\", ctx._monthLabel)(\"rows\", ctx._weeks)(\"todayValue\", ctx._todayDate)(\"startValue\", ctx._rangeStart)(\"endValue\", ctx._rangeEnd)(\"comparisonStart\", ctx._comparisonRangeStart)(\"comparisonEnd\", ctx._comparisonRangeEnd)(\"previewStart\", ctx._previewStart)(\"previewEnd\", ctx._previewEnd)(\"isRange\", ctx._isRange)(\"labelMinRequiredCells\", 3)(\"activeCell\", ctx._dateAdapter.getDate(ctx.activeDate) - 1)(\"startDateAccessibleName\", ctx.startDateAccessibleName)(\"endDateAccessibleName\", ctx.endDateAccessibleName);\n        }\n      },\n      dependencies: [MatCalendarBody],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatMonthView;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst yearsPerPage = 24;\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\nlet MatMultiYearView = /*#__PURE__*/(() => {\n  class MatMultiYearView {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _rerenderSubscription = Subscription.EMPTY;\n    /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n    _selectionKeyPressed;\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    get activeDate() {\n      return this._activeDate;\n    }\n    set activeDate(value) {\n      let oldActiveDate = this._activeDate;\n      const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n      if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n        this._init();\n      }\n    }\n    _activeDate;\n    /** The currently selected date. */\n    get selected() {\n      return this._selected;\n    }\n    set selected(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n      this._setSelectedYear(value);\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n      return this._minDate;\n    }\n    set minDate(value) {\n      this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n      return this._maxDate;\n    }\n    set maxDate(value) {\n      this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to date cells. */\n    dateClass;\n    /** Emits when a new year is selected. */\n    selectedChange = new EventEmitter();\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    yearSelected = new EventEmitter();\n    /** Emits when any date is activated. */\n    activeDateChange = new EventEmitter();\n    /** The body of calendar table */\n    _matCalendarBody;\n    /** Grid of calendar cells representing the currently displayed years. */\n    _years;\n    /** The year that today falls on. */\n    _todayYear;\n    /** The year of the selected date. Null if the selected date is null. */\n    _selectedYear;\n    constructor() {\n      if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      this._activeDate = this._dateAdapter.today();\n    }\n    ngAfterContentInit() {\n      this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(() => this._init());\n    }\n    ngOnDestroy() {\n      this._rerenderSubscription.unsubscribe();\n    }\n    /** Initializes this multi-year view. */\n    _init() {\n      this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n      // We want a range years such that we maximize the number of\n      // enabled dates visible at once. This prevents issues where the minimum year\n      // is the last item of a page OR the maximum year is the first item of a page.\n      // The offset from the active year to the \"slot\" for the starting year is the\n      // *actual* first rendered year in the multi-year view.\n      const activeYear = this._dateAdapter.getYear(this._activeDate);\n      const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n      this._years = [];\n      for (let i = 0, row = []; i < yearsPerPage; i++) {\n        row.push(minYearOfPage + i);\n        if (row.length == yearsPerRow) {\n          this._years.push(row.map(year => this._createCellForYear(year)));\n          row = [];\n        }\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Handles when a new year is selected. */\n    _yearSelected(event) {\n      const year = event.value;\n      const selectedYear = this._dateAdapter.createDate(year, 0, 1);\n      const selectedDate = this._getDateFromYear(year);\n      this.yearSelected.emit(selectedYear);\n      this.selectedChange.emit(selectedDate);\n    }\n    /**\n     * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n     * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n     * that date.\n     *\n     * This function is used to match each component's model of the active date with the calendar\n     * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n     * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n     * updated value asynchronously via the `activeCell` Input.\n     */\n    _updateActiveDate(event) {\n      const year = event.value;\n      const oldActiveDate = this._activeDate;\n      this.activeDate = this._getDateFromYear(year);\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n    }\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeydown(event) {\n      const oldActiveDate = this._activeDate;\n      const isRtl = this._isRtl();\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n          break;\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n          break;\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n          break;\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n          break;\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n          break;\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n          break;\n        case PAGE_UP:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n          break;\n        case PAGE_DOWN:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n          break;\n        case ENTER:\n        case SPACE:\n          // Note that we only prevent the default action here while the selection happens in\n          // `keyup` below. We can't do the selection here, because it can cause the calendar to\n          // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n          // because it's too late (see #23305).\n          this._selectionKeyPressed = true;\n          break;\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n      this._focusActiveCellAfterViewChecked();\n      // Prevent unexpected default actions such as form submission.\n      event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeyup(event) {\n      if (event.keyCode === SPACE || event.keyCode === ENTER) {\n        if (this._selectionKeyPressed) {\n          this._yearSelected({\n            value: this._dateAdapter.getYear(this._activeDate),\n            event\n          });\n        }\n        this._selectionKeyPressed = false;\n      }\n    }\n    _getActiveCell() {\n      return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell() {\n      this._matCalendarBody._focusActiveCell();\n    }\n    /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n    _focusActiveCellAfterViewChecked() {\n      this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n    }\n    /**\n     * Takes a year and returns a new date on the same day and month as the currently active date\n     *  The returned date will have the same year as the argument date.\n     */\n    _getDateFromYear(year) {\n      const activeMonth = this._dateAdapter.getMonth(this.activeDate);\n      const daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, activeMonth, 1));\n      const normalizedDate = this._dateAdapter.createDate(year, activeMonth, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth));\n      return normalizedDate;\n    }\n    /** Creates an MatCalendarCell for the given year. */\n    _createCellForYear(year) {\n      const date = this._dateAdapter.createDate(year, 0, 1);\n      const yearName = this._dateAdapter.getYearName(date);\n      const cellClasses = this.dateClass ? this.dateClass(date, 'multi-year') : undefined;\n      return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year), cellClasses);\n    }\n    /** Whether the given year is enabled. */\n    _shouldEnableYear(year) {\n      // disable if the year is greater than maxDate lower than minDate\n      if (year === undefined || year === null || this.maxDate && year > this._dateAdapter.getYear(this.maxDate) || this.minDate && year < this._dateAdapter.getYear(this.minDate)) {\n        return false;\n      }\n      // enable if it reaches here and there's no filter defined\n      if (!this.dateFilter) {\n        return true;\n      }\n      const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n      // If any date in the year is enabled count the year as enabled.\n      for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n        if (this.dateFilter(date)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the currently-highlighted year based on a model value. */\n    _setSelectedYear(value) {\n      this._selectedYear = null;\n      if (value instanceof DateRange) {\n        const displayValue = value.start || value.end;\n        if (displayValue) {\n          this._selectedYear = this._dateAdapter.getYear(displayValue);\n        }\n      } else if (value) {\n        this._selectedYear = this._dateAdapter.getYear(value);\n      }\n    }\n    static ɵfac = function MatMultiYearView_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatMultiYearView)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatMultiYearView,\n      selectors: [[\"mat-multi-year-view\"]],\n      viewQuery: function MatMultiYearView_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatCalendarBody, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n        }\n      },\n      inputs: {\n        activeDate: \"activeDate\",\n        selected: \"selected\",\n        minDate: \"minDate\",\n        maxDate: \"maxDate\",\n        dateFilter: \"dateFilter\",\n        dateClass: \"dateClass\"\n      },\n      outputs: {\n        selectedChange: \"selectedChange\",\n        yearSelected: \"yearSelected\",\n        activeDateChange: \"activeDateChange\"\n      },\n      exportAs: [\"matMultiYearView\"],\n      decls: 5,\n      vars: 7,\n      consts: [[\"role\", \"grid\", 1, \"mat-calendar-table\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"selectedValueChange\", \"activeDateChange\", \"keyup\", \"keydown\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"numCols\", \"cellAspectRatio\", \"activeCell\"]],\n      template: function MatMultiYearView_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\", 1)(2, \"tr\");\n          i0.ɵɵelement(3, \"th\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"tbody\", 3);\n          i0.ɵɵlistener(\"selectedValueChange\", function MatMultiYearView_Template_tbody_selectedValueChange_4_listener($event) {\n            return ctx._yearSelected($event);\n          })(\"activeDateChange\", function MatMultiYearView_Template_tbody_activeDateChange_4_listener($event) {\n            return ctx._updateActiveDate($event);\n          })(\"keyup\", function MatMultiYearView_Template_tbody_keyup_4_listener($event) {\n            return ctx._handleCalendarBodyKeyup($event);\n          })(\"keydown\", function MatMultiYearView_Template_tbody_keydown_4_listener($event) {\n            return ctx._handleCalendarBodyKeydown($event);\n          });\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"rows\", ctx._years)(\"todayValue\", ctx._todayYear)(\"startValue\", ctx._selectedYear)(\"endValue\", ctx._selectedYear)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._getActiveCell());\n        }\n      },\n      dependencies: [MatCalendarBody],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatMultiYearView;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) === Math.floor((year2 - startingYear) / yearsPerPage);\n}\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);\n}\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo(a, b) {\n  return (a % b + b) % b;\n}\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nlet MatYearView = /*#__PURE__*/(() => {\n  class MatYearView {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dateFormats = inject(MAT_DATE_FORMATS, {\n      optional: true\n    });\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _rerenderSubscription = Subscription.EMPTY;\n    /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n    _selectionKeyPressed;\n    /** The date to display in this year view (everything other than the year is ignored). */\n    get activeDate() {\n      return this._activeDate;\n    }\n    set activeDate(value) {\n      let oldActiveDate = this._activeDate;\n      const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n      if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n        this._init();\n      }\n    }\n    _activeDate;\n    /** The currently selected date. */\n    get selected() {\n      return this._selected;\n    }\n    set selected(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n      this._setSelectedMonth(value);\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n      return this._minDate;\n    }\n    set minDate(value) {\n      this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n      return this._maxDate;\n    }\n    set maxDate(value) {\n      this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to date cells. */\n    dateClass;\n    /** Emits when a new month is selected. */\n    selectedChange = new EventEmitter();\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    monthSelected = new EventEmitter();\n    /** Emits when any date is activated. */\n    activeDateChange = new EventEmitter();\n    /** The body of calendar table */\n    _matCalendarBody;\n    /** Grid of calendar cells representing the months of the year. */\n    _months;\n    /** The label for this year (e.g. \"2017\"). */\n    _yearLabel;\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    _todayMonth;\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    _selectedMonth;\n    constructor() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._dateAdapter) {\n          throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n          throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n      }\n      this._activeDate = this._dateAdapter.today();\n    }\n    ngAfterContentInit() {\n      this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(() => this._init());\n    }\n    ngOnDestroy() {\n      this._rerenderSubscription.unsubscribe();\n    }\n    /** Handles when a new month is selected. */\n    _monthSelected(event) {\n      const month = event.value;\n      const selectedMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n      this.monthSelected.emit(selectedMonth);\n      const selectedDate = this._getDateFromMonth(month);\n      this.selectedChange.emit(selectedDate);\n    }\n    /**\n     * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n     * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n     * that date.\n     *\n     * This function is used to match each component's model of the active date with the calendar\n     * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n     * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n     * updated value asynchronously via the `activeCell` Input.\n     */\n    _updateActiveDate(event) {\n      const month = event.value;\n      const oldActiveDate = this._activeDate;\n      this.activeDate = this._getDateFromMonth(month);\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n    }\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeydown(event) {\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n      const oldActiveDate = this._activeDate;\n      const isRtl = this._isRtl();\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n          break;\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n          break;\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n          break;\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n          break;\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n          break;\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n          break;\n        case PAGE_UP:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n          break;\n        case PAGE_DOWN:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n          break;\n        case ENTER:\n        case SPACE:\n          // Note that we only prevent the default action here while the selection happens in\n          // `keyup` below. We can't do the selection here, because it can cause the calendar to\n          // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n          // because it's too late (see #23305).\n          this._selectionKeyPressed = true;\n          break;\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n        this._focusActiveCellAfterViewChecked();\n      }\n      // Prevent unexpected default actions such as form submission.\n      event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeyup(event) {\n      if (event.keyCode === SPACE || event.keyCode === ENTER) {\n        if (this._selectionKeyPressed) {\n          this._monthSelected({\n            value: this._dateAdapter.getMonth(this._activeDate),\n            event\n          });\n        }\n        this._selectionKeyPressed = false;\n      }\n    }\n    /** Initializes this year view. */\n    _init() {\n      this._setSelectedMonth(this.selected);\n      this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n      this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n      let monthNames = this._dateAdapter.getMonthNames('short');\n      // First row of months only contains 5 elements so we can fit the year label on the same row.\n      this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell() {\n      this._matCalendarBody._focusActiveCell();\n    }\n    /** Schedules the matCalendarBody to focus the active cell after change detection has run */\n    _focusActiveCellAfterViewChecked() {\n      this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n    }\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    _getMonthInCurrentYear(date) {\n      return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ? this._dateAdapter.getMonth(date) : null;\n    }\n    /**\n     * Takes a month and returns a new date in the same day and year as the currently active date.\n     *  The returned date will have the same month as the argument date.\n     */\n    _getDateFromMonth(month) {\n      const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n      const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n      return this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth));\n    }\n    /** Creates an MatCalendarCell for the given month. */\n    _createCellForMonth(month, monthName) {\n      const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.monthYearA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date, 'year') : undefined;\n      return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month), cellClasses);\n    }\n    /** Whether the given month is enabled. */\n    _shouldEnableMonth(month) {\n      const activeYear = this._dateAdapter.getYear(this.activeDate);\n      if (month === undefined || month === null || this._isYearAndMonthAfterMaxDate(activeYear, month) || this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n        return false;\n      }\n      if (!this.dateFilter) {\n        return true;\n      }\n      const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n      // If any date in the month is enabled count the month as enabled.\n      for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n        if (this.dateFilter(date)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    _isYearAndMonthAfterMaxDate(year, month) {\n      if (this.maxDate) {\n        const maxYear = this._dateAdapter.getYear(this.maxDate);\n        const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n        return year > maxYear || year === maxYear && month > maxMonth;\n      }\n      return false;\n    }\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    _isYearAndMonthBeforeMinDate(year, month) {\n      if (this.minDate) {\n        const minYear = this._dateAdapter.getYear(this.minDate);\n        const minMonth = this._dateAdapter.getMonth(this.minDate);\n        return year < minYear || year === minYear && month < minMonth;\n      }\n      return false;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the currently-selected month based on a model value. */\n    _setSelectedMonth(value) {\n      if (value instanceof DateRange) {\n        this._selectedMonth = this._getMonthInCurrentYear(value.start) || this._getMonthInCurrentYear(value.end);\n      } else {\n        this._selectedMonth = this._getMonthInCurrentYear(value);\n      }\n    }\n    static ɵfac = function MatYearView_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatYearView)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatYearView,\n      selectors: [[\"mat-year-view\"]],\n      viewQuery: function MatYearView_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatCalendarBody, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n        }\n      },\n      inputs: {\n        activeDate: \"activeDate\",\n        selected: \"selected\",\n        minDate: \"minDate\",\n        maxDate: \"maxDate\",\n        dateFilter: \"dateFilter\",\n        dateClass: \"dateClass\"\n      },\n      outputs: {\n        selectedChange: \"selectedChange\",\n        monthSelected: \"monthSelected\",\n        activeDateChange: \"activeDateChange\"\n      },\n      exportAs: [\"matYearView\"],\n      decls: 5,\n      vars: 9,\n      consts: [[\"role\", \"grid\", 1, \"mat-calendar-table\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"selectedValueChange\", \"activeDateChange\", \"keyup\", \"keydown\", \"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"cellAspectRatio\", \"activeCell\"]],\n      template: function MatYearView_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\", 1)(2, \"tr\");\n          i0.ɵɵelement(3, \"th\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"tbody\", 3);\n          i0.ɵɵlistener(\"selectedValueChange\", function MatYearView_Template_tbody_selectedValueChange_4_listener($event) {\n            return ctx._monthSelected($event);\n          })(\"activeDateChange\", function MatYearView_Template_tbody_activeDateChange_4_listener($event) {\n            return ctx._updateActiveDate($event);\n          })(\"keyup\", function MatYearView_Template_tbody_keyup_4_listener($event) {\n            return ctx._handleCalendarBodyKeyup($event);\n          })(\"keydown\", function MatYearView_Template_tbody_keydown_4_listener($event) {\n            return ctx._handleCalendarBodyKeydown($event);\n          });\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"label\", ctx._yearLabel)(\"rows\", ctx._months)(\"todayValue\", ctx._todayMonth)(\"startValue\", ctx._selectedMonth)(\"endValue\", ctx._selectedMonth)(\"labelMinRequiredCells\", 2)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._dateAdapter.getMonth(ctx.activeDate));\n        }\n      },\n      dependencies: [MatCalendarBody],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatYearView;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Default header for MatCalendar */\nlet MatCalendarHeader = /*#__PURE__*/(() => {\n  class MatCalendarHeader {\n    _intl = inject(MatDatepickerIntl);\n    calendar = inject(MatCalendar);\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dateFormats = inject(MAT_DATE_FORMATS, {\n      optional: true\n    });\n    constructor() {\n      inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n      const changeDetectorRef = inject(ChangeDetectorRef);\n      this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n    /** The display text for the current calendar view. */\n    get periodButtonText() {\n      if (this.calendar.currentView == 'month') {\n        return this._dateAdapter.format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n      }\n      if (this.calendar.currentView == 'year') {\n        return this._dateAdapter.getYearName(this.calendar.activeDate);\n      }\n      return this._intl.formatYearRange(...this._formatMinAndMaxYearLabels());\n    }\n    /** The aria description for the current calendar view. */\n    get periodButtonDescription() {\n      if (this.calendar.currentView == 'month') {\n        return this._dateAdapter.format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n      }\n      if (this.calendar.currentView == 'year') {\n        return this._dateAdapter.getYearName(this.calendar.activeDate);\n      }\n      // Format a label for the window of years displayed in the multi-year calendar view. Use\n      // `formatYearRangeLabel` because it is TTS friendly.\n      return this._intl.formatYearRangeLabel(...this._formatMinAndMaxYearLabels());\n    }\n    /** The `aria-label` for changing the calendar view. */\n    get periodButtonLabel() {\n      return this.calendar.currentView == 'month' ? this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n    }\n    /** The label for the previous button. */\n    get prevButtonLabel() {\n      return {\n        'month': this._intl.prevMonthLabel,\n        'year': this._intl.prevYearLabel,\n        'multi-year': this._intl.prevMultiYearLabel\n      }[this.calendar.currentView];\n    }\n    /** The label for the next button. */\n    get nextButtonLabel() {\n      return {\n        'month': this._intl.nextMonthLabel,\n        'year': this._intl.nextYearLabel,\n        'multi-year': this._intl.nextMultiYearLabel\n      }[this.calendar.currentView];\n    }\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked() {\n      this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    }\n    /** Handles user clicks on the previous button. */\n    previousClicked() {\n      this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    }\n    /** Handles user clicks on the next button. */\n    nextClicked() {\n      this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    }\n    /** Whether the previous period button is enabled. */\n    previousEnabled() {\n      if (!this.calendar.minDate) {\n        return true;\n      }\n      return !this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n    /** Whether the next period button is enabled. */\n    nextEnabled() {\n      return !this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    _isSameView(date1, date2) {\n      if (this.calendar.currentView == 'month') {\n        return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n      }\n      if (this.calendar.currentView == 'year') {\n        return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n      }\n      // Otherwise we are in 'multi-year' view.\n      return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n    }\n    /**\n     * Format two individual labels for the minimum year and maximum year available in the multi-year\n     * calendar view. Returns an array of two strings where the first string is the formatted label\n     * for the minimum year, and the second string is the formatted label for the maximum year.\n     */\n    _formatMinAndMaxYearLabels() {\n      // The offset from the active year to the \"slot\" for the starting year is the\n      // *actual* first rendered year in the multi-year view, and the last year is\n      // just yearsPerPage - 1 away.\n      const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n      const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n      const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n      const minYearLabel = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n      const maxYearLabel = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n      return [minYearLabel, maxYearLabel];\n    }\n    _periodButtonLabelId = inject(_IdGenerator).getId('mat-calendar-period-label-');\n    static ɵfac = function MatCalendarHeader_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCalendarHeader)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatCalendarHeader,\n      selectors: [[\"mat-calendar-header\"]],\n      exportAs: [\"matCalendarHeader\"],\n      ngContentSelectors: _c1,\n      decls: 17,\n      vars: 11,\n      consts: [[1, \"mat-calendar-header\"], [1, \"mat-calendar-controls\"], [\"aria-live\", \"polite\", 1, \"cdk-visually-hidden\", 3, \"id\"], [\"mat-button\", \"\", \"type\", \"button\", 1, \"mat-calendar-period-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"viewBox\", \"0 0 10 5\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 1, \"mat-calendar-arrow\"], [\"points\", \"0,0 5,5 10,0\"], [1, \"mat-calendar-spacer\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-calendar-previous-button\", 3, \"click\", \"disabled\"], [\"viewBox\", \"0 0 24 24\", \"focusable\", \"false\", \"aria-hidden\", \"true\"], [\"d\", \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-calendar-next-button\", 3, \"click\", \"disabled\"], [\"d\", \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"]],\n      template: function MatCalendarHeader_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\", 2);\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_4_listener() {\n            return ctx.currentPeriodClicked();\n          });\n          i0.ɵɵelementStart(5, \"span\", 4);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(7, \"svg\", 5);\n          i0.ɵɵelement(8, \"polygon\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵnamespaceHTML();\n          i0.ɵɵelement(9, \"div\", 7);\n          i0.ɵɵprojection(10);\n          i0.ɵɵelementStart(11, \"button\", 8);\n          i0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_11_listener() {\n            return ctx.previousClicked();\n          });\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(12, \"svg\", 9);\n          i0.ɵɵelement(13, \"path\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵnamespaceHTML();\n          i0.ɵɵelementStart(14, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_14_listener() {\n            return ctx.nextClicked();\n          });\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(15, \"svg\", 9);\n          i0.ɵɵelement(16, \"path\", 12);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"id\", ctx._periodButtonLabelId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx.periodButtonDescription);\n          i0.ɵɵadvance();\n          i0.ɵɵattribute(\"aria-label\", ctx.periodButtonLabel)(\"aria-describedby\", ctx._periodButtonLabelId);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.periodButtonText);\n          i0.ɵɵadvance();\n          i0.ɵɵclassProp(\"mat-calendar-invert\", ctx.calendar.currentView !== \"month\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", !ctx.previousEnabled());\n          i0.ɵɵattribute(\"aria-label\", ctx.prevButtonLabel);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"disabled\", !ctx.nextEnabled());\n          i0.ɵɵattribute(\"aria-label\", ctx.nextButtonLabel);\n        }\n      },\n      dependencies: [MatButton, MatIconButton],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatCalendarHeader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** A calendar that is used as part of the datepicker. */\nlet MatCalendar = /*#__PURE__*/(() => {\n  class MatCalendar {\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dateFormats = inject(MAT_DATE_FORMATS, {\n      optional: true\n    });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    /** An input indicating the type of the header component, if set. */\n    headerComponent;\n    /** A portal containing the header component type for this calendar. */\n    _calendarHeaderPortal;\n    _intlChanges;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    _moveFocusOnNextTick = false;\n    /** A date representing the period (month or year) to start the calendar in. */\n    get startAt() {\n      return this._startAt;\n    }\n    set startAt(value) {\n      this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _startAt;\n    /** Whether the calendar should be started in month or year view. */\n    startView = 'month';\n    /** The currently selected date. */\n    get selected() {\n      return this._selected;\n    }\n    set selected(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n      return this._minDate;\n    }\n    set minDate(value) {\n      this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n      return this._maxDate;\n    }\n    set maxDate(value) {\n      this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Emits when the currently selected date changes. */\n    selectedChange = new EventEmitter();\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    yearSelected = new EventEmitter();\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    monthSelected = new EventEmitter();\n    /**\n     * Emits when the current view changes.\n     */\n    viewChanged = new EventEmitter(true);\n    /** Emits when any date is selected. */\n    _userSelection = new EventEmitter();\n    /** Emits a new date range value when the user completes a drag drop operation. */\n    _userDragDrop = new EventEmitter();\n    /** Reference to the current month view component. */\n    monthView;\n    /** Reference to the current year view component. */\n    yearView;\n    /** Reference to the current multi-year view component. */\n    multiYearView;\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate() {\n      return this._clampedActiveDate;\n    }\n    set activeDate(value) {\n      this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n      this.stateChanges.next();\n      this._changeDetectorRef.markForCheck();\n    }\n    _clampedActiveDate;\n    /** Whether the calendar is in month view. */\n    get currentView() {\n      return this._currentView;\n    }\n    set currentView(value) {\n      const viewChangedResult = this._currentView !== value ? value : null;\n      this._currentView = value;\n      this._moveFocusOnNextTick = true;\n      this._changeDetectorRef.markForCheck();\n      if (viewChangedResult) {\n        this.viewChanged.emit(viewChangedResult);\n      }\n    }\n    _currentView;\n    /** Origin of active drag, or null when dragging is not active. */\n    _activeDrag = null;\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject();\n    constructor() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._dateAdapter) {\n          throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n          throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n      }\n      this._intlChanges = inject(MatDatepickerIntl).changes.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n    }\n    ngAfterContentInit() {\n      this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n      this.activeDate = this.startAt || this._dateAdapter.today();\n      // Assign to the private property since we don't want to move focus on init.\n      this._currentView = this.startView;\n    }\n    ngAfterViewChecked() {\n      if (this._moveFocusOnNextTick) {\n        this._moveFocusOnNextTick = false;\n        this.focusActiveCell();\n      }\n    }\n    ngOnDestroy() {\n      this._intlChanges.unsubscribe();\n      this.stateChanges.complete();\n    }\n    ngOnChanges(changes) {\n      // Ignore date changes that are at a different time on the same day. This fixes issues where\n      // the calendar re-renders when there is no meaningful change to [minDate] or [maxDate]\n      // (#24435).\n      const minDateChange = changes['minDate'] && !this._dateAdapter.sameDate(changes['minDate'].previousValue, changes['minDate'].currentValue) ? changes['minDate'] : undefined;\n      const maxDateChange = changes['maxDate'] && !this._dateAdapter.sameDate(changes['maxDate'].previousValue, changes['maxDate'].currentValue) ? changes['maxDate'] : undefined;\n      const changeRequiringRerender = minDateChange || maxDateChange || changes['dateFilter'];\n      if (changeRequiringRerender && !changeRequiringRerender.firstChange) {\n        const view = this._getCurrentViewComponent();\n        if (view) {\n          // Schedule focus to be moved to the active date since re-rendering\n          // can blur the active cell. See #29265.\n          this._moveFocusOnNextTick = true;\n          // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n          // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n          this._changeDetectorRef.detectChanges();\n          view._init();\n        }\n      }\n      this.stateChanges.next();\n    }\n    /** Focuses the active date. */\n    focusActiveCell() {\n      this._getCurrentViewComponent()._focusActiveCell(false);\n    }\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n      this._getCurrentViewComponent()._init();\n    }\n    /** Handles date selection in the month view. */\n    _dateSelected(event) {\n      const date = event.value;\n      if (this.selected instanceof DateRange || date && !this._dateAdapter.sameDate(date, this.selected)) {\n        this.selectedChange.emit(date);\n      }\n      this._userSelection.emit(event);\n    }\n    /** Handles year selection in the multiyear view. */\n    _yearSelectedInMultiYearView(normalizedYear) {\n      this.yearSelected.emit(normalizedYear);\n    }\n    /** Handles month selection in the year view. */\n    _monthSelectedInYearView(normalizedMonth) {\n      this.monthSelected.emit(normalizedMonth);\n    }\n    /** Handles year/month selection in the multi-year/year views. */\n    _goToDateInView(date, view) {\n      this.activeDate = date;\n      this.currentView = view;\n    }\n    /** Called when the user starts dragging to change a date range. */\n    _dragStarted(event) {\n      this._activeDrag = event;\n    }\n    /**\n     * Called when a drag completes. It may end in cancelation or in the selection\n     * of a new range.\n     */\n    _dragEnded(event) {\n      if (!this._activeDrag) return;\n      if (event.value) {\n        this._userDragDrop.emit(event);\n      }\n      this._activeDrag = null;\n    }\n    /** Returns the component instance that corresponds to the current calendar view. */\n    _getCurrentViewComponent() {\n      // The return type is explicitly written as a union to ensure that the Closure compiler does\n      // not optimize calls to _init(). Without the explicit return type, TypeScript narrows it to\n      // only the first component type. See https://github.com/angular/components/issues/22996.\n      return this.monthView || this.yearView || this.multiYearView;\n    }\n    static ɵfac = function MatCalendar_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCalendar)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatCalendar,\n      selectors: [[\"mat-calendar\"]],\n      viewQuery: function MatCalendar_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatMonthView, 5);\n          i0.ɵɵviewQuery(MatYearView, 5);\n          i0.ɵɵviewQuery(MatMultiYearView, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.monthView = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.yearView = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.multiYearView = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-calendar\"],\n      inputs: {\n        headerComponent: \"headerComponent\",\n        startAt: \"startAt\",\n        startView: \"startView\",\n        selected: \"selected\",\n        minDate: \"minDate\",\n        maxDate: \"maxDate\",\n        dateFilter: \"dateFilter\",\n        dateClass: \"dateClass\",\n        comparisonStart: \"comparisonStart\",\n        comparisonEnd: \"comparisonEnd\",\n        startDateAccessibleName: \"startDateAccessibleName\",\n        endDateAccessibleName: \"endDateAccessibleName\"\n      },\n      outputs: {\n        selectedChange: \"selectedChange\",\n        yearSelected: \"yearSelected\",\n        monthSelected: \"monthSelected\",\n        viewChanged: \"viewChanged\",\n        _userSelection: \"_userSelection\",\n        _userDragDrop: \"_userDragDrop\"\n      },\n      exportAs: [\"matCalendar\"],\n      features: [i0.ɵɵProvidersFeature([MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]), i0.ɵɵNgOnChangesFeature],\n      decls: 5,\n      vars: 2,\n      consts: [[3, \"cdkPortalOutlet\"], [\"cdkMonitorSubtreeFocus\", \"\", \"tabindex\", \"-1\", 1, \"mat-calendar-content\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\", \"activeDrag\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\"], [3, \"activeDateChange\", \"_userSelection\", \"dragStarted\", \"dragEnded\", \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\", \"activeDrag\"], [3, \"activeDateChange\", \"monthSelected\", \"selectedChange\", \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\"], [3, \"activeDateChange\", \"yearSelected\", \"selectedChange\", \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\"]],\n      template: function MatCalendar_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, MatCalendar_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n          i0.ɵɵelementStart(1, \"div\", 1);\n          i0.ɵɵtemplate(2, MatCalendar_Case_2_Template, 1, 11, \"mat-month-view\", 2)(3, MatCalendar_Case_3_Template, 1, 6, \"mat-year-view\", 3)(4, MatCalendar_Case_4_Template, 1, 6, \"mat-multi-year-view\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          i0.ɵɵproperty(\"cdkPortalOutlet\", ctx._calendarHeaderPortal);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional((tmp_1_0 = ctx.currentView) === \"month\" ? 2 : tmp_1_0 === \"year\" ? 3 : tmp_1_0 === \"multi-year\" ? 4 : -1);\n        }\n      },\n      dependencies: [CdkPortalOutlet, CdkMonitorFocus, MatMonthView, MatYearView, MatMultiYearView],\n      styles: [\".mat-calendar{display:block;line-height:normal;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size))}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;align-items:center;margin:5% calc(4.7142857143% - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0;margin:0 8px;font-size:var(--mat-datepicker-calendar-period-button-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-period-button-text-weight, var(--mat-sys-title-small-weight));--mdc-text-button-label-text-color:var(--mat-datepicker-calendar-period-button-text-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow{display:inline-block;width:10px;height:5px;margin:0 0 0 5px;vertical-align:middle;fill:var(--mat-datepicker-calendar-period-button-icon-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}@media(forced-colors: active){.mat-calendar-arrow{fill:CanvasText}}.mat-datepicker-content .mat-calendar-previous-button:not(.mat-mdc-button-disabled),.mat-datepicker-content .mat-calendar-next-button:not(.mat-mdc-button-disabled){color:var(--mat-datepicker-calendar-navigation-button-icon-color, var(--mat-sys-on-surface-variant))}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0;color:var(--mat-datepicker-calendar-header-text-color, var(--mat-sys-on-surface-variant));font-size:var(--mat-datepicker-calendar-header-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-header-text-weight, var(--mat-sys-title-small-weight))}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px;background:var(--mat-datepicker-calendar-header-divider-color, transparent)}.mat-calendar-body-cell-content::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 3px)*-1)}.mat-calendar-body-cell:focus .mat-focus-indicator::before{content:\\\"\\\"}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatCalendar;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nconst matDatepickerAnimations = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: /*#__PURE__*/trigger('transformPanel', [/*#__PURE__*/transition('void => enter-dropdown', /*#__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(1, 0.8)'\n  }), /*#__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1, 1)'\n  })]))), /*#__PURE__*/transition('void => enter-dialog', /*#__PURE__*/animate('150ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  }), /*#__PURE__*/style({\n    transform: 'none',\n    opacity: 1\n  })]))), /*#__PURE__*/transition('* => void', /*#__PURE__*/animate('100ms linear', /*#__PURE__*/style({\n    opacity: 0\n  })))]),\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: /*#__PURE__*/trigger('fadeInCalendar', [/*#__PURE__*/state('void', /*#__PURE__*/style({\n    opacity: 0\n  })), /*#__PURE__*/state('enter', /*#__PURE__*/style({\n    opacity: 1\n  })),\n  /*#__PURE__*/\n  // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n  // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n  transition('void => *', /*#__PURE__*/animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))])\n};\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-datepicker-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    const overlay = inject(Overlay);\n    return () => overlay.scrollStrategies.reposition();\n  }\n});\n/** @docs-private */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Component used as the content for the datepicker overlay. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the overlay that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nlet MatDatepickerContent = /*#__PURE__*/(() => {\n  class MatDatepickerContent {\n    _elementRef = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _globalModel = inject(MatDateSelectionModel);\n    _dateAdapter = inject(DateAdapter);\n    _rangeSelectionStrategy = inject(MAT_DATE_RANGE_SELECTION_STRATEGY, {\n      optional: true\n    });\n    _subscriptions = new Subscription();\n    _model;\n    /** Reference to the internal calendar component. */\n    _calendar;\n    /**\n     * Theme color of the internal calendar. This API is supported in M2 themes\n     * only, it has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    color;\n    /** Reference to the datepicker that created the overlay. */\n    datepicker;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Whether the datepicker is above or below the input. */\n    _isAbove;\n    /** Current state of the animation. */\n    _animationState;\n    /** Emits when an animation has finished. */\n    _animationDone = new Subject();\n    /** Whether there is an in-progress animation. */\n    _isAnimating = false;\n    /** Text for the close button. */\n    _closeButtonText;\n    /** Whether the close button currently has focus. */\n    _closeButtonFocused;\n    /** Portal with projected action buttons. */\n    _actionsPortal = null;\n    /** Id of the label for the `role=\"dialog\"` element. */\n    _dialogLabelId;\n    constructor() {\n      inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n      const intl = inject(MatDatepickerIntl);\n      this._closeButtonText = intl.closeCalendarLabel;\n    }\n    ngOnInit() {\n      this._animationState = this.datepicker.touchUi ? 'enter-dialog' : 'enter-dropdown';\n    }\n    ngAfterViewInit() {\n      this._subscriptions.add(this.datepicker.stateChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      }));\n      this._calendar.focusActiveCell();\n    }\n    ngOnDestroy() {\n      this._subscriptions.unsubscribe();\n      this._animationDone.complete();\n    }\n    _handleUserSelection(event) {\n      const selection = this._model.selection;\n      const value = event.value;\n      const isRange = selection instanceof DateRange;\n      // If we're selecting a range and we have a selection strategy, always pass the value through\n      // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n      // A null value when picking a range means that the user cancelled the selection (e.g. by\n      // pressing escape), whereas when selecting a single value it means that the value didn't\n      // change. This isn't very intuitive, but it's here for backwards-compatibility.\n      if (isRange && this._rangeSelectionStrategy) {\n        const newSelection = this._rangeSelectionStrategy.selectionFinished(value, selection, event.event);\n        this._model.updateSelection(newSelection, this);\n      } else if (value && (isRange || !this._dateAdapter.sameDate(value, selection))) {\n        this._model.add(value);\n      }\n      // Delegate closing the overlay to the actions.\n      if ((!this._model || this._model.isComplete()) && !this._actionsPortal) {\n        this.datepicker.close();\n      }\n    }\n    _handleUserDragDrop(event) {\n      this._model.updateSelection(event.value, this);\n    }\n    _startExitAnimation() {\n      this._animationState = 'void';\n      this._changeDetectorRef.markForCheck();\n    }\n    _handleAnimationEvent(event) {\n      this._isAnimating = event.phaseName === 'start';\n      if (!this._isAnimating) {\n        this._animationDone.next();\n      }\n    }\n    _getSelected() {\n      return this._model.selection;\n    }\n    /** Applies the current pending selection to the global model. */\n    _applyPendingSelection() {\n      if (this._model !== this._globalModel) {\n        this._globalModel.updateSelection(this._model.selection, this);\n      }\n    }\n    /**\n     * Assigns a new portal containing the datepicker actions.\n     * @param portal Portal with the actions to be assigned.\n     * @param forceRerender Whether a re-render of the portal should be triggered. This isn't\n     * necessary if the portal is assigned during initialization, but it may be required if it's\n     * added at a later point.\n     */\n    _assignActions(portal, forceRerender) {\n      // If we have actions, clone the model so that we have the ability to cancel the selection,\n      // otherwise update the global model directly. Note that we want to assign this as soon as\n      // possible, but `_actionsPortal` isn't available in the constructor so we do it in `ngOnInit`.\n      this._model = portal ? this._globalModel.clone() : this._globalModel;\n      this._actionsPortal = portal;\n      if (forceRerender) {\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    static ɵfac = function MatDatepickerContent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerContent)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDatepickerContent,\n      selectors: [[\"mat-datepicker-content\"]],\n      viewQuery: function MatDatepickerContent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatCalendar, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._calendar = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-datepicker-content\"],\n      hostVars: 5,\n      hostBindings: function MatDatepickerContent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵsyntheticHostListener(\"@transformPanel.start\", function MatDatepickerContent_animation_transformPanel_start_HostBindingHandler($event) {\n            return ctx._handleAnimationEvent($event);\n          })(\"@transformPanel.done\", function MatDatepickerContent_animation_transformPanel_done_HostBindingHandler($event) {\n            return ctx._handleAnimationEvent($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵsyntheticHostProperty(\"@transformPanel\", ctx._animationState);\n          i0.ɵɵclassMap(ctx.color ? \"mat-\" + ctx.color : \"\");\n          i0.ɵɵclassProp(\"mat-datepicker-content-touch\", ctx.datepicker.touchUi);\n        }\n      },\n      inputs: {\n        color: \"color\"\n      },\n      exportAs: [\"matDatepickerContent\"],\n      decls: 5,\n      vars: 27,\n      consts: [[\"cdkTrapFocus\", \"\", \"role\", \"dialog\", 1, \"mat-datepicker-content-container\"], [3, \"yearSelected\", \"monthSelected\", \"viewChanged\", \"_userSelection\", \"_userDragDrop\", \"id\", \"startAt\", \"startView\", \"minDate\", \"maxDate\", \"dateFilter\", \"headerComponent\", \"selected\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\"], [3, \"cdkPortalOutlet\"], [\"type\", \"button\", \"mat-raised-button\", \"\", 1, \"mat-datepicker-close-button\", 3, \"focus\", \"blur\", \"click\", \"color\"]],\n      template: function MatDatepickerContent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-calendar\", 1);\n          i0.ɵɵlistener(\"yearSelected\", function MatDatepickerContent_Template_mat_calendar_yearSelected_1_listener($event) {\n            return ctx.datepicker._selectYear($event);\n          })(\"monthSelected\", function MatDatepickerContent_Template_mat_calendar_monthSelected_1_listener($event) {\n            return ctx.datepicker._selectMonth($event);\n          })(\"viewChanged\", function MatDatepickerContent_Template_mat_calendar_viewChanged_1_listener($event) {\n            return ctx.datepicker._viewChanged($event);\n          })(\"_userSelection\", function MatDatepickerContent_Template_mat_calendar__userSelection_1_listener($event) {\n            return ctx._handleUserSelection($event);\n          })(\"_userDragDrop\", function MatDatepickerContent_Template_mat_calendar__userDragDrop_1_listener($event) {\n            return ctx._handleUserDragDrop($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(2, MatDatepickerContent_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n          i0.ɵɵelementStart(3, \"button\", 3);\n          i0.ɵɵlistener(\"focus\", function MatDatepickerContent_Template_button_focus_3_listener() {\n            return ctx._closeButtonFocused = true;\n          })(\"blur\", function MatDatepickerContent_Template_button_blur_3_listener() {\n            return ctx._closeButtonFocused = false;\n          })(\"click\", function MatDatepickerContent_Template_button_click_3_listener() {\n            return ctx.datepicker.close();\n          });\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          let tmp_3_0;\n          i0.ɵɵclassProp(\"mat-datepicker-content-container-with-custom-header\", ctx.datepicker.calendarHeaderComponent)(\"mat-datepicker-content-container-with-actions\", ctx._actionsPortal);\n          i0.ɵɵattribute(\"aria-modal\", true)(\"aria-labelledby\", (tmp_3_0 = ctx._dialogLabelId) !== null && tmp_3_0 !== undefined ? tmp_3_0 : undefined);\n          i0.ɵɵadvance();\n          i0.ɵɵclassMap(ctx.datepicker.panelClass);\n          i0.ɵɵproperty(\"id\", ctx.datepicker.id)(\"startAt\", ctx.datepicker.startAt)(\"startView\", ctx.datepicker.startView)(\"minDate\", ctx.datepicker._getMinDate())(\"maxDate\", ctx.datepicker._getMaxDate())(\"dateFilter\", ctx.datepicker._getDateFilter())(\"headerComponent\", ctx.datepicker.calendarHeaderComponent)(\"selected\", ctx._getSelected())(\"dateClass\", ctx.datepicker.dateClass)(\"comparisonStart\", ctx.comparisonStart)(\"comparisonEnd\", ctx.comparisonEnd)(\"@fadeInCalendar\", \"enter\")(\"startDateAccessibleName\", ctx.startDateAccessibleName)(\"endDateAccessibleName\", ctx.endDateAccessibleName);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"cdkPortalOutlet\", ctx._actionsPortal);\n          i0.ɵɵadvance();\n          i0.ɵɵclassProp(\"cdk-visually-hidden\", !ctx._closeButtonFocused);\n          i0.ɵɵproperty(\"color\", ctx.color || \"primary\");\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx._closeButtonText);\n        }\n      },\n      dependencies: [CdkTrapFocus, MatCalendar, CdkPortalOutlet, MatButton],\n      styles: [\".mat-datepicker-content{display:block;border-radius:4px;background-color:var(--mat-datepicker-calendar-container-background-color, var(--mat-sys-surface-container-high));color:var(--mat-datepicker-calendar-container-text-color, var(--mat-sys-on-surface));box-shadow:var(--mat-datepicker-calendar-container-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-shape, var(--mat-sys-corner-large))}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content .mat-datepicker-content-container-with-custom-header .mat-calendar{height:auto}.mat-datepicker-content .mat-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.ng-animating .mat-datepicker-content .mat-datepicker-close-button{display:none}.mat-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.mat-datepicker-content-touch{display:block;max-height:80vh;box-shadow:var(--mat-datepicker-calendar-container-touch-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-touch-shape, var(--mat-sys-corner-extra-large));position:relative;overflow:visible}.mat-datepicker-content-touch .mat-datepicker-content-container{min-height:312px;max-height:788px;min-width:250px;max-width:750px}.mat-datepicker-content-touch .mat-calendar{width:100%;height:auto}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-datepicker-content-container{width:80vw;height:100vw}.mat-datepicker-content-touch .mat-datepicker-content-container-with-actions{height:115vw}}\"],\n      encapsulation: 2,\n      data: {\n        animation: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar]\n      },\n      changeDetection: 0\n    });\n  }\n  return MatDatepickerContent;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Base class for a datepicker. */\nlet MatDatepickerBase = /*#__PURE__*/(() => {\n  class MatDatepickerBase {\n    _overlay = inject(Overlay);\n    _viewContainerRef = inject(ViewContainerRef);\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _model = inject(MatDateSelectionModel);\n    _scrollStrategy = inject(MAT_DATEPICKER_SCROLL_STRATEGY);\n    _inputStateChanges = Subscription.EMPTY;\n    _document = inject(DOCUMENT);\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    calendarHeaderComponent;\n    /** The date to open the calendar to initially. */\n    get startAt() {\n      // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n      // selected value is.\n      return this._startAt || (this.datepickerInput ? this.datepickerInput.getStartValue() : null);\n    }\n    set startAt(value) {\n      this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _startAt;\n    /** The view that the calendar should start in. */\n    startView = 'month';\n    /**\n     * Theme color of the datepicker's calendar. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n      return this._color || (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n    set color(value) {\n      this._color = value;\n    }\n    _color;\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a dropdown and elements have more padding to allow for bigger touch targets.\n     */\n    touchUi = false;\n    /** Whether the datepicker pop-up should be disabled. */\n    get disabled() {\n      return this._disabled === undefined && this.datepickerInput ? this.datepickerInput.disabled : !!this._disabled;\n    }\n    set disabled(value) {\n      if (value !== this._disabled) {\n        this._disabled = value;\n        this.stateChanges.next(undefined);\n      }\n    }\n    _disabled;\n    /** Preferred position of the datepicker in the X axis. */\n    xPosition = 'start';\n    /** Preferred position of the datepicker in the Y axis. */\n    yPosition = 'below';\n    /**\n     * Whether to restore focus to the previously-focused element when the calendar is closed.\n     * Note that automatic focus restoration is an accessibility feature and it is recommended that\n     * you provide your own equivalent, if you decide to turn it off.\n     */\n    restoreFocus = true;\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    yearSelected = new EventEmitter();\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    monthSelected = new EventEmitter();\n    /**\n     * Emits when the current view changes.\n     */\n    viewChanged = new EventEmitter(true);\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass;\n    /** Emits when the datepicker has been opened. */\n    openedStream = new EventEmitter();\n    /** Emits when the datepicker has been closed. */\n    closedStream = new EventEmitter();\n    /** Classes to be passed to the date picker panel. */\n    get panelClass() {\n      return this._panelClass;\n    }\n    set panelClass(value) {\n      this._panelClass = coerceStringArray(value);\n    }\n    _panelClass;\n    /** Whether the calendar is open. */\n    get opened() {\n      return this._opened;\n    }\n    set opened(value) {\n      if (value) {\n        this.open();\n      } else {\n        this.close();\n      }\n    }\n    _opened = false;\n    /** The id for the datepicker calendar. */\n    id = inject(_IdGenerator).getId('mat-datepicker-');\n    /** The minimum selectable date. */\n    _getMinDate() {\n      return this.datepickerInput && this.datepickerInput.min;\n    }\n    /** The maximum selectable date. */\n    _getMaxDate() {\n      return this.datepickerInput && this.datepickerInput.max;\n    }\n    _getDateFilter() {\n      return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n    /** A reference to the overlay into which we've rendered the calendar. */\n    _overlayRef;\n    /** Reference to the component instance rendered in the overlay. */\n    _componentRef;\n    /** The element that was focused before the datepicker was opened. */\n    _focusedElementBeforeOpen = null;\n    /** Unique class that will be added to the backdrop so that the test harnesses can look it up. */\n    _backdropHarnessClass = `${this.id}-backdrop`;\n    /** Currently-registered actions portal. */\n    _actionsPortal;\n    /** The input element this datepicker is associated with. */\n    datepickerInput;\n    /** Emits when the datepicker's state changes. */\n    stateChanges = new Subject();\n    _injector = inject(Injector);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    constructor() {\n      if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      this._model.selectionChanged.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    ngOnChanges(changes) {\n      const positionChange = changes['xPosition'] || changes['yPosition'];\n      if (positionChange && !positionChange.firstChange && this._overlayRef) {\n        const positionStrategy = this._overlayRef.getConfig().positionStrategy;\n        if (positionStrategy instanceof FlexibleConnectedPositionStrategy) {\n          this._setConnectedPositions(positionStrategy);\n          if (this.opened) {\n            this._overlayRef.updatePosition();\n          }\n        }\n      }\n      this.stateChanges.next(undefined);\n    }\n    ngOnDestroy() {\n      this._destroyOverlay();\n      this.close();\n      this._inputStateChanges.unsubscribe();\n      this.stateChanges.complete();\n    }\n    /** Selects the given date */\n    select(date) {\n      this._model.add(date);\n    }\n    /** Emits the selected year in multiyear view */\n    _selectYear(normalizedYear) {\n      this.yearSelected.emit(normalizedYear);\n    }\n    /** Emits selected month in year view */\n    _selectMonth(normalizedMonth) {\n      this.monthSelected.emit(normalizedMonth);\n    }\n    /** Emits changed view */\n    _viewChanged(view) {\n      this.viewChanged.emit(view);\n    }\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     * @returns Selection model that the input should hook itself up to.\n     */\n    registerInput(input) {\n      if (this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('A MatDatepicker can only be associated with a single input.');\n      }\n      this._inputStateChanges.unsubscribe();\n      this.datepickerInput = input;\n      this._inputStateChanges = input.stateChanges.subscribe(() => this.stateChanges.next(undefined));\n      return this._model;\n    }\n    /**\n     * Registers a portal containing action buttons with the datepicker.\n     * @param portal Portal to be registered.\n     */\n    registerActions(portal) {\n      if (this._actionsPortal && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('A MatDatepicker can only be associated with a single actions row.');\n      }\n      this._actionsPortal = portal;\n      this._componentRef?.instance._assignActions(portal, true);\n    }\n    /**\n     * Removes a portal containing action buttons from the datepicker.\n     * @param portal Portal to be removed.\n     */\n    removeActions(portal) {\n      if (portal === this._actionsPortal) {\n        this._actionsPortal = null;\n        this._componentRef?.instance._assignActions(null, true);\n      }\n    }\n    /** Open the calendar. */\n    open() {\n      // Skip reopening if there's an in-progress animation to avoid overlapping\n      // sequences which can cause \"changed after checked\" errors. See #25837.\n      if (this._opened || this.disabled || this._componentRef?.instance._isAnimating) {\n        return;\n      }\n      if (!this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Attempted to open an MatDatepicker with no associated input.');\n      }\n      this._focusedElementBeforeOpen = _getFocusedElementPierceShadowDom();\n      this._openOverlay();\n      this._opened = true;\n      this.openedStream.emit();\n    }\n    /** Close the calendar. */\n    close() {\n      // Skip reopening if there's an in-progress animation to avoid overlapping\n      // sequences which can cause \"changed after checked\" errors. See #25837.\n      if (!this._opened || this._componentRef?.instance._isAnimating) {\n        return;\n      }\n      const canRestoreFocus = this.restoreFocus && this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function';\n      const completeClose = () => {\n        // The `_opened` could've been reset already if\n        // we got two events in quick succession.\n        if (this._opened) {\n          this._opened = false;\n          this.closedStream.emit();\n        }\n      };\n      if (this._componentRef) {\n        const {\n          instance,\n          location\n        } = this._componentRef;\n        instance._startExitAnimation();\n        instance._animationDone.pipe(take(1)).subscribe(() => {\n          const activeElement = this._document.activeElement;\n          // Since we restore focus after the exit animation, we have to check that\n          // the user didn't move focus themselves inside the `close` handler.\n          if (canRestoreFocus && (!activeElement || activeElement === this._document.activeElement || location.nativeElement.contains(activeElement))) {\n            this._focusedElementBeforeOpen.focus();\n          }\n          this._focusedElementBeforeOpen = null;\n          this._destroyOverlay();\n        });\n      }\n      if (canRestoreFocus) {\n        // Because IE moves focus asynchronously, we can't count on it being restored before we've\n        // marked the datepicker as closed. If the event fires out of sequence and the element that\n        // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n        // able to close the calendar at all. We work around it by making the logic, that marks\n        // the datepicker as closed, async as well.\n        setTimeout(completeClose);\n      } else {\n        completeClose();\n      }\n    }\n    /** Applies the current pending selection on the overlay to the model. */\n    _applyPendingSelection() {\n      this._componentRef?.instance?._applyPendingSelection();\n    }\n    /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n    _forwardContentValues(instance) {\n      instance.datepicker = this;\n      instance.color = this.color;\n      instance._dialogLabelId = this.datepickerInput.getOverlayLabelId();\n      instance._assignActions(this._actionsPortal, false);\n    }\n    /** Opens the overlay with the calendar. */\n    _openOverlay() {\n      this._destroyOverlay();\n      const isDialog = this.touchUi;\n      const portal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n      const overlayRef = this._overlayRef = this._overlay.create(new OverlayConfig({\n        positionStrategy: isDialog ? this._getDialogStrategy() : this._getDropdownStrategy(),\n        hasBackdrop: true,\n        backdropClass: [isDialog ? 'cdk-overlay-dark-backdrop' : 'mat-overlay-transparent-backdrop', this._backdropHarnessClass],\n        direction: this._dir || 'ltr',\n        scrollStrategy: isDialog ? this._overlay.scrollStrategies.block() : this._scrollStrategy(),\n        panelClass: `mat-datepicker-${isDialog ? 'dialog' : 'popup'}`\n      }));\n      this._getCloseStream(overlayRef).subscribe(event => {\n        if (event) {\n          event.preventDefault();\n        }\n        this.close();\n      });\n      // The `preventDefault` call happens inside the calendar as well, however focus moves into\n      // it inside a timeout which can give browsers a chance to fire off a keyboard event in-between\n      // that can scroll the page (see #24969). Always block default actions of arrow keys for the\n      // entire overlay so the page doesn't get scrolled by accident.\n      overlayRef.keydownEvents().subscribe(event => {\n        const keyCode = event.keyCode;\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW || keyCode === PAGE_UP || keyCode === PAGE_DOWN) {\n          event.preventDefault();\n        }\n      });\n      this._componentRef = overlayRef.attach(portal);\n      this._forwardContentValues(this._componentRef.instance);\n      // Update the position once the calendar has rendered. Only relevant in dropdown mode.\n      if (!isDialog) {\n        afterNextRender(() => {\n          overlayRef.updatePosition();\n        }, {\n          injector: this._injector\n        });\n      }\n    }\n    /** Destroys the current overlay. */\n    _destroyOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n        this._overlayRef = this._componentRef = null;\n      }\n    }\n    /** Gets a position strategy that will open the calendar as a dropdown. */\n    _getDialogStrategy() {\n      return this._overlay.position().global().centerHorizontally().centerVertically();\n    }\n    /** Gets a position strategy that will open the calendar as a dropdown. */\n    _getDropdownStrategy() {\n      const strategy = this._overlay.position().flexibleConnectedTo(this.datepickerInput.getConnectedOverlayOrigin()).withTransformOriginOn('.mat-datepicker-content').withFlexibleDimensions(false).withViewportMargin(8).withLockedPosition();\n      return this._setConnectedPositions(strategy);\n    }\n    /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n    _setConnectedPositions(strategy) {\n      const primaryX = this.xPosition === 'end' ? 'end' : 'start';\n      const secondaryX = primaryX === 'start' ? 'end' : 'start';\n      const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n      const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n      return strategy.withPositions([{\n        originX: primaryX,\n        originY: secondaryY,\n        overlayX: primaryX,\n        overlayY: primaryY\n      }, {\n        originX: primaryX,\n        originY: primaryY,\n        overlayX: primaryX,\n        overlayY: secondaryY\n      }, {\n        originX: secondaryX,\n        originY: secondaryY,\n        overlayX: secondaryX,\n        overlayY: primaryY\n      }, {\n        originX: secondaryX,\n        originY: primaryY,\n        overlayX: secondaryX,\n        overlayY: secondaryY\n      }]);\n    }\n    /** Gets an observable that will emit when the overlay is supposed to be closed. */\n    _getCloseStream(overlayRef) {\n      const ctrlShiftMetaModifiers = ['ctrlKey', 'shiftKey', 'metaKey'];\n      return merge(overlayRef.backdropClick(), overlayRef.detachments(), overlayRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE && !hasModifierKey(event) || this.datepickerInput && hasModifierKey(event, 'altKey') && event.keyCode === UP_ARROW && ctrlShiftMetaModifiers.every(modifier => !hasModifierKey(event, modifier));\n      })));\n    }\n    static ɵfac = function MatDatepickerBase_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerBase)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerBase,\n      inputs: {\n        calendarHeaderComponent: \"calendarHeaderComponent\",\n        startAt: \"startAt\",\n        startView: \"startView\",\n        color: \"color\",\n        touchUi: [2, \"touchUi\", \"touchUi\", booleanAttribute],\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        xPosition: \"xPosition\",\n        yPosition: \"yPosition\",\n        restoreFocus: [2, \"restoreFocus\", \"restoreFocus\", booleanAttribute],\n        dateClass: \"dateClass\",\n        panelClass: \"panelClass\",\n        opened: [2, \"opened\", \"opened\", booleanAttribute]\n      },\n      outputs: {\n        yearSelected: \"yearSelected\",\n        monthSelected: \"monthSelected\",\n        viewChanged: \"viewChanged\",\n        openedStream: \"opened\",\n        closedStream: \"closed\"\n      },\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return MatDatepickerBase;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\nlet MatDatepicker = /*#__PURE__*/(() => {\n  class MatDatepicker extends MatDatepickerBase {\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatDatepicker_BaseFactory;\n      return function MatDatepicker_Factory(__ngFactoryType__) {\n        return (ɵMatDatepicker_BaseFactory || (ɵMatDatepicker_BaseFactory = i0.ɵɵgetInheritedFactory(MatDatepicker)))(__ngFactoryType__ || MatDatepicker);\n      };\n    })();\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDatepicker,\n      selectors: [[\"mat-datepicker\"]],\n      exportAs: [\"matDatepicker\"],\n      features: [i0.ɵɵProvidersFeature([MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, {\n        provide: MatDatepickerBase,\n        useExisting: MatDatepicker\n      }]), i0.ɵɵInheritDefinitionFeature],\n      decls: 0,\n      vars: 0,\n      template: function MatDatepicker_Template(rf, ctx) {},\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDatepicker;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nclass MatDatepickerInputEvent {\n  target;\n  targetElement;\n  /** The new value for the target datepicker input. */\n  value;\n  constructor(/** Reference to the datepicker input component that emitted the event. */\n  target, /** Reference to the native input element associated with the datepicker input. */\n  targetElement) {\n    this.target = target;\n    this.targetElement = targetElement;\n    this.value = this.target.value;\n  }\n}\n/** Base class for datepicker inputs. */\nlet MatDatepickerInputBase = /*#__PURE__*/(() => {\n  class MatDatepickerInputBase {\n    _elementRef = inject(ElementRef);\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dateFormats = inject(MAT_DATE_FORMATS, {\n      optional: true\n    });\n    /** Whether the component has been initialized. */\n    _isInitialized;\n    /** The value of the input. */\n    get value() {\n      return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n    }\n    set value(value) {\n      this._assignValueProgrammatically(value);\n    }\n    _model;\n    /** Whether the datepicker-input is disabled. */\n    get disabled() {\n      return !!this._disabled || this._parentDisabled();\n    }\n    set disabled(value) {\n      const newValue = value;\n      const element = this._elementRef.nativeElement;\n      if (this._disabled !== newValue) {\n        this._disabled = newValue;\n        this.stateChanges.next(undefined);\n      }\n      // We need to null check the `blur` method, because it's undefined during SSR.\n      // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n      // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n      // element has been inserted.\n      if (newValue && this._isInitialized && element.blur) {\n        // Normally, native input elements automatically blur if they turn disabled. This behavior\n        // is problematic, because it would mean that it triggers another change detection cycle,\n        // which then causes a changed after checked error if the input element was focused before.\n        element.blur();\n      }\n    }\n    _disabled;\n    /** Emits when a `change` event is fired on this `<input>`. */\n    dateChange = new EventEmitter();\n    /** Emits when an `input` event is fired on this `<input>`. */\n    dateInput = new EventEmitter();\n    /** Emits when the internal state has changed */\n    stateChanges = new Subject();\n    _onTouched = () => {};\n    _validatorOnChange = () => {};\n    _cvaOnChange = () => {};\n    _valueChangesSubscription = Subscription.EMPTY;\n    _localeSubscription = Subscription.EMPTY;\n    /**\n     * Since the value is kept on the model which is assigned in an Input,\n     * we might get a value before we have a model. This property keeps track\n     * of the value until we have somewhere to assign it.\n     */\n    _pendingValue;\n    /** The form control validator for whether the input parses. */\n    _parseValidator = () => {\n      return this._lastValueValid ? null : {\n        'matDatepickerParse': {\n          'text': this._elementRef.nativeElement.value\n        }\n      };\n    };\n    /** The form control validator for the date filter. */\n    _filterValidator = control => {\n      const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      return !controlValue || this._matchesFilter(controlValue) ? null : {\n        'matDatepickerFilter': true\n      };\n    };\n    /** The form control validator for the min date. */\n    _minValidator = control => {\n      const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      const min = this._getMinDate();\n      return !min || !controlValue || this._dateAdapter.compareDate(min, controlValue) <= 0 ? null : {\n        'matDatepickerMin': {\n          'min': min,\n          'actual': controlValue\n        }\n      };\n    };\n    /** The form control validator for the max date. */\n    _maxValidator = control => {\n      const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      const max = this._getMaxDate();\n      return !max || !controlValue || this._dateAdapter.compareDate(max, controlValue) >= 0 ? null : {\n        'matDatepickerMax': {\n          'max': max,\n          'actual': controlValue\n        }\n      };\n    };\n    /** Gets the base validator functions. */\n    _getValidators() {\n      return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n    }\n    /** Registers a date selection model with the input. */\n    _registerModel(model) {\n      this._model = model;\n      this._valueChangesSubscription.unsubscribe();\n      if (this._pendingValue) {\n        this._assignValue(this._pendingValue);\n      }\n      this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\n        if (this._shouldHandleChangeEvent(event)) {\n          const value = this._getValueFromModel(event.selection);\n          this._lastValueValid = this._isValidValue(value);\n          this._cvaOnChange(value);\n          this._onTouched();\n          this._formatValue(value);\n          this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }\n      });\n    }\n    /** Whether the last value set on the input was valid. */\n    _lastValueValid = false;\n    constructor() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._dateAdapter) {\n          throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n          throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n      }\n      // Update the displayed date when the locale changes.\n      this._localeSubscription = this._dateAdapter.localeChanges.subscribe(() => {\n        this._assignValueProgrammatically(this.value);\n      });\n    }\n    ngAfterViewInit() {\n      this._isInitialized = true;\n    }\n    ngOnChanges(changes) {\n      if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n        this.stateChanges.next(undefined);\n      }\n    }\n    ngOnDestroy() {\n      this._valueChangesSubscription.unsubscribe();\n      this._localeSubscription.unsubscribe();\n      this.stateChanges.complete();\n    }\n    /** @docs-private */\n    registerOnValidatorChange(fn) {\n      this._validatorOnChange = fn;\n    }\n    /** @docs-private */\n    validate(c) {\n      return this._validator ? this._validator(c) : null;\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n      this._assignValueProgrammatically(value);\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n      this._cvaOnChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    _onKeydown(event) {\n      const ctrlShiftMetaModifiers = ['ctrlKey', 'shiftKey', 'metaKey'];\n      const isAltDownArrow = hasModifierKey(event, 'altKey') && event.keyCode === DOWN_ARROW && ctrlShiftMetaModifiers.every(modifier => !hasModifierKey(event, modifier));\n      if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n        this._openPopup();\n        event.preventDefault();\n      }\n    }\n    _onInput(value) {\n      const lastValueWasValid = this._lastValueValid;\n      let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n      this._lastValueValid = this._isValidValue(date);\n      date = this._dateAdapter.getValidDateOrNull(date);\n      const hasChanged = !this._dateAdapter.sameDate(date, this.value);\n      // We need to fire the CVA change event for all\n      // nulls, otherwise the validators won't run.\n      if (!date || hasChanged) {\n        this._cvaOnChange(date);\n      } else {\n        // Call the CVA change handler for invalid values\n        // since this is what marks the control as dirty.\n        if (value && !this.value) {\n          this._cvaOnChange(date);\n        }\n        if (lastValueWasValid !== this._lastValueValid) {\n          this._validatorOnChange();\n        }\n      }\n      if (hasChanged) {\n        this._assignValue(date);\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      }\n    }\n    _onChange() {\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n    /** Handles blur events on the input. */\n    _onBlur() {\n      // Reformat the input only if we have a valid value.\n      if (this.value) {\n        this._formatValue(this.value);\n      }\n      this._onTouched();\n    }\n    /** Formats a value and sets it on the input element. */\n    _formatValue(value) {\n      this._elementRef.nativeElement.value = value != null ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    }\n    /** Assigns a value to the model. */\n    _assignValue(value) {\n      // We may get some incoming values before the model was\n      // assigned. Save the value so that we can assign it later.\n      if (this._model) {\n        this._assignValueToModel(value);\n        this._pendingValue = null;\n      } else {\n        this._pendingValue = value;\n      }\n    }\n    /** Whether a value is considered valid. */\n    _isValidValue(value) {\n      return !value || this._dateAdapter.isValid(value);\n    }\n    /**\n     * Checks whether a parent control is disabled. This is in place so that it can be overridden\n     * by inputs extending this one which can be placed inside of a group that can be disabled.\n     */\n    _parentDisabled() {\n      return false;\n    }\n    /** Programmatically assigns a value to the input. */\n    _assignValueProgrammatically(value) {\n      value = this._dateAdapter.deserialize(value);\n      this._lastValueValid = this._isValidValue(value);\n      value = this._dateAdapter.getValidDateOrNull(value);\n      this._assignValue(value);\n      this._formatValue(value);\n    }\n    /** Gets whether a value matches the current date filter. */\n    _matchesFilter(value) {\n      const filter = this._getDateFilter();\n      return !filter || filter(value);\n    }\n    static ɵfac = function MatDatepickerInputBase_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerInputBase)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerInputBase,\n      inputs: {\n        value: \"value\",\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute]\n      },\n      outputs: {\n        dateChange: \"dateChange\",\n        dateInput: \"dateInput\"\n      },\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return MatDatepickerInputBase;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Checks whether the `SimpleChanges` object from an `ngOnChanges`\n * callback has any changes, accounting for date objects.\n */\nfunction dateInputsHaveChanged(changes, adapter) {\n  const keys = Object.keys(changes);\n  for (let key of keys) {\n    const {\n      previousValue,\n      currentValue\n    } = changes[key];\n    if (adapter.isDateInstance(previousValue) && adapter.isDateInstance(currentValue)) {\n      if (!adapter.sameDate(previousValue, currentValue)) {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** @docs-private */\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n/** @docs-private */\nconst MAT_DATEPICKER_VALIDATORS = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n/** Directive used to connect an input to a MatDatepicker. */\nlet MatDatepickerInput = /*#__PURE__*/(() => {\n  class MatDatepickerInput extends MatDatepickerInputBase {\n    _formField = inject(MAT_FORM_FIELD, {\n      optional: true\n    });\n    _closedSubscription = Subscription.EMPTY;\n    _openedSubscription = Subscription.EMPTY;\n    /** The datepicker that this input is associated with. */\n    set matDatepicker(datepicker) {\n      if (datepicker) {\n        this._datepicker = datepicker;\n        this._ariaOwns.set(datepicker.opened ? datepicker.id : null);\n        this._closedSubscription = datepicker.closedStream.subscribe(() => {\n          this._onTouched();\n          this._ariaOwns.set(null);\n        });\n        this._openedSubscription = datepicker.openedStream.subscribe(() => {\n          this._ariaOwns.set(datepicker.id);\n        });\n        this._registerModel(datepicker.registerInput(this));\n      }\n    }\n    _datepicker;\n    /** The id of the panel owned by this input. */\n    _ariaOwns = signal(null);\n    /** The minimum valid date. */\n    get min() {\n      return this._min;\n    }\n    set min(value) {\n      const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      if (!this._dateAdapter.sameDate(validValue, this._min)) {\n        this._min = validValue;\n        this._validatorOnChange();\n      }\n    }\n    _min;\n    /** The maximum valid date. */\n    get max() {\n      return this._max;\n    }\n    set max(value) {\n      const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      if (!this._dateAdapter.sameDate(validValue, this._max)) {\n        this._max = validValue;\n        this._validatorOnChange();\n      }\n    }\n    _max;\n    /** Function that can be used to filter out dates within the datepicker. */\n    get dateFilter() {\n      return this._dateFilter;\n    }\n    set dateFilter(value) {\n      const wasMatchingValue = this._matchesFilter(this.value);\n      this._dateFilter = value;\n      if (this._matchesFilter(this.value) !== wasMatchingValue) {\n        this._validatorOnChange();\n      }\n    }\n    _dateFilter;\n    /** The combined form control validator for this input. */\n    _validator;\n    constructor() {\n      super();\n      this._validator = Validators.compose(super._getValidators());\n    }\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin() {\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    /** Gets the ID of an element that should be used a description for the calendar overlay. */\n    getOverlayLabelId() {\n      if (this._formField) {\n        return this._formField.getLabelId();\n      }\n      return this._elementRef.nativeElement.getAttribute('aria-labelledby');\n    }\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette() {\n      return this._formField ? this._formField.color : undefined;\n    }\n    /** Gets the value at which the calendar should start. */\n    getStartValue() {\n      return this.value;\n    }\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this._closedSubscription.unsubscribe();\n      this._openedSubscription.unsubscribe();\n    }\n    /** Opens the associated datepicker. */\n    _openPopup() {\n      if (this._datepicker) {\n        this._datepicker.open();\n      }\n    }\n    _getValueFromModel(modelValue) {\n      return modelValue;\n    }\n    _assignValueToModel(value) {\n      if (this._model) {\n        this._model.updateSelection(value, this);\n      }\n    }\n    /** Gets the input's minimum date. */\n    _getMinDate() {\n      return this._min;\n    }\n    /** Gets the input's maximum date. */\n    _getMaxDate() {\n      return this._max;\n    }\n    /** Gets the input's date filtering function. */\n    _getDateFilter() {\n      return this._dateFilter;\n    }\n    _shouldHandleChangeEvent(event) {\n      return event.source !== this;\n    }\n    static ɵfac = function MatDatepickerInput_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerInput)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerInput,\n      selectors: [[\"input\", \"matDatepicker\", \"\"]],\n      hostAttrs: [1, \"mat-datepicker-input\"],\n      hostVars: 6,\n      hostBindings: function MatDatepickerInput_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function MatDatepickerInput_input_HostBindingHandler($event) {\n            return ctx._onInput($event.target.value);\n          })(\"change\", function MatDatepickerInput_change_HostBindingHandler() {\n            return ctx._onChange();\n          })(\"blur\", function MatDatepickerInput_blur_HostBindingHandler() {\n            return ctx._onBlur();\n          })(\"keydown\", function MatDatepickerInput_keydown_HostBindingHandler($event) {\n            return ctx._onKeydown($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n          i0.ɵɵattribute(\"aria-haspopup\", ctx._datepicker ? \"dialog\" : null)(\"aria-owns\", ctx._ariaOwns())(\"min\", ctx.min ? ctx._dateAdapter.toIso8601(ctx.min) : null)(\"max\", ctx.max ? ctx._dateAdapter.toIso8601(ctx.max) : null)(\"data-mat-calendar\", ctx._datepicker ? ctx._datepicker.id : null);\n        }\n      },\n      inputs: {\n        matDatepicker: \"matDatepicker\",\n        min: \"min\",\n        max: \"max\",\n        dateFilter: [0, \"matDatepickerFilter\", \"dateFilter\"]\n      },\n      exportAs: [\"matDatepickerInput\"],\n      features: [i0.ɵɵProvidersFeature([MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, {\n        provide: MAT_INPUT_VALUE_ACCESSOR,\n        useExisting: MatDatepickerInput\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatDatepickerInput;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\nlet MatDatepickerToggleIcon = /*#__PURE__*/(() => {\n  class MatDatepickerToggleIcon {\n    static ɵfac = function MatDatepickerToggleIcon_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerToggleIcon)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerToggleIcon,\n      selectors: [[\"\", \"matDatepickerToggleIcon\", \"\"]]\n    });\n  }\n  return MatDatepickerToggleIcon;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatDatepickerToggle = /*#__PURE__*/(() => {\n  class MatDatepickerToggle {\n    _intl = inject(MatDatepickerIntl);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _stateChanges = Subscription.EMPTY;\n    /** Datepicker instance that the button will toggle. */\n    datepicker;\n    /** Tabindex for the toggle. */\n    tabIndex;\n    /** Screen-reader label for the button. */\n    ariaLabel;\n    /** Whether the toggle button is disabled. */\n    get disabled() {\n      if (this._disabled === undefined && this.datepicker) {\n        return this.datepicker.disabled;\n      }\n      return !!this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n    }\n    _disabled;\n    /** Whether ripples on the toggle should be disabled. */\n    disableRipple;\n    /** Custom icon set by the consumer. */\n    _customIcon;\n    /** Underlying button element. */\n    _button;\n    constructor() {\n      const defaultTabIndex = inject(new HostAttributeToken('tabindex'), {\n        optional: true\n      });\n      const parsedTabIndex = Number(defaultTabIndex);\n      this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    }\n    ngOnChanges(changes) {\n      if (changes['datepicker']) {\n        this._watchStateChanges();\n      }\n    }\n    ngOnDestroy() {\n      this._stateChanges.unsubscribe();\n    }\n    ngAfterContentInit() {\n      this._watchStateChanges();\n    }\n    _open(event) {\n      if (this.datepicker && !this.disabled) {\n        this.datepicker.open();\n        event.stopPropagation();\n      }\n    }\n    _watchStateChanges() {\n      const datepickerStateChanged = this.datepicker ? this.datepicker.stateChanges : of();\n      const inputStateChanged = this.datepicker && this.datepicker.datepickerInput ? this.datepicker.datepickerInput.stateChanges : of();\n      const datepickerToggled = this.datepicker ? merge(this.datepicker.openedStream, this.datepicker.closedStream) : of();\n      this._stateChanges.unsubscribe();\n      this._stateChanges = merge(this._intl.changes, datepickerStateChanged, inputStateChanged, datepickerToggled).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    static ɵfac = function MatDatepickerToggle_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerToggle)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDatepickerToggle,\n      selectors: [[\"mat-datepicker-toggle\"]],\n      contentQueries: function MatDatepickerToggle_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatDatepickerToggleIcon, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n        }\n      },\n      viewQuery: function MatDatepickerToggle_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c2, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._button = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-datepicker-toggle\"],\n      hostVars: 8,\n      hostBindings: function MatDatepickerToggle_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function MatDatepickerToggle_click_HostBindingHandler($event) {\n            return ctx._open($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"tabindex\", null)(\"data-mat-calendar\", ctx.datepicker ? ctx.datepicker.id : null);\n          i0.ɵɵclassProp(\"mat-datepicker-toggle-active\", ctx.datepicker && ctx.datepicker.opened)(\"mat-accent\", ctx.datepicker && ctx.datepicker.color === \"accent\")(\"mat-warn\", ctx.datepicker && ctx.datepicker.color === \"warn\");\n        }\n      },\n      inputs: {\n        datepicker: [0, \"for\", \"datepicker\"],\n        tabIndex: \"tabIndex\",\n        ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        disableRipple: \"disableRipple\"\n      },\n      exportAs: [\"matDatepickerToggle\"],\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c4,\n      decls: 4,\n      vars: 6,\n      consts: [[\"button\", \"\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 3, \"disabled\", \"disableRipple\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"fill\", \"currentColor\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 1, \"mat-datepicker-toggle-default-icon\"], [\"d\", \"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"]],\n      template: function MatDatepickerToggle_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c3);\n          i0.ɵɵelementStart(0, \"button\", 1, 0);\n          i0.ɵɵtemplate(2, MatDatepickerToggle_Conditional_2_Template, 2, 0, \":svg:svg\", 2);\n          i0.ɵɵprojection(3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"disableRipple\", ctx.disableRipple);\n          i0.ɵɵattribute(\"aria-haspopup\", ctx.datepicker ? \"dialog\" : null)(\"aria-label\", ctx.ariaLabel || ctx._intl.openCalendarLabel)(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional(!ctx._customIcon ? 2 : -1);\n        }\n      },\n      dependencies: [MatIconButton],\n      styles: [\".mat-datepicker-toggle{pointer-events:auto;color:var(--mat-datepicker-toggle-icon-color, var(--mat-sys-on-surface-variant))}.mat-datepicker-toggle-active{color:var(--mat-datepicker-toggle-active-state-icon-color, var(--mat-sys-on-surface-variant))}@media(forced-colors: active){.mat-datepicker-toggle-default-icon{color:CanvasText}}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDatepickerToggle;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// This file contains the `_computeAriaAccessibleName` function, which computes what the *expected*\n// ARIA accessible name would be for a given element. Implements a subset of ARIA specification\n// [Accessible Name and Description Computation 1.2](https://www.w3.org/TR/accname-1.2/).\n//\n// Specification accname-1.2 can be summarized by returning the result of the first method\n// available.\n//\n//  1. `aria-labelledby` attribute\n//     ```\n//       <!-- example using aria-labelledby-->\n//       <label id='label-id'>Start Date</label>\n//       <input aria-labelledby='label-id'/>\n//     ```\n//  2. `aria-label` attribute (e.g. `<input aria-label=\"Departure\"/>`)\n//  3. Label with `for`/`id`\n//     ```\n//       <!-- example using for/id -->\n//       <label for=\"current-node\">Label</label>\n//       <input id=\"current-node\"/>\n//     ```\n//  4. `placeholder` attribute (e.g. `<input placeholder=\"06/03/1990\"/>`)\n//  5. `title` attribute (e.g. `<input title=\"Check-In\"/>`)\n//  6. text content\n//     ```\n//       <!-- example using text content -->\n//       <label for=\"current-node\"><span>Departure</span> Date</label>\n//       <input id=\"current-node\"/>\n//     ```\n/**\n * Computes the *expected* ARIA accessible name for argument element based on [accname-1.2\n * specification](https://www.w3.org/TR/accname-1.2/). Implements a subset of accname-1.2,\n * and should only be used for the Datepicker's specific use case.\n *\n * Intended use:\n * This is not a general use implementation. Only implements the parts of accname-1.2 that are\n * required for the Datepicker's specific use case. This function is not intended for any other\n * use.\n *\n * Limitations:\n *  - Only covers the needs of `matStartDate` and `matEndDate`. Does not support other use cases.\n *  - See NOTES's in implementation for specific details on what parts of the accname-1.2\n *  specification are not implemented.\n *\n *  @param element {HTMLInputElement} native &lt;input/&gt; element of `matStartDate` or\n *  `matEndDate` component. Corresponds to the 'Root Element' from accname-1.2\n *\n *  @return expected ARIA accessible name of argument &lt;input/&gt;\n */\nfunction _computeAriaAccessibleName(element) {\n  return _computeAriaAccessibleNameInternal(element, true);\n}\n/**\n * Determine if argument node is an Element based on `nodeType` property. This function is safe to\n * use with server-side rendering.\n */\nfunction ssrSafeIsElement(node) {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Determine if argument node is an HTMLInputElement based on `nodeName` property. This funciton is\n * safe to use with server-side rendering.\n */\nfunction ssrSafeIsHTMLInputElement(node) {\n  return node.nodeName === 'INPUT';\n}\n/**\n * Determine if argument node is an HTMLTextAreaElement based on `nodeName` property. This\n * funciton is safe to use with server-side rendering.\n */\nfunction ssrSafeIsHTMLTextAreaElement(node) {\n  return node.nodeName === 'TEXTAREA';\n}\n/**\n * Calculate the expected ARIA accessible name for given DOM Node. Given DOM Node may be either the\n * \"Root node\" passed to `_computeAriaAccessibleName` or \"Current node\" as result of recursion.\n *\n * @return the accessible name of argument DOM Node\n *\n * @param currentNode node to determine accessible name of\n * @param isDirectlyReferenced true if `currentNode` is the root node to calculate ARIA accessible\n * name of. False if it is a result of recursion.\n */\nfunction _computeAriaAccessibleNameInternal(currentNode, isDirectlyReferenced) {\n  // NOTE: this differs from accname-1.2 specification.\n  //  - Does not implement Step 1. of accname-1.2: '''If `currentNode`'s role prohibits naming,\n  //    return the empty string (\"\")'''.\n  //  - Does not implement Step 2.A. of accname-1.2: '''if current node is hidden and not directly\n  //    referenced by aria-labelledby... return the empty string.'''\n  // acc-name-1.2 Step 2.B.: aria-labelledby\n  if (ssrSafeIsElement(currentNode) && isDirectlyReferenced) {\n    const labelledbyIds = currentNode.getAttribute?.('aria-labelledby')?.split(/\\s+/g) || [];\n    const validIdRefs = labelledbyIds.reduce((validIds, id) => {\n      const elem = document.getElementById(id);\n      if (elem) {\n        validIds.push(elem);\n      }\n      return validIds;\n    }, []);\n    if (validIdRefs.length) {\n      return validIdRefs.map(idRef => {\n        return _computeAriaAccessibleNameInternal(idRef, false);\n      }).join(' ');\n    }\n  }\n  // acc-name-1.2 Step 2.C.: aria-label\n  if (ssrSafeIsElement(currentNode)) {\n    const ariaLabel = currentNode.getAttribute('aria-label')?.trim();\n    if (ariaLabel) {\n      return ariaLabel;\n    }\n  }\n  // acc-name-1.2 Step 2.D. attribute or element that defines a text alternative\n  //\n  // NOTE: this differs from accname-1.2 specification.\n  // Only implements Step 2.D. for `<label>`,`<input/>`, and `<textarea/>` element. Does not\n  // implement other elements that have an attribute or element that defines a text alternative.\n  if (ssrSafeIsHTMLInputElement(currentNode) || ssrSafeIsHTMLTextAreaElement(currentNode)) {\n    // use label with a `for` attribute referencing the current node\n    if (currentNode.labels?.length) {\n      return Array.from(currentNode.labels).map(x => _computeAriaAccessibleNameInternal(x, false)).join(' ');\n    }\n    // use placeholder if available\n    const placeholder = currentNode.getAttribute('placeholder')?.trim();\n    if (placeholder) {\n      return placeholder;\n    }\n    // use title if available\n    const title = currentNode.getAttribute('title')?.trim();\n    if (title) {\n      return title;\n    }\n  }\n  // NOTE: this differs from accname-1.2 specification.\n  //  - does not implement acc-name-1.2 Step 2.E.: '''if the current node is a control embedded\n  //     within the label... then include the embedded control as part of the text alternative in\n  //     the following manner...'''. Step 2E applies to embedded controls such as textbox, listbox,\n  //     range, etc.\n  //  - does not implement acc-name-1.2 step 2.F.: check that '''role allows name from content''',\n  //    which applies to `currentNode` and its children.\n  //  - does not implement acc-name-1.2 Step 2.F.ii.: '''Check for CSS generated textual content'''\n  //    (e.g. :before and :after).\n  //  - does not implement acc-name-1.2 Step 2.I.: '''if the current node has a Tooltip attribute,\n  //    return its value'''\n  // Return text content with whitespace collapsed into a single space character. Accomplish\n  // acc-name-1.2 steps 2F, 2G, and 2H.\n  return (currentNode.textContent || '').replace(/\\s+/g, ' ').trim();\n}\n\n/**\n * Used to provide the date range input wrapper component\n * to the parts without circular dependencies.\n */\nconst MAT_DATE_RANGE_INPUT_PARENT = /*#__PURE__*/new InjectionToken('MAT_DATE_RANGE_INPUT_PARENT');\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n */\nlet MatDateRangeInputPartBase = /*#__PURE__*/(() => {\n  class MatDateRangeInputPartBase extends MatDatepickerInputBase {\n    _rangeInput = inject(MAT_DATE_RANGE_INPUT_PARENT);\n    _elementRef = inject(ElementRef);\n    _defaultErrorStateMatcher = inject(ErrorStateMatcher);\n    _injector = inject(Injector);\n    _parentForm = inject(NgForm, {\n      optional: true\n    });\n    _parentFormGroup = inject(FormGroupDirective, {\n      optional: true\n    });\n    /**\n     * Form control bound to this input part.\n     * @docs-private\n     */\n    ngControl;\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _errorStateTracker;\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n      return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n      this._errorStateTracker.matcher = value;\n    }\n    /** Whether the input is in an error state. */\n    get errorState() {\n      return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n      this._errorStateTracker.errorState = value;\n    }\n    constructor() {\n      super();\n      this._errorStateTracker = new _ErrorStateTracker(this._defaultErrorStateMatcher, null, this._parentFormGroup, this._parentForm, this.stateChanges);\n    }\n    ngOnInit() {\n      // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\n      // injecting its `NgControl` so that the error state is handled correctly. This introduces a\n      // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\n      // itself. Usually we can work around it for the CVA, but there's no API to do it for the\n      // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\n      // everything has been resolved.\n      const ngControl = this._injector.get(NgControl, null, {\n        optional: true,\n        self: true\n      });\n      if (ngControl) {\n        this.ngControl = ngControl;\n        this._errorStateTracker.ngControl = ngControl;\n      }\n    }\n    ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      }\n    }\n    /** Gets whether the input is empty. */\n    isEmpty() {\n      return this._elementRef.nativeElement.value.length === 0;\n    }\n    /** Gets the placeholder of the input. */\n    _getPlaceholder() {\n      return this._elementRef.nativeElement.placeholder;\n    }\n    /** Focuses the input. */\n    focus() {\n      this._elementRef.nativeElement.focus();\n    }\n    /** Gets the value that should be used when mirroring the input's size. */\n    getMirrorValue() {\n      const element = this._elementRef.nativeElement;\n      const value = element.value;\n      return value.length > 0 ? value : element.placeholder;\n    }\n    /** Refreshes the error state of the input. */\n    updateErrorState() {\n      this._errorStateTracker.updateErrorState();\n    }\n    /** Handles `input` events on the input element. */\n    _onInput(value) {\n      super._onInput(value);\n      this._rangeInput._handleChildValueChange();\n    }\n    /** Opens the datepicker associated with the input. */\n    _openPopup() {\n      this._rangeInput._openDatepicker();\n    }\n    /** Gets the minimum date from the range input. */\n    _getMinDate() {\n      return this._rangeInput.min;\n    }\n    /** Gets the maximum date from the range input. */\n    _getMaxDate() {\n      return this._rangeInput.max;\n    }\n    /** Gets the date filter function from the range input. */\n    _getDateFilter() {\n      return this._rangeInput.dateFilter;\n    }\n    _parentDisabled() {\n      return this._rangeInput._groupDisabled;\n    }\n    _shouldHandleChangeEvent({\n      source\n    }) {\n      return source !== this._rangeInput._startInput && source !== this._rangeInput._endInput;\n    }\n    _assignValueProgrammatically(value) {\n      super._assignValueProgrammatically(value);\n      const opposite = this === this._rangeInput._startInput ? this._rangeInput._endInput : this._rangeInput._startInput;\n      opposite?._validatorOnChange();\n    }\n    /** return the ARIA accessible name of the input element */\n    _getAccessibleName() {\n      return _computeAriaAccessibleName(this._elementRef.nativeElement);\n    }\n    static ɵfac = function MatDateRangeInputPartBase_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDateRangeInputPartBase)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDateRangeInputPartBase,\n      inputs: {\n        errorStateMatcher: \"errorStateMatcher\"\n      },\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatDateRangeInputPartBase;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Input for entering the start date in a `mat-date-range-input`. */\nlet MatStartDate = /*#__PURE__*/(() => {\n  class MatStartDate extends MatDateRangeInputPartBase {\n    /** Validator that checks that the start date isn't after the end date. */\n    _startValidator = control => {\n      const start = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      const end = this._model ? this._model.selection.end : null;\n      return !start || !end || this._dateAdapter.compareDate(start, end) <= 0 ? null : {\n        'matStartDateInvalid': {\n          'end': end,\n          'actual': start\n        }\n      };\n    };\n    _validator = Validators.compose([...super._getValidators(), this._startValidator]);\n    _getValueFromModel(modelValue) {\n      return modelValue.start;\n    }\n    _shouldHandleChangeEvent(change) {\n      if (!super._shouldHandleChangeEvent(change)) {\n        return false;\n      } else {\n        return !change.oldValue?.start ? !!change.selection.start : !change.selection.start || !!this._dateAdapter.compareDate(change.oldValue.start, change.selection.start);\n      }\n    }\n    _assignValueToModel(value) {\n      if (this._model) {\n        const range = new DateRange(value, this._model.selection.end);\n        this._model.updateSelection(range, this);\n      }\n    }\n    _formatValue(value) {\n      super._formatValue(value);\n      // Any time the input value is reformatted we need to tell the parent.\n      this._rangeInput._handleChildValueChange();\n    }\n    _onKeydown(event) {\n      const endInput = this._rangeInput._endInput;\n      const element = this._elementRef.nativeElement;\n      const isLtr = this._dir?.value !== 'rtl';\n      // If the user hits RIGHT (LTR) when at the end of the input (and no\n      // selection), move the cursor to the start of the end input.\n      if ((event.keyCode === RIGHT_ARROW && isLtr || event.keyCode === LEFT_ARROW && !isLtr) && element.selectionStart === element.value.length && element.selectionEnd === element.value.length) {\n        event.preventDefault();\n        endInput._elementRef.nativeElement.setSelectionRange(0, 0);\n        endInput.focus();\n      } else {\n        super._onKeydown(event);\n      }\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatStartDate_BaseFactory;\n      return function MatStartDate_Factory(__ngFactoryType__) {\n        return (ɵMatStartDate_BaseFactory || (ɵMatStartDate_BaseFactory = i0.ɵɵgetInheritedFactory(MatStartDate)))(__ngFactoryType__ || MatStartDate);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatStartDate,\n      selectors: [[\"input\", \"matStartDate\", \"\"]],\n      hostAttrs: [\"type\", \"text\", 1, \"mat-start-date\", \"mat-date-range-input-inner\"],\n      hostVars: 5,\n      hostBindings: function MatStartDate_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function MatStartDate_input_HostBindingHandler($event) {\n            return ctx._onInput($event.target.value);\n          })(\"change\", function MatStartDate_change_HostBindingHandler() {\n            return ctx._onChange();\n          })(\"keydown\", function MatStartDate_keydown_HostBindingHandler($event) {\n            return ctx._onKeydown($event);\n          })(\"blur\", function MatStartDate_blur_HostBindingHandler() {\n            return ctx._onBlur();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n          i0.ɵɵattribute(\"aria-haspopup\", ctx._rangeInput.rangePicker ? \"dialog\" : null)(\"aria-owns\", ctx._rangeInput._ariaOwns ? ctx._rangeInput._ariaOwns() : (ctx._rangeInput.rangePicker == null ? null : ctx._rangeInput.rangePicker.opened) && ctx._rangeInput.rangePicker.id || null)(\"min\", ctx._getMinDate() ? ctx._dateAdapter.toIso8601(ctx._getMinDate()) : null)(\"max\", ctx._getMaxDate() ? ctx._dateAdapter.toIso8601(ctx._getMaxDate()) : null);\n        }\n      },\n      outputs: {\n        dateChange: \"dateChange\",\n        dateInput: \"dateInput\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: MatStartDate,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: MatStartDate,\n        multi: true\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatStartDate;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Input for entering the end date in a `mat-date-range-input`. */\nlet MatEndDate = /*#__PURE__*/(() => {\n  class MatEndDate extends MatDateRangeInputPartBase {\n    /** Validator that checks that the end date isn't before the start date. */\n    _endValidator = control => {\n      const end = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      const start = this._model ? this._model.selection.start : null;\n      return !end || !start || this._dateAdapter.compareDate(end, start) >= 0 ? null : {\n        'matEndDateInvalid': {\n          'start': start,\n          'actual': end\n        }\n      };\n    };\n    _validator = Validators.compose([...super._getValidators(), this._endValidator]);\n    _getValueFromModel(modelValue) {\n      return modelValue.end;\n    }\n    _shouldHandleChangeEvent(change) {\n      if (!super._shouldHandleChangeEvent(change)) {\n        return false;\n      } else {\n        return !change.oldValue?.end ? !!change.selection.end : !change.selection.end || !!this._dateAdapter.compareDate(change.oldValue.end, change.selection.end);\n      }\n    }\n    _assignValueToModel(value) {\n      if (this._model) {\n        const range = new DateRange(this._model.selection.start, value);\n        this._model.updateSelection(range, this);\n      }\n    }\n    _moveCaretToEndOfStartInput() {\n      const startInput = this._rangeInput._startInput._elementRef.nativeElement;\n      const value = startInput.value;\n      if (value.length > 0) {\n        startInput.setSelectionRange(value.length, value.length);\n      }\n      startInput.focus();\n    }\n    _onKeydown(event) {\n      const element = this._elementRef.nativeElement;\n      const isLtr = this._dir?.value !== 'rtl';\n      // If the user is pressing backspace on an empty end input, move focus back to the start.\n      if (event.keyCode === BACKSPACE && !element.value) {\n        this._moveCaretToEndOfStartInput();\n      }\n      // If the user hits LEFT (LTR) when at the start of the input (and no\n      // selection), move the cursor to the end of the start input.\n      else if ((event.keyCode === LEFT_ARROW && isLtr || event.keyCode === RIGHT_ARROW && !isLtr) && element.selectionStart === 0 && element.selectionEnd === 0) {\n        event.preventDefault();\n        this._moveCaretToEndOfStartInput();\n      } else {\n        super._onKeydown(event);\n      }\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatEndDate_BaseFactory;\n      return function MatEndDate_Factory(__ngFactoryType__) {\n        return (ɵMatEndDate_BaseFactory || (ɵMatEndDate_BaseFactory = i0.ɵɵgetInheritedFactory(MatEndDate)))(__ngFactoryType__ || MatEndDate);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatEndDate,\n      selectors: [[\"input\", \"matEndDate\", \"\"]],\n      hostAttrs: [\"type\", \"text\", 1, \"mat-end-date\", \"mat-date-range-input-inner\"],\n      hostVars: 5,\n      hostBindings: function MatEndDate_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function MatEndDate_input_HostBindingHandler($event) {\n            return ctx._onInput($event.target.value);\n          })(\"change\", function MatEndDate_change_HostBindingHandler() {\n            return ctx._onChange();\n          })(\"keydown\", function MatEndDate_keydown_HostBindingHandler($event) {\n            return ctx._onKeydown($event);\n          })(\"blur\", function MatEndDate_blur_HostBindingHandler() {\n            return ctx._onBlur();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n          i0.ɵɵattribute(\"aria-haspopup\", ctx._rangeInput.rangePicker ? \"dialog\" : null)(\"aria-owns\", ctx._rangeInput._ariaOwns ? ctx._rangeInput._ariaOwns() : (ctx._rangeInput.rangePicker == null ? null : ctx._rangeInput.rangePicker.opened) && ctx._rangeInput.rangePicker.id || null)(\"min\", ctx._getMinDate() ? ctx._dateAdapter.toIso8601(ctx._getMinDate()) : null)(\"max\", ctx._getMaxDate() ? ctx._dateAdapter.toIso8601(ctx._getMaxDate()) : null);\n        }\n      },\n      outputs: {\n        dateChange: \"dateChange\",\n        dateInput: \"dateInput\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: MatEndDate,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: MatEndDate,\n        multi: true\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatEndDate;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatDateRangeInput = /*#__PURE__*/(() => {\n  class MatDateRangeInput {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _formField = inject(MAT_FORM_FIELD, {\n      optional: true\n    });\n    _closedSubscription = Subscription.EMPTY;\n    _openedSubscription = Subscription.EMPTY;\n    /** Current value of the range input. */\n    get value() {\n      return this._model ? this._model.selection : null;\n    }\n    /** Unique ID for the group. */\n    id = inject(_IdGenerator).getId('mat-date-range-input-');\n    /** Whether the control is focused. */\n    focused = false;\n    /** Whether the control's label should float. */\n    get shouldLabelFloat() {\n      return this.focused || !this.empty;\n    }\n    /** Name of the form control. */\n    controlType = 'mat-date-range-input';\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n     * @docs-private\n     */\n    get placeholder() {\n      const start = this._startInput?._getPlaceholder() || '';\n      const end = this._endInput?._getPlaceholder() || '';\n      return start || end ? `${start} ${this.separator} ${end}` : '';\n    }\n    /** The range picker that this input is associated with. */\n    get rangePicker() {\n      return this._rangePicker;\n    }\n    set rangePicker(rangePicker) {\n      if (rangePicker) {\n        this._model = rangePicker.registerInput(this);\n        this._rangePicker = rangePicker;\n        this._closedSubscription.unsubscribe();\n        this._openedSubscription.unsubscribe();\n        this._ariaOwns.set(this.rangePicker.opened ? rangePicker.id : null);\n        this._closedSubscription = rangePicker.closedStream.subscribe(() => {\n          this._startInput?._onTouched();\n          this._endInput?._onTouched();\n          this._ariaOwns.set(null);\n        });\n        this._openedSubscription = rangePicker.openedStream.subscribe(() => {\n          this._ariaOwns.set(rangePicker.id);\n        });\n        this._registerModel(this._model);\n      }\n    }\n    _rangePicker;\n    /** The id of the panel owned by this input. */\n    _ariaOwns = signal(null);\n    /** Whether the input is required. */\n    get required() {\n      return this._required ?? (this._isTargetRequired(this) || this._isTargetRequired(this._startInput) || this._isTargetRequired(this._endInput)) ?? false;\n    }\n    set required(value) {\n      this._required = value;\n    }\n    _required;\n    /** Function that can be used to filter out dates within the date range picker. */\n    get dateFilter() {\n      return this._dateFilter;\n    }\n    set dateFilter(value) {\n      const start = this._startInput;\n      const end = this._endInput;\n      const wasMatchingStart = start && start._matchesFilter(start.value);\n      const wasMatchingEnd = end && end._matchesFilter(start.value);\n      this._dateFilter = value;\n      if (start && start._matchesFilter(start.value) !== wasMatchingStart) {\n        start._validatorOnChange();\n      }\n      if (end && end._matchesFilter(end.value) !== wasMatchingEnd) {\n        end._validatorOnChange();\n      }\n    }\n    _dateFilter;\n    /** The minimum valid date. */\n    get min() {\n      return this._min;\n    }\n    set min(value) {\n      const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      if (!this._dateAdapter.sameDate(validValue, this._min)) {\n        this._min = validValue;\n        this._revalidate();\n      }\n    }\n    _min;\n    /** The maximum valid date. */\n    get max() {\n      return this._max;\n    }\n    set max(value) {\n      const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      if (!this._dateAdapter.sameDate(validValue, this._max)) {\n        this._max = validValue;\n        this._revalidate();\n      }\n    }\n    _max;\n    /** Whether the input is disabled. */\n    get disabled() {\n      return this._startInput && this._endInput ? this._startInput.disabled && this._endInput.disabled : this._groupDisabled;\n    }\n    set disabled(value) {\n      if (value !== this._groupDisabled) {\n        this._groupDisabled = value;\n        this.stateChanges.next(undefined);\n      }\n    }\n    _groupDisabled = false;\n    /** Whether the input is in an error state. */\n    get errorState() {\n      if (this._startInput && this._endInput) {\n        return this._startInput.errorState || this._endInput.errorState;\n      }\n      return false;\n    }\n    /** Whether the datepicker input is empty. */\n    get empty() {\n      const startEmpty = this._startInput ? this._startInput.isEmpty() : false;\n      const endEmpty = this._endInput ? this._endInput.isEmpty() : false;\n      return startEmpty && endEmpty;\n    }\n    /** Value for the `aria-describedby` attribute of the inputs. */\n    _ariaDescribedBy = null;\n    /** Date selection model currently registered with the input. */\n    _model;\n    /** Separator text to be shown between the inputs. */\n    separator = '–';\n    /** Start of the comparison range that should be shown in the calendar. */\n    comparisonStart = null;\n    /** End of the comparison range that should be shown in the calendar. */\n    comparisonEnd = null;\n    _startInput;\n    _endInput;\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\n     * @docs-private\n     */\n    ngControl;\n    /** Emits when the input's state has changed. */\n    stateChanges = new Subject();\n    /**\n     * Disable the automatic labeling to avoid issues like #27241.\n     * @docs-private\n     */\n    disableAutomaticLabeling = true;\n    constructor() {\n      if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      // The datepicker module can be used both with MDC and non-MDC form fields. We have\n      // to conditionally add the MDC input class so that the range picker looks correctly.\n      if (this._formField?._elementRef.nativeElement.classList.contains('mat-mdc-form-field')) {\n        this._elementRef.nativeElement.classList.add('mat-mdc-input-element', 'mat-mdc-form-field-input-control', 'mdc-text-field__input');\n      }\n      // TODO(crisbeto): remove `as any` after #18206 lands.\n      this.ngControl = inject(ControlContainer, {\n        optional: true,\n        self: true\n      });\n    }\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n      this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\n    }\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    onContainerClick() {\n      if (!this.focused && !this.disabled) {\n        if (!this._model || !this._model.selection.start) {\n          this._startInput.focus();\n        } else {\n          this._endInput.focus();\n        }\n      }\n    }\n    ngAfterContentInit() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._startInput) {\n          throw Error('mat-date-range-input must contain a matStartDate input');\n        }\n        if (!this._endInput) {\n          throw Error('mat-date-range-input must contain a matEndDate input');\n        }\n      }\n      if (this._model) {\n        this._registerModel(this._model);\n      }\n      // We don't need to unsubscribe from this, because we\n      // know that the input streams will be completed on destroy.\n      merge(this._startInput.stateChanges, this._endInput.stateChanges).subscribe(() => {\n        this.stateChanges.next(undefined);\n      });\n    }\n    ngOnChanges(changes) {\n      if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n        this.stateChanges.next(undefined);\n      }\n    }\n    ngOnDestroy() {\n      this._closedSubscription.unsubscribe();\n      this._openedSubscription.unsubscribe();\n      this.stateChanges.complete();\n    }\n    /** Gets the date at which the calendar should start. */\n    getStartValue() {\n      return this.value ? this.value.start : null;\n    }\n    /** Gets the input's theme palette. */\n    getThemePalette() {\n      return this._formField ? this._formField.color : undefined;\n    }\n    /** Gets the element to which the calendar overlay should be attached. */\n    getConnectedOverlayOrigin() {\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    /** Gets the ID of an element that should be used a description for the calendar overlay. */\n    getOverlayLabelId() {\n      return this._formField ? this._formField.getLabelId() : null;\n    }\n    /** Gets the value that is used to mirror the state input. */\n    _getInputMirrorValue(part) {\n      const input = part === 'start' ? this._startInput : this._endInput;\n      return input ? input.getMirrorValue() : '';\n    }\n    /** Whether the input placeholders should be hidden. */\n    _shouldHidePlaceholders() {\n      return this._startInput ? !this._startInput.isEmpty() : false;\n    }\n    /** Handles the value in one of the child inputs changing. */\n    _handleChildValueChange() {\n      this.stateChanges.next(undefined);\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Opens the date range picker associated with the input. */\n    _openDatepicker() {\n      if (this._rangePicker) {\n        this._rangePicker.open();\n      }\n    }\n    /** Whether the separate text should be hidden. */\n    _shouldHideSeparator() {\n      return (!this._formField || this._formField.getLabelId() && !this._formField._shouldLabelFloat()) && this.empty;\n    }\n    /** Gets the value for the `aria-labelledby` attribute of the inputs. */\n    _getAriaLabelledby() {\n      const formField = this._formField;\n      return formField && formField._hasFloatingLabel() ? formField._labelId : null;\n    }\n    _getStartDateAccessibleName() {\n      return this._startInput._getAccessibleName();\n    }\n    _getEndDateAccessibleName() {\n      return this._endInput._getAccessibleName();\n    }\n    /** Updates the focused state of the range input. */\n    _updateFocus(origin) {\n      this.focused = origin !== null;\n      this.stateChanges.next();\n    }\n    /** Re-runs the validators on the start/end inputs. */\n    _revalidate() {\n      if (this._startInput) {\n        this._startInput._validatorOnChange();\n      }\n      if (this._endInput) {\n        this._endInput._validatorOnChange();\n      }\n    }\n    /** Registers the current date selection model with the start/end inputs. */\n    _registerModel(model) {\n      if (this._startInput) {\n        this._startInput._registerModel(model);\n      }\n      if (this._endInput) {\n        this._endInput._registerModel(model);\n      }\n    }\n    /** Checks whether a specific range input directive is required. */\n    _isTargetRequired(target) {\n      return target?.ngControl?.control?.hasValidator(Validators.required);\n    }\n    static ɵfac = function MatDateRangeInput_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDateRangeInput)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDateRangeInput,\n      selectors: [[\"mat-date-range-input\"]],\n      contentQueries: function MatDateRangeInput_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatStartDate, 5);\n          i0.ɵɵcontentQuery(dirIndex, MatEndDate, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._startInput = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._endInput = _t.first);\n        }\n      },\n      hostAttrs: [\"role\", \"group\", 1, \"mat-date-range-input\"],\n      hostVars: 8,\n      hostBindings: function MatDateRangeInput_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"id\", ctx.id)(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-describedby\", ctx._ariaDescribedBy)(\"data-mat-calendar\", ctx.rangePicker ? ctx.rangePicker.id : null);\n          i0.ɵɵclassProp(\"mat-date-range-input-hide-placeholders\", ctx._shouldHidePlaceholders())(\"mat-date-range-input-required\", ctx.required);\n        }\n      },\n      inputs: {\n        rangePicker: \"rangePicker\",\n        required: [2, \"required\", \"required\", booleanAttribute],\n        dateFilter: \"dateFilter\",\n        min: \"min\",\n        max: \"max\",\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        separator: \"separator\",\n        comparisonStart: \"comparisonStart\",\n        comparisonEnd: \"comparisonEnd\"\n      },\n      exportAs: [\"matDateRangeInput\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MatFormFieldControl,\n        useExisting: MatDateRangeInput\n      }, {\n        provide: MAT_DATE_RANGE_INPUT_PARENT,\n        useExisting: MatDateRangeInput\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c6,\n      decls: 11,\n      vars: 5,\n      consts: [[\"cdkMonitorSubtreeFocus\", \"\", 1, \"mat-date-range-input-container\", 3, \"cdkFocusChange\"], [1, \"mat-date-range-input-wrapper\"], [\"aria-hidden\", \"true\", 1, \"mat-date-range-input-mirror\"], [1, \"mat-date-range-input-separator\"], [1, \"mat-date-range-input-wrapper\", \"mat-date-range-input-end-wrapper\"]],\n      template: function MatDateRangeInput_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c5);\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵlistener(\"cdkFocusChange\", function MatDateRangeInput_Template_div_cdkFocusChange_0_listener($event) {\n            return ctx._updateFocus($event);\n          });\n          i0.ɵɵelementStart(1, \"div\", 1);\n          i0.ɵɵprojection(2);\n          i0.ɵɵelementStart(3, \"span\", 2);\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"span\", 3);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\", 4);\n          i0.ɵɵprojection(8, 1);\n          i0.ɵɵelementStart(9, \"span\", 2);\n          i0.ɵɵtext(10);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx._getInputMirrorValue(\"start\"));\n          i0.ɵɵadvance();\n          i0.ɵɵclassProp(\"mat-date-range-input-separator-hidden\", ctx._shouldHideSeparator());\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx.separator);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx._getInputMirrorValue(\"end\"));\n        }\n      },\n      dependencies: [CdkMonitorFocus],\n      styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{transition:opacity 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);margin:0 4px;color:var(--mat-datepicker-range-input-separator-color, var(--mat-sys-on-surface))}.mat-form-field-disabled .mat-date-range-input-separator{color:var(--mat-datepicker-range-input-disabled-state-separator-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}._mat-animation-noopable .mat-date-range-input-separator{transition:none}.mat-date-range-input-separator-hidden{-webkit-user-select:none;user-select:none;opacity:0;transition:none}.mat-date-range-input-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-end-wrapper{flex-grow:1}.mat-date-range-input-inner{position:absolute;top:0;left:0;font:inherit;background:rgba(0,0,0,0);color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%;height:100%}.mat-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner[disabled]{color:var(--mat-datepicker-range-input-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{opacity:0}}._mat-animation-noopable .mat-date-range-input-inner::placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-moz-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-webkit-input-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner:-ms-input-placeholder{transition:none}.mat-date-range-input-mirror{-webkit-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-mdc-form-field-type-mat-date-range-input .mat-mdc-form-field-infix{width:200px}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDateRangeInput;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the date range picker popup/dialog. */\nlet MatDateRangePicker = /*#__PURE__*/(() => {\n  class MatDateRangePicker extends MatDatepickerBase {\n    _forwardContentValues(instance) {\n      super._forwardContentValues(instance);\n      const input = this.datepickerInput;\n      if (input) {\n        instance.comparisonStart = input.comparisonStart;\n        instance.comparisonEnd = input.comparisonEnd;\n        instance.startDateAccessibleName = input._getStartDateAccessibleName();\n        instance.endDateAccessibleName = input._getEndDateAccessibleName();\n      }\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatDateRangePicker_BaseFactory;\n      return function MatDateRangePicker_Factory(__ngFactoryType__) {\n        return (ɵMatDateRangePicker_BaseFactory || (ɵMatDateRangePicker_BaseFactory = i0.ɵɵgetInheritedFactory(MatDateRangePicker)))(__ngFactoryType__ || MatDateRangePicker);\n      };\n    })();\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDateRangePicker,\n      selectors: [[\"mat-date-range-picker\"]],\n      exportAs: [\"matDateRangePicker\"],\n      features: [i0.ɵɵProvidersFeature([MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_CALENDAR_RANGE_STRATEGY_PROVIDER, {\n        provide: MatDatepickerBase,\n        useExisting: MatDateRangePicker\n      }]), i0.ɵɵInheritDefinitionFeature],\n      decls: 0,\n      vars: 0,\n      template: function MatDateRangePicker_Template(rf, ctx) {},\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDateRangePicker;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Button that will close the datepicker and assign the current selection to the data model. */\nlet MatDatepickerApply = /*#__PURE__*/(() => {\n  class MatDatepickerApply {\n    _datepicker = inject(MatDatepickerBase);\n    constructor() {}\n    _applySelection() {\n      this._datepicker._applyPendingSelection();\n      this._datepicker.close();\n    }\n    static ɵfac = function MatDatepickerApply_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerApply)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerApply,\n      selectors: [[\"\", \"matDatepickerApply\", \"\"], [\"\", \"matDateRangePickerApply\", \"\"]],\n      hostBindings: function MatDatepickerApply_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function MatDatepickerApply_click_HostBindingHandler() {\n            return ctx._applySelection();\n          });\n        }\n      }\n    });\n  }\n  return MatDatepickerApply;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Button that will close the datepicker and discard the current selection. */\nlet MatDatepickerCancel = /*#__PURE__*/(() => {\n  class MatDatepickerCancel {\n    _datepicker = inject(MatDatepickerBase);\n    constructor() {}\n    static ɵfac = function MatDatepickerCancel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerCancel)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerCancel,\n      selectors: [[\"\", \"matDatepickerCancel\", \"\"], [\"\", \"matDateRangePickerCancel\", \"\"]],\n      hostBindings: function MatDatepickerCancel_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function MatDatepickerCancel_click_HostBindingHandler() {\n            return ctx._datepicker.close();\n          });\n        }\n      }\n    });\n  }\n  return MatDatepickerCancel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Container that can be used to project a row of action buttons\n * to the bottom of a datepicker or date range picker.\n */\nlet MatDatepickerActions = /*#__PURE__*/(() => {\n  class MatDatepickerActions {\n    _datepicker = inject(MatDatepickerBase);\n    _viewContainerRef = inject(ViewContainerRef);\n    _template;\n    _portal;\n    constructor() {}\n    ngAfterViewInit() {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n      this._datepicker.registerActions(this._portal);\n    }\n    ngOnDestroy() {\n      this._datepicker.removeActions(this._portal);\n      // Needs to be null checked since we initialize it in `ngAfterViewInit`.\n      if (this._portal && this._portal.isAttached) {\n        this._portal?.detach();\n      }\n    }\n    static ɵfac = function MatDatepickerActions_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerActions)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDatepickerActions,\n      selectors: [[\"mat-datepicker-actions\"], [\"mat-date-range-picker-actions\"]],\n      viewQuery: function MatDatepickerActions_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(TemplateRef, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._template = _t.first);\n        }\n      },\n      ngContentSelectors: _c1,\n      decls: 1,\n      vars: 0,\n      consts: [[1, \"mat-datepicker-actions\"]],\n      template: function MatDatepickerActions_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, MatDatepickerActions_ng_template_0_Template, 2, 0, \"ng-template\");\n        }\n      },\n      styles: [\".mat-datepicker-actions{display:flex;justify-content:flex-end;align-items:center;padding:0 8px 8px 8px}.mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDatepickerActions;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatDatepickerModule = /*#__PURE__*/(() => {\n  class MatDatepickerModule {\n    static ɵfac = function MatDatepickerModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatDatepickerModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n      imports: [MatButtonModule, OverlayModule, A11yModule, PortalModule, MatCommonModule, MatDatepickerContent, MatDatepickerToggle, MatCalendarHeader, CdkScrollableModule]\n    });\n  }\n  return MatDatepickerModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DateRange, DefaultMatCalendarRangeStrategy, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_DATEPICKER_VALIDATORS, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATE_RANGE_SELECTION_STRATEGY, MAT_RANGE_DATE_SELECTION_MODEL_FACTORY, MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY, MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, MatCalendar, MatCalendarBody, MatCalendarCell, MatCalendarHeader, MatDateRangeInput, MatDateRangePicker, MatDateSelectionModel, MatDatepicker, MatDatepickerActions, MatDatepickerApply, MatDatepickerCancel, MatDatepickerContent, MatDatepickerInput, MatDatepickerInputEvent, MatDatepickerIntl, MatDatepickerModule, MatDatepickerToggle, MatDatepickerToggleIcon, MatEndDate, MatMonthView, MatMultiYearView, MatRangeDateSelectionModel, MatSingleDateSelectionModel, MatStartDate, MatYearView, matDatepickerAnimations, yearsPerPage, yearsPerRow };\n"],"mappings":"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","names":["_c0","_forTrack0","$index","$item","_forTrack1","MatCalendarBody_Conditional_0_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵadvance","ɵɵstyleProp","ɵɵattribute","ɵɵtextInterpolate1","MatCalendarBody_For_2_Conditional_1_Template","MatCalendarBody_For_2_For_3_Template","_r2","ɵɵgetCurrentView","ɵɵlistener","$event","item_r3","ɵɵrestoreView","ɵɵresetView","ɵɵelement","ɵ$index_14_r4","ɵ$index_7_r5","ɵɵclassProp","ɵɵproperty","MatCalendarBody_For_2_Template","ɵɵtemplate","ɵɵrepeaterCreate","row_r6","ɵɵconditional","ɵɵrepeater","MatMonthView_For_4_Template","day_r1","ɵɵtextInterpolate","_c1","MatCalendar_ng_template_0_Template","MatCalendar_Case_2_Template","_r1","ɵɵtwoWayListener","ctx_r1","ɵɵtwoWayBindingSet","ɵɵtwoWayProperty","MatCalendar_Case_3_Template","_r3","MatCalendar_Case_4_Template","_r4","MatDatepickerContent_ng_template_2_Template","_c2","_c3","_c4","MatDatepickerToggle_Conditional_2_Template","ɵɵnamespaceSVG","MatDatepickerIntl","Subject","start","end","__ngFactoryType__","ɵɵdefineInjectable","uniqueIdCounter$1","MatCalendarCell","value","displayValue","ariaLabel","enabled","cssClasses","compareValue","rawValue","activeCapturingEventOptions","normalizePassiveListenerOptions","passiveCapturingEventOptions","passiveEventOptions","MatCalendarBody","inject","ElementRef","NgZone","Platform","EventEmitter","Injector","row","idGenerator","_IdGenerator","_CdkPrivateStyleLoader","_StructuralStylesLoader","element","cell","event","changes","columnChanges","rows","numCols","rowIndex","colIndex","cellNumber","movePreview","afterNextRender","activeCell","isStart","isEnd","isInRange","previousCell","previousRow","nextCell","nextRow","target","getActualTouchTarget","getCellElement","cellElement","col","ɵɵdefineComponent","ɵɵNgOnChangesFeature","_c0","rf","ctx","ɵɵtemplate","MatCalendarBody_Conditional_0_Template","ɵɵrepeaterCreate","MatCalendarBody_For_2_Template","_forTrack0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵconditional","ɵɵadvance","ɵɵrepeater","ɵɵproperty","ɵɵtextInterpolate1","ɵɵtextInterpolate2","NgClass","isTableCell","node","rangeEnabled","touchLocation","DateRange","MatDateSelectionModel","selection","_adapter","source","oldValue","date","ɵɵinvalidFactory","MatSingleDateSelectionModel","adapter","clone","ɵɵinject","DateAdapter","MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY","parent","adapter","MatSingleDateSelectionModel","MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER","MatDateSelectionModel","Optional","SkipSelf","DateAdapter","MAT_DATE_RANGE_SELECTION_STRATEGY","InjectionToken","DAYS_PER_WEEK","uniqueIdCounter","MatMonthView","inject","ChangeDetectorRef","MAT_DATE_FORMATS","DateAdapter","Directionality","MAT_DATE_RANGE_SELECTION_STRATEGY","Subscription","value","oldActiveDate","validDate","DateRange","EventEmitter","_CdkPrivateStyleLoader","_VisuallyHiddenLoader","startWith","changes","comparisonChange","event","date","selectedDate","rangeStartDate","rangeEndDate","month","isRtl","hasModifierKey","firstOfMonth","movePreview","cell","previewRange","dragRange","dragDropResult","dayOfMonth","firstDayOfWeek","narrowWeekdays","weekdays","long","i","daysInMonth","dateNames","enabled","ariaLabel","cellClasses","MatCalendarCell","d1","d2","year","day","selectedValue","__ngFactoryType__","ɵɵdefineComponent","rf","ctx","ɵɵviewQuery","MatCalendarBody","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵNgOnChangesFeature","ɵɵelementStart","ɵɵrepeaterCreate","MatMonthView_For_4_Template","_forTrack1","ɵɵelementEnd","ɵɵelement","ɵɵlistener","$event","ɵɵadvance","ɵɵrepeater","ɵɵproperty","yearsPerPage","yearsPerRow","MatMultiYearView","isSameMultiYearView","minYearOfPage","getActiveOffset","row","selectedYear","activeMonth","yearName","firstOfYear","displayValue","dateAdapter","date1","date2","minDate","maxDate","year1","year2","startingYear","getStartingYear","activeDate","activeYear","euclideanModulo","a","b","MatYearView","selectedMonth","monthNames","normalizedDate","monthName","maxYear","maxMonth","minYear","minMonth","MatCalendarHeader","MatDatepickerIntl","MatCalendar","changeDetectorRef","maxYearOfPage","minYearLabel","maxYearLabel","_IdGenerator","_c1","ɵɵprojectionDef","ɵɵtext","ɵɵnamespaceSVG","ɵɵnamespaceHTML","ɵɵprojection","ɵɵtextInterpolate","ɵɵattribute","ɵɵclassProp","MatButton","MatIconButton","viewChangedResult","Subject","ComponentPortal","minDateChange","maxDateChange","changeRequiringRerender","view","normalizedYear","normalizedMonth","ɵɵProvidersFeature","MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER","ɵɵtemplate","MatCalendar_ng_template_0_Template","MatCalendar_Case_2_Template","MatCalendar_Case_3_Template","MatCalendar_Case_4_Template","tmp_1_0","ɵɵconditional","CdkPortalOutlet","CdkMonitorFocus","matDatepickerAnimations","trigger","transition","animate","keyframes","style","state","MAT_DATEPICKER_SCROLL_STRATEGY","InjectionToken","overlay","Overlay","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerContent","ElementRef","MatDateSelectionModel","intl","selection","isRange","newSelection","portal","forceRerender","ɵɵsyntheticHostListener","ɵɵsyntheticHostProperty","ɵɵclassMap","MatDatepickerContent_ng_template_2_Template","tmp_3_0","CdkTrapFocus","MatDatepickerBase","ViewContainerRef","DOCUMENT","coerceStringArray","Injector","positionChange","positionStrategy","FlexibleConnectedPositionStrategy","input","_getFocusedElementPierceShadowDom","canRestoreFocus","completeClose","instance","location","take","activeElement","isDialog","overlayRef","OverlayConfig","keyCode","afterNextRender","strategy","primaryX","secondaryX","primaryY","secondaryY","ctrlShiftMetaModifiers","merge","filter","modifier","ɵɵdefineDirective","booleanAttribute","ɵɵInputTransformsFeature","MatDatepicker","ɵMatDatepicker_BaseFactory","ɵɵgetInheritedFactory","ɵɵInheritDefinitionFeature","MatDatepickerInputEvent","target","targetElement","MatDatepickerInputBase","newValue","element","control","controlValue","min","max","model","dateInputsHaveChanged","fn","c","isDisabled","lastValueWasValid","hasChanged","adapter","keys","key","previousValue","currentValue","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MAT_FORM_FIELD","datepicker","signal","validValue","wasMatchingValue","Validators","modelValue","ɵɵhostProperty","MAT_INPUT_VALUE_ACCESSOR","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","HostAttributeToken","parsedTabIndex","datepickerStateChanged","of","inputStateChanged","datepickerToggled","dirIndex","ɵɵcontentQuery","_c2","_c4","_c3","MatDatepickerToggle_Conditional_2_Template","MatDatepickerModule","__ngFactoryType__","ɵɵdefineNgModule","ɵɵdefineInjector","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatButtonModule","OverlayModule","A11yModule","PortalModule","MatCommonModule","MatDatepickerContent","MatDatepickerToggle","MatCalendarHeader","CdkScrollableModule"],"x_google_ignoreList":[0]}